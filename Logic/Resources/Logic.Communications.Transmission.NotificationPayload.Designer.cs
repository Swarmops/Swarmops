//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Swarmops.Logic.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Logic_Communications_Transmission_NotificationPayload {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Logic_Communications_Transmission_NotificationPayload() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Swarmops.Logic.Resources.Logic.Communications.Transmission.NotificationPayload", typeof(Logic_Communications_Transmission_NotificationPayload).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new person has applied to be a [RegularTitle] in [OrganizationName]! [ConcernedPersonName] currently resides in [GeographyName], [CountryCode]..
        /// </summary>
        public static string Applicant_Signup_Body {
            get {
                return ResourceManager.GetString("Applicant_Signup_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] New Applicant: [ConcernedPersonName], [GeographyName].
        /// </summary>
        public static string Applicant_Signup_Header {
            get {
                return ResourceManager.GetString("Applicant_Signup_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bitcoin hotwallet for [OrganizationName] just made [PaymentCount] automatic payment(s) totalling [CurrencyCode] [AmountFloat] ([BitcoinAmountFloat] microbitcoin or &quot;bits&quot;)..
        /// </summary>
        public static string Bitcoin_Hotwallet_Outflow_Body {
            get {
                return ResourceManager.GetString("Bitcoin_Hotwallet_Outflow_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Hotwallet Payout: [CurrencyCode] [AmountFloat].
        /// </summary>
        public static string Bitcoin_Hotwallet_Outflow_Subject {
            get {
                return ResourceManager.GetString("Bitcoin_Hotwallet_Outflow_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [BitcoinAmountFloat] microbitcoin (&quot;bits&quot;) was just transferred to your Bitcoin Cash address ([BitcoinAddress]) by [OrganizationName] for the following:
        ///
        ///[EmbeddedPreformattedText]
        ///
        ///You should already see the transaction in your wallet and it should achieve spendability within about an hour (six normal confirmations)..
        /// </summary>
        public static string Bitcoin_PaidOut_Body {
            get {
                return ResourceManager.GetString("Bitcoin_PaidOut_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Funds paid to you: [CurrencyCode] [AmountFloat].
        /// </summary>
        public static string Bitcoin_PaidOut_Subject {
            get {
                return ResourceManager.GetString("Bitcoin_PaidOut_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When attempting an automated payment from the hotwallet, the private key used to sign does not match the public keys used to gather the funds necessary. This is a serious condition..
        /// </summary>
        public static string Bitcoin_PrivateKeyError_Body {
            get {
                return ResourceManager.GetString("Bitcoin_PrivateKeyError_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName] - URGENT] Bitcoin private key error; can&apos;t pay.
        /// </summary>
        public static string Bitcoin_PrivateKeyError_Subject {
            get {
                return ResourceManager.GetString("Bitcoin_PrivateKeyError_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops is trying to make payments of [CurrencyCode] [AmountNeededFloat], but only [CurrencyCode] [AmountWalletFloat] is available in the Bitcoin Cash hotwallet. Swarmops is unable to make further payments at this time.
        ///
        ///Please top up the hotwallet IMMEDIATELY to at least the needed amount - an additional [AmountMissingMicrocoinsFloat] microbitcoin (&quot;bits&quot;) is required to resume financial hotwallet operations.
        ///
        ///Swarmops will keep trying and will keep sending these notifications as long as it has not su [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Bitcoin_Shortage_Critical_Body {
            get {
                return ResourceManager.GetString("Bitcoin_Shortage_Critical_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName] - ACTION ITEM] Bitcoin Cash hotwallet insufficient for payments - top up immediately.
        /// </summary>
        public static string Bitcoin_Shortage_Critical_Subject {
            get {
                return ResourceManager.GetString("Bitcoin_Shortage_Critical_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On attempting a payout to your Bitcoin Cash payout address, the address ([BitcoinAddress]) was rejected by the underlying payout engine as invalid. It has therefore been cleared from your profile.
        ///
        ///Please log on to [InstallationName] at [ExternalUrl] and set a new bitcoin payout address..
        /// </summary>
        public static string BitcoinPayoutAddress_Bad_Body {
            get {
                return ResourceManager.GetString("BitcoinPayoutAddress_Bad_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName] - ACTION ITEM] Bad bitcoin payout address.
        /// </summary>
        public static string BitcoinPayoutAddress_Bad_Subject {
            get {
                return ResourceManager.GetString("BitcoinPayoutAddress_Bad_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have changed your Bitcoin Cash payout address from [BitcoinOldAddress] to [BitcoinAddress]. As a security precaution, all payouts are quarantined for the next 48 hours.
        ///
        ///If you did NOT change the payout address and there has been a security breach, please click this link immediately to lock down your account: [LockdownLink]
        ///
        ///If you click that link, your account will be locked down immediately without confirmation requests. However, if you did request the payout address change, all is fine and no fur [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BitcoinPayoutAddress_Changed_Body {
            get {
                return ResourceManager.GetString("BitcoinPayoutAddress_Changed_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Bitcoin Cash payout address changed.
        /// </summary>
        public static string BitcoinPayoutAddress_Changed_Subject {
            get {
                return ResourceManager.GetString("BitcoinPayoutAddress_Changed_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have funds waiting for payout at [OrganizationName], but you have not set a Bitcoin Cash payout address.
        ///
        ///Please log on to [InstallationName] at [ExternalUrl] and follow the link to set your payout address - you will find it in the list of to-do items..
        /// </summary>
        public static string BitcoinPayoutAddress_PleaseSet_Body {
            get {
                return ResourceManager.GetString("BitcoinPayoutAddress_PleaseSet_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Please set your Bitcoin Cash payout address.
        /// </summary>
        public static string BitcoinPayoutAddress_PleaseSet_Subject {
            get {
                return ResourceManager.GetString("BitcoinPayoutAddress_PleaseSet_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have set a Bitcoin Cash payout address: [BitcoinAddress]. As a security precaution, all payouts are quarantined for the next 48 hours, and will proceed to be paid out to the new address after that.
        ///
        ///If you did not set this payout address (it may be worth double checking the address above for added security), contact [OrganizationName] immediately..
        /// </summary>
        public static string BitcoinPayoutAddress_Set_Body {
            get {
                return ResourceManager.GetString("BitcoinPayoutAddress_Set_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Bitcoin Cash payout address was set by [ConcernedPersonName]. Payouts will begin after 48 hours when the quarantine period has elapsed..
        /// </summary>
        public static string BitcoinPayoutAddress_Set_OfficerNotify_Body {
            get {
                return ResourceManager.GetString("BitcoinPayoutAddress_Set_OfficerNotify_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] [ConcernedPersonName] has set a Bitcoin Cash payout address.
        /// </summary>
        public static string BitcoinPayoutAddress_Set_OfficerNotify_Subject {
            get {
                return ResourceManager.GetString("BitcoinPayoutAddress_Set_OfficerNotify_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Bitcoin Cash payout address set.
        /// </summary>
        public static string BitcoinPayoutAddress_Set_Subject {
            get {
                return ResourceManager.GetString("BitcoinPayoutAddress_Set_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your previously approved cash advance with [OrganizationName] for [CurrencyCode] [BudgetAmountFloat], concerning [RequestPurpose], has had its approval RETRACTED by the budget owner. This cash advance is no longer approved. This usually indicates some sort of problem with your request.
        ///
        ///Expect more communication from the budget owner to follow on the matter..
        /// </summary>
        public static string CashAdvance_ApprovalRetracted_Body {
            get {
                return ResourceManager.GetString("CashAdvance_ApprovalRetracted_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Approval for Cash Advance RETRACTED: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string CashAdvance_ApprovalRetracted_Subject {
            get {
                return ResourceManager.GetString("CashAdvance_ApprovalRetracted_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your requested cash advance with [OrganizationName] for [CurrencyCode] [BudgetAmountFloat], concerning [RequestPurpose], has been approved by the budget owner. It will now proceed to payout to you..
        /// </summary>
        public static string CashAdvance_Approved_Body {
            get {
                return ResourceManager.GetString("CashAdvance_Approved_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Cash Advance Approved: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string CashAdvance_Approved_Subject {
            get {
                return ResourceManager.GetString("CashAdvance_Approved_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your cash advance with [OrganizationName] for [CurrencyCode] [BudgetAmountFloat] concerning [RequestPurpose] has been denied. The text below was given as reason for denying it:
        ///
        ///[EmbeddedPreformattedText]
        ///.
        /// </summary>
        public static string CashAdvance_Denied_Body {
            get {
                return ResourceManager.GetString("CashAdvance_Denied_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Cash Advance DENIED: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string CashAdvance_Denied_Subject {
            get {
                return ResourceManager.GetString("CashAdvance_Denied_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your request for a cash advance with [OrganizationName] for [CurrencyCode] [BudgetAmountFloat], concerning [RequestPurpose], has been marked as paid out by the organization&apos;s accountants.
        ///
        ///This means you should see the amount on your account shortly..
        /// </summary>
        public static string CashAdvance_PaidOut_Body {
            get {
                return ResourceManager.GetString("CashAdvance_PaidOut_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Cash Advance Paid: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string CashAdvance_PaidOut_Subject {
            get {
                return ResourceManager.GetString("CashAdvance_PaidOut_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [ConcernedPersonName] has requested a cash advance of [CurrencyCode] [BudgetAmountFloat] for the purpose of [RequestPurpose]. This money is part of your budget, [BudgetName].
        ///
        ///Please log on to [InstallationName] at [ExternalUrl]Financial/ApproveCosts to attest or deny..
        /// </summary>
        public static string CashAdvance_Requested_Body {
            get {
                return ResourceManager.GetString("CashAdvance_Requested_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName] - ACTION ITEM] Cash Advance Requested: [CurrencyCode] [BudgetAmountFloat] - Approval Needed.
        /// </summary>
        public static string CashAdvance_Requested_Subject {
            get {
                return ResourceManager.GetString("CashAdvance_Requested_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your previously approved expense claim with [OrganizationName] for [CurrencyCode] [BudgetAmountFloat], concerning [RequestPurpose], has had its approval RETRACTED by the budget owner. This expense claim is no longer approved. This usually indicates some sort of problem with your expense claim.
        ///
        ///Expect more communication from the budget owner to follow on the matter..
        /// </summary>
        public static string ExpenseClaim_ApprovalRetracted_Body {
            get {
                return ResourceManager.GetString("ExpenseClaim_ApprovalRetracted_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Approval RETRACTED for Expense Claim: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string ExpenseClaim_ApprovalRetracted_Subject {
            get {
                return ResourceManager.GetString("ExpenseClaim_ApprovalRetracted_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your expense claim with [OrganizationName] for [CurrencyCode] [BudgetAmountFloat], concerning [RequestPurpose], has been approved by the budget owner. It will be paid out to you when the receipts are confirmed valid..
        /// </summary>
        public static string ExpenseClaim_Approved_Body {
            get {
                return ResourceManager.GetString("ExpenseClaim_Approved_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Expense Claim Approved: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string ExpenseClaim_Approved_Subject {
            get {
                return ResourceManager.GetString("ExpenseClaim_Approved_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [ConcernedPersonName] has created an expense claim against the budget of [BudgetName] for the amount of [CurrencyCode] [BudgetAmountFloat]. The claim concerns [RequestPurpose]. You will need to attest this expense claim.
        ///
        ///Please log on to [InstallationName] at [ExternalUrl]Financial/ApproveCosts to attest or deny..
        /// </summary>
        public static string ExpenseClaim_Created_Body {
            get {
                return ResourceManager.GetString("ExpenseClaim_Created_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName] - ACTION ITEM] Expense Claim Created: [CurrencyCode] [BudgetAmountFloat] - Approval Needed.
        /// </summary>
        public static string ExpenseClaim_Created_Subject {
            get {
                return ResourceManager.GetString("ExpenseClaim_Created_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your expense claim with [OrganizationName] for [CurrencyCode] [BudgetAmountFloat] concerning [RequestPurpose] has been denied. The text below was given as reason for denying it:
        ///
        ///[EmbeddedPreformattedText]
        ///.
        /// </summary>
        public static string ExpenseClaim_Denied_Body {
            get {
                return ResourceManager.GetString("ExpenseClaim_Denied_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Expense Claim DENIED: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string ExpenseClaim_Denied_Subject {
            get {
                return ResourceManager.GetString("ExpenseClaim_Denied_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your expense claim with [OrganizationName] for [CurrencyCode] [BudgetAmountFloat], concerning [RequestPurpose], has been marked as paid out by the organization&apos;s accountants.
        ///
        ///This means you should see the amount on your account shortly..
        /// </summary>
        public static string ExpenseClaim_PaidOut_Body {
            get {
                return ResourceManager.GetString("ExpenseClaim_PaidOut_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Expense Claim Paid: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string ExpenseClaim_PaidOut_Subject {
            get {
                return ResourceManager.GetString("ExpenseClaim_PaidOut_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receipts for your expense claim with [OrganizationName] for [CurrencyCode] [BudgetAmountFloat], concerning [RequestPurpose], have been validated by people responsible for keeping the records in order.
        ///
        ///The claim will be paid out to you when the amount has also been attested by the budget owner..
        /// </summary>
        public static string ExpenseClaim_Validated_Body {
            get {
                return ResourceManager.GetString("ExpenseClaim_Validated_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Expense Claim Receipts Validated: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string ExpenseClaim_Validated_Subject {
            get {
                return ResourceManager.GetString("ExpenseClaim_Validated_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The validation of receipts for your expense claim with [OrganizationName] for [CurrencyCode] [BudgetAmountFloat], concerning [RequestPurpose], has been RETRACTED by the financial record keepers of the organization. The receipts are no longer considered valid. This usually indicates some sort of problem with the documentation of your expense claim.
        ///
        ///Expect more communication to follow on the matter. If you don&apos;t hear from record keepers in short time on this matter, do follow up with them..
        /// </summary>
        public static string ExpenseClaim_ValidationRetracted_Body {
            get {
                return ResourceManager.GetString("ExpenseClaim_ValidationRetracted_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Validation RETRACTED for Expense Claim Receipts: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string ExpenseClaim_ValidationRetracted_Subject {
            get {
                return ResourceManager.GetString("ExpenseClaim_ValidationRetracted_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invoice from [Supplier], concerning [Description], has been filed against your budget of [BudgetName] for the amount of [CurrencyCode] [BudgetAmountFloat]. You must approve this invoice before it proceeds to payout.
        ///
        ///Please log on to [InstallationName] at [ExternalUrl]Financial/ApproveCosts to attest or deny..
        /// </summary>
        public static string InboundInvoice_Created_Body {
            get {
                return ResourceManager.GetString("InboundInvoice_Created_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName] - ACTION ITEM] Invoice Filed: [CurrencyCode] [BudgetAmountFloat] - Approval Needed.
        /// </summary>
        public static string InboundInvoice_Created_Subject {
            get {
                return ResourceManager.GetString("InboundInvoice_Created_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new [Regular] was manually added to [OrganizationName] within an area of yours..
        /// </summary>
        public static string Membership_New_Added_Body {
            get {
                return ResourceManager.GetString("Membership_New_Added_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] New [Regular]: [PersonName], [PersonGeography] [CountryCode] (manual).
        /// </summary>
        public static string Membership_New_Added_Subject {
            get {
                return ResourceManager.GetString("Membership_New_Added_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new [Regular] has signed up for [OrganizationName] within an area of yours..
        /// </summary>
        public static string Membership_New_Selfsignup_Body {
            get {
                return ResourceManager.GetString("Membership_New_Selfsignup_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] New [Regular]: [PersonName], [PersonGeography] [CountryCode].
        /// </summary>
        public static string Membership_New_Selfsignup_Subject {
            get {
                return ResourceManager.GetString("Membership_New_Selfsignup_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] [Regularship] renewed: [PersonName], [PersonGeography] [CountryCode] (manual).
        /// </summary>
        public static string Membership_Renewed_Manual_Subject {
            get {
                return ResourceManager.GetString("Membership_Renewed_Manual_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --
        ///This mail was sent to [Addressee] from [OrganizationName]. If you do not desire to receive these notifications in the future, please log on to [InstallationName] at [ExternalUrl] and modify your notification settings..
        /// </summary>
        public static string NotificationFooter_Generic {
            get {
                return ResourceManager.GetString("NotificationFooter_Generic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your message has been queued for delivery and the recipients have been resolved. Your mail will be sent to, or be attempted to sent to, [RecipientCount] people in [GeographyName] in [OrganizationName]..
        /// </summary>
        public static string OutboundComm_Resolved_Body {
            get {
                return ResourceManager.GetString("OutboundComm_Resolved_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Comm recipients determined for [GeographyName]: [RecipientCount].
        /// </summary>
        public static string OutboundComm_Resolved_Subject {
            get {
                return ResourceManager.GetString("OutboundComm_Resolved_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your message to [GeographyName] has been sent to all scheduled recipients. Out of the [RecipientCount] planned recipients, [RecipientsSuccess] succeeded as far as we can tell -- remember that mail can be undelivered or unread later for a number of reasons.
        ///
        ///Time spent resolving: [ResolvingTime].
        ///Time spent transmitting: [TransmissionTime].
        ///Total time from comm creation to completion: [TotalTime]..
        /// </summary>
        public static string OutboundComm_Sent_Body {
            get {
                return ResourceManager.GetString("OutboundComm_Sent_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Comms transmitted: [GeographyName].
        /// </summary>
        public static string OutboundComm_Sent_Subject {
            get {
                return ResourceManager.GetString("OutboundComm_Sent_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new person has signed up as [RegularTitle] in [OrganizationName]! [ConcernedPersonName] is based in [GeographyName], [CountryCode]..
        /// </summary>
        public static string Participant_Signup_Body {
            get {
                return ResourceManager.GetString("Participant_Signup_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] New [RegularTitle]: [ConcernedPersonName], [GeographyName].
        /// </summary>
        public static string Participant_Signup_Subject {
            get {
                return ResourceManager.GetString("Participant_Signup_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Somebody, most likely you, requested a reset of the password associated with this mail address at [InstallationName]. However, two-factor authentication has been enabled for this account for heightened security. Therefore, the password CANNOT be reset by simple means.
        ///
        ///Please contact a personnel administrator at [InstallationName] to resolve your problem and issue a new password following a more rigorous identification procedure matching the two-factor security level.
        ///
        ///Thank you for your understanding..
        /// </summary>
        public static string Password_CannotReset2FA_Body {
            get {
                return ResourceManager.GetString("Password_CannotReset2FA_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[InstallationName]] Cannot Reset Password.
        /// </summary>
        public static string Password_CannotReset2FA_Subject {
            get {
                return ResourceManager.GetString("Password_CannotReset2FA_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your [InstallationName] password was just changed at [ExternalUrl].
        ///
        ///If you did not just perform this password change, there has been a security breach. If this is the case, please lock your account down IMMEDIATELY by clicking the following link:
        ///
        ///[ExternalUrl]Security/AccountLockdown?Mail=[MailAddress]&amp;Ticket=[TicketCode]
        ///
        ///If you confirm a lockdown on the link above, any existing sessions will terminate immediately, logons with the newly-set password will be locked out, and administrators will conta [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Password_Changed_Body {
            get {
                return ResourceManager.GetString("Password_Changed_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[InstallationName]] Password Changed.
        /// </summary>
        public static string Password_Changed_Subject {
            get {
                return ResourceManager.GetString("Password_Changed_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to People at [OrganizationName] have issued a password reset ticket to your account, presumably at your request. This ticket is valid for the next 24 hours.
        ///
        ///Please follow this link to reset your password and re-enable any two-factor authentication, if it was previously enabled:
        ///
        ///[ExternalUrl]Security/ResetPassword?Ticket=[TicketCode]
        ///
        ///This ticket will expire in 24 hours. If you do not reset your password in this time frame, you will need to contact the administrators at [OrganizationName] to issue a new [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Password_ResetByCrew_Body {
            get {
                return ResourceManager.GetString("Password_ResetByCrew_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Password Reset Ticket.
        /// </summary>
        public static string Password_ResetByCrew_Subject {
            get {
                return ResourceManager.GetString("Password_ResetByCrew_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Somebody, most likely you, requested a reset of the password associated with this email address at [InstallationName]. If this was you, please follow the link below in the next 60 minutes to complete the password reset procedure:
        ///
        ///[ExternalUrl]Security/ResetPassword?Ticket=[TicketCode]
        ///
        ///If you did NOT request a password reset, you can (and should) ignore this mail. The password reset request will expire in one hour. (If you are getting a large number of these password reset links that you did not reques [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Password_ResetOnRequest_Body {
            get {
                return ResourceManager.GetString("Password_ResetOnRequest_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[InstallationName]] Password Reset Ticket.
        /// </summary>
        public static string Password_ResetOnRequest_Subject {
            get {
                return ResourceManager.GetString("Password_ResetOnRequest_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receipts have been filed that need validation for their financial processes to continue.
        ///
        ///Please log on to [InstallationName] at [ExternalUrl]Financial/ValidateReceipts to validate or reject them..
        /// </summary>
        public static string Receipts_Filed_Body {
            get {
                return ResourceManager.GetString("Receipts_Filed_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName] - ACTION ITEM] Receipts Filed - Validation Needed.
        /// </summary>
        public static string Receipts_Filed_Subject {
            get {
                return ResourceManager.GetString("Receipts_Filed_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your salary payout for [RequestPurpose] was cancelled. It will not be paid out.
        ///
        ///If this comes as a surprise to you, please contact the organization and/or your supervisor urgently. The following was given as reason:
        ///
        ///[EmbeddedPreformattedText].
        /// </summary>
        public static string Salary_Denied_Body {
            get {
                return ResourceManager.GetString("Salary_Denied_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Salary payout denied: [CurrencyCode] [BudgetAmountFloat].
        /// </summary>
        public static string Salary_Denied_Subject {
            get {
                return ResourceManager.GetString("Salary_Denied_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is your summary salary statement for [LastYear]. It is not a statement of a new salary, but a statement of the monthly salaries paid to you over the course of the last year as well as any taxes deducted. The purpose of this statement is to serve as data for your records and/or for tax declaration purposes for last year.
        ///
        ///Gross salary for [LastYear]:  [CurrencyCode]  [GrossSalaryTotal]
        ///Tax deducted therefrom: [CurrencyCode] [TaxDeductedTotal]	
        ///Net salary paid out:    [CurrencyCode]  [NetSalaryTotal] [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Salary_LastYearSummary_Body {
            get {
                return ResourceManager.GetString("Salary_LastYearSummary_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[OrganizationName]] Salary summary statement for [LastYear].
        /// </summary>
        public static string Salary_LastYearSummary_Subject {
            get {
                return ResourceManager.GetString("Salary_LastYearSummary_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops Backend [SwarmopsVersion] on host [HostName] has successfully upgraded the Swarmops database schema to revision [DbVersion].
        ///
        ///This is for information only. You do not need to take action..
        /// </summary>
        public static string System_DatabaseSchemaUpgraded_Body {
            get {
                return ResourceManager.GetString("System_DatabaseSchemaUpgraded_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops database upgraded.
        /// </summary>
        public static string System_DatabaseSchemaUpgraded_Subject {
            get {
                return ResourceManager.GetString("System_DatabaseSchemaUpgraded_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops Backend [SwarmopsVersion] on Host [Hostname] has FAILED in upgrading the Swarmops database. This is usually due to a transient external network error, causing the patch file retrieval to fail.
        ///
        ///We are currently at database schema revision [DbVersion], but are trying to upgrade to [DbVersionExpected].
        ///
        ///The upgrade will be retried every hour. Some functionality may be disabled until the database has been upgraded. If you want to troubleshoot manually, the database upgrade packages are retrieved f [rest of string was truncated]&quot;;.
        /// </summary>
        public static string System_DatabaseUpgradeFailed_Body {
            get {
                return ResourceManager.GetString("System_DatabaseUpgradeFailed_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops database upgrade FAILED.
        /// </summary>
        public static string System_DatabaseUpgradeFailed_Subject {
            get {
                return ResourceManager.GetString("System_DatabaseUpgradeFailed_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unhandled exception was thrown in Swarmops:
        ///
        ///[EmbeddedPreformattedText].
        /// </summary>
        public static string System_Exception_Body {
            get {
                return ResourceManager.GetString("System_Exception_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops EXCEPTION!.
        /// </summary>
        public static string System_Exception_Subject {
            get {
                return ResourceManager.GetString("System_Exception_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a test mail sent by Swarmops [SwarmopsVersion] running on [HostName]. You just changed the mail server settings. To verify that the new settings are correct, Swarmops dispatches this test message to be sent from the back end..
        /// </summary>
        public static string System_MailServerTest_Body {
            get {
                return ResourceManager.GetString("System_MailServerTest_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops Mail Server Test.
        /// </summary>
        public static string System_MailServerTest_Subject {
            get {
                return ResourceManager.GetString("System_MailServerTest_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bitcoin public root key in the MySql database was not a match for the bitcoin private root key stored in /etc/swarmops on [HostName]. This is a potentially serious condition, and should never ever happen, so the public root key was rederived from the private key and re-written to the database over what was there before..
        /// </summary>
        public static string System_PublicRootReset_Body {
            get {
                return ResourceManager.GetString("System_PublicRootReset_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops: Hotwallet public root key reset.
        /// </summary>
        public static string System_PublicRootReset_Subject {
            get {
                return ResourceManager.GetString("System_PublicRootReset_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops Backend version [SwarmopsVersion] on host [HostName] has successfully started and connected to database and notification frameworks..
        /// </summary>
        public static string System_Startup_Backend_Body {
            get {
                return ResourceManager.GetString("System_Startup_Backend_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops Backend operational.
        /// </summary>
        public static string System_Startup_Backend_Subject {
            get {
                return ResourceManager.GetString("System_Startup_Backend_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops Frontend socket server version [SwarmopsVersion] on host [HostName] has successfully started and connected to database and notification frameworks..
        /// </summary>
        public static string System_Startup_Frontend_Body {
            get {
                return ResourceManager.GetString("System_Startup_Frontend_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops Frontend operational.
        /// </summary>
        public static string System_Startup_Frontend_Subject {
            get {
                return ResourceManager.GetString("System_Startup_Frontend_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Swarmops transmission engine on [HostName] has encountered an unknown payload type ([UnrecognizedPayloadType]). This should only happen at very rare occasions in conjunction with upgrades where an upgraded version has to take care of something that changed names in the process, itself a rare phenomenon.
        ///
        ///If this error is recurring, you may have a badly installed plugin or something similar. In any case, the unrecognized message has been discarded and won&apos;t be transmitted, since Swarmops doesn&apos;t know h [rest of string was truncated]&quot;;.
        /// </summary>
        public static string System_UnrecognizedPayload_Body {
            get {
                return ResourceManager.GetString("System_UnrecognizedPayload_Body", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops: Unrecognized comms payload.
        /// </summary>
        public static string System_UnrecognizedPayload_Subject {
            get {
                return ResourceManager.GetString("System_UnrecognizedPayload_Subject", resourceCulture);
            }
        }
    }
}
