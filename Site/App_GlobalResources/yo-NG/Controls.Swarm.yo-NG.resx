<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Positions_AssignAnotherPerson" xml:space="preserve">
    <value>Yan eniyan miran...</value>
    <comment>To an existing position that accepts multiple people (like "assistants")</comment>
  </data>
  <data name="Positions_AssignFifthPerson" xml:space="preserve">
    <value>Yan eniyan karun...</value>
  </data>
  <data name="Positions_AssignFirstPerson" xml:space="preserve">
    <value>Yan...</value>
  </data>
  <data name="Positions_AssignFourthPerson" xml:space="preserve">
    <value>Yan eniyan kerin...</value>
  </data>
  <data name="Positions_AssignmentDuration" xml:space="preserve">
    <value>Iye akoko ise (o se fagun)</value>
  </data>
  <data name="Positions_AssignmentExpires" xml:space="preserve">
    <value>Pari ni</value>
    <comment>The date a position assignment autoterminates</comment>
  </data>
  <data name="Positions_AssignPersonToPosition" xml:space="preserve">
    <value>Yan eniyan yi si ipo</value>
  </data>
  <data name="Positions_AssignSecondPerson" xml:space="preserve">
    <value>Yan eniyan keji...</value>
  </data>
  <data name="Positions_AssignSixthPerson" xml:space="preserve">
    <value>Yan eniyan kefa...</value>
    <comment>ok, this is not strictly necessary, just a bell &amp; whistle</comment>
  </data>
  <data name="Positions_AssignThirdPerson" xml:space="preserve">
    <value>Yan eniyan keta...</value>
  </data>
  <data name="Positions_ButtonAssign" xml:space="preserve">
    <value>Yan</value>
    <comment>Kind of "hire" but also for volunteers</comment>
  </data>
  <data name="Positions_ModalHeader" xml:space="preserve">
    <value>Yan eniyan bi &lt;span id='{0}_modalPositionName'&gt;...&lt;/span&gt; &lt;span id='{0}_modalGeographyName'&gt; &lt;/span&gt;</value>
    <comment>Header for new assignment dialog</comment>
  </data>
  <data name="Positions_NoMorePeopleOnPosition" xml:space="preserve">
    <value>Kuna: Ko le yan awon eniyan si ipo yii mo.</value>
  </data>
  <data name="Positions_PleaseSelectPerson" xml:space="preserve">
    <value>Jowo mu eniyan kan lati yan.</value>
  </data>
  <data name="Positions_Vacant" xml:space="preserve">
    <value>(ipo ti ṣofo)</value>
    <comment>For unassigned positions</comment>
  </data>
  <data name="Positions_ConfirmSelfTerminate" xml:space="preserve">
    <value>&lt;strong&gt;FI IPO RE SILE?&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;Eyi jẹ &lt;strong&gt;iṣẹ&lt;/strong&gt; rẹ. Fifopinsi iṣẹ ti ara rẹ jẹ deede sisọpe "MO JAWO". Siṣe bẹ yoo ni ipa lẹsẹkẹsẹ. Ṣe eyi ni ohun ti o fẹ lati ṣe?&lt;br/&gt;&lt;br/&gt;</value>
  </data>
  <data name="Positions_ConfirmTerminate" xml:space="preserve">
    <value>&lt;strong&gt;FOPINSI ISE?&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;Ṣe o fẹ lati fopinsi &lt;span id="spanTerminatePersonName"&gt;[PERSONNAME]&lt;/span&gt; kuro nibi iṣẹ bi &lt;span id="spanTerminatePositionName"&gt;[POSITIONNAME]&lt;/span&gt;? Eyi jẹ deede ti gbigbasẹ lọwọ ẹnikan ati pe o nilo lati wa ni ibamu pẹlu awọn ilana ti abẹle ati ofin ibilẹ.&lt;br/&gt;&lt;br/&gt;</value>
    <comment>{0} is the person name, {1} is the position title.</comment>
  </data>
  <data name="Positions_TerminateNo" xml:space="preserve">
    <value>Maa ṣe Fopinsi</value>
  </data>
  <data name="Positions_TerminateSelfNo" xml:space="preserve">
    <value>Oops! Rara, pada!</value>
  </data>
  <data name="Positions_TerminateSelfYes" xml:space="preserve">
    <value>Bẹẹni, Mo Fiposilẹ</value>
  </data>
  <data name="Positions_TerminateYes" xml:space="preserve">
    <value>Fopinsi Ise</value>
  </data>
  <data name="Positions_AssignElsewhere" xml:space="preserve">
    <value>(yan-an labẹ Ajọ Mi)</value>
  </data>
  <data name="Positions_CreatePosition" xml:space="preserve">
    <value>Ṣẹda ipo tuntun...</value>
  </data>
  <data name="Positions_Subleaders" xml:space="preserve">
    <value>Awọn asiwaju ti awọn atunpin</value>
  </data>
</root>
