<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddPerson_ErrorCity" xml:space="preserve">
    <value>Wymagane jest prawidłowe miasto.</value>
  </data>
  <data name="AddPerson_ErrorDate" xml:space="preserve">
    <value>Podaj poprawną datę lub pozostaw to pole puste.</value>
  </data>
  <data name="AddPerson_ErrorMail" xml:space="preserve">
    <value>Wymagany jest prawidłowy adres e-mail.</value>
  </data>
  <data name="AddPerson_ErrorName" xml:space="preserve">
    <value>Wymagana nazwa.</value>
  </data>
  <data name="AddPerson_ErrorStreet" xml:space="preserve">
    <value>Ważna ulica lub Skrzynka Pocztowa jest wymagana.</value>
  </data>
  <data name="AddPerson_GeographyDetected" xml:space="preserve">
    <value>Geografia wykryta</value>
  </data>
  <data name="AddPerson_Info" xml:space="preserve">
    <value>To tutaj wpisujesz nowych ludzi do organizacji. Po zarejestrowaniu ich jako &lt;strong&gt;{0}{1}&lt;/strong&gt; do &lt;strong&gt;{2}&lt;/strong&gt; otrzymają wiadomość powitalną z losowym hasłem do logowania w poczcie. Lokalni urzędnicy zostaną również powiadomieni o nowej osobie, aby mieć możliwość wysłania im wiadomości powitalnej.</value>
    <comment>{0} and {1} can be "one-year" and "Membership", for example. {2} is LongDateString.</comment>
  </data>
  <data name="AddPerson_LegalGender" xml:space="preserve">
    <value>Płeć Prawna</value>
    <comment>"Legal" to cut short discussions on 50 different genders for the time being</comment>
  </data>
  <data name="AddPerson_PersonSuccessfullyRegistered" xml:space="preserve">
    <value>Osoba została pomyślnie dodana do organizacji. E-mail powitalny został wysłany.</value>
  </data>
  <data name="AddPerson_StatisticalData" xml:space="preserve">
    <value>Dane statystyczne</value>
    <comment>Header for gender, date of birth</comment>
  </data>
  <data name="AddPerson_Street1PO" xml:space="preserve">
    <value>Ulica 1 (lub Skrzynka Pocztowa)</value>
  </data>
  <data name="AddPerson_Street2" xml:space="preserve">
    <value>Ulica 2 - jeśli dotyczy</value>
  </data>
  <data name="AddPerson_Title" xml:space="preserve">
    <value>Dodaj {0}</value>
    <comment>The {0} is replaced in code. Singular form gender neutral of Participant.</comment>
  </data>
  <data name="ListFindPeople_Info" xml:space="preserve">
    <value>Użyj tego, aby znaleźć osoby w organizacji. Możesz wyszukiwać według lokalizacji i według wzorca nazwy ("Jo S" będzie pasować do Joela Sandera).</value>
  </data>
  <data name="ListFindPeople_MatchingPeopleInX" xml:space="preserve">
    <value>Dopasowywanie osób w {0}</value>
    <comment>The {0} parameter is the organization name.</comment>
  </data>
  <data name="ListFindPeople_NamePattern" xml:space="preserve">
    <value>Wzór nazwy</value>
  </data>
  <data name="ListFindPeople_Title" xml:space="preserve">
    <value>Pokaż i Znajdź osoby</value>
  </data>
  <data name="ListFindPeople_TooManyHits" xml:space="preserve">
    <value>Zestaw wyników zawiera ponad tysiąc osób (wyświetlacz ograniczony do tysiąca). Zawęzić zakres wyszukiwania?</value>
  </data>
  <data name="LocalOrganization_Header" xml:space="preserve">
    <value>Lokalna organizacja ({0})</value>
  </data>
  <data name="LocalOrganization_HeaderGlobal" xml:space="preserve">
    <value>Globalna Organizacja</value>
  </data>
  <data name="LocalOrganization_Info" xml:space="preserve">
    <value>To są twoje lokalne kontakty.(Jeśli posiadasz uprawnienia administracyjne, możesz także przypisać osoby do tych pozycji.)</value>
  </data>
  <data name="LocalOrganization_PageTitle" xml:space="preserve">
    <value>Moja Lokalna organizacja</value>
    <comment>The {0} is the geography name.</comment>
  </data>
  <data name="Positions_AssignPerson" xml:space="preserve">
    <value>Przydziel osobę...</value>
  </data>
  <data name="Positions_CreateNewPosition" xml:space="preserve">
    <value>Utwórz nową pozycję...</value>
  </data>
</root>
