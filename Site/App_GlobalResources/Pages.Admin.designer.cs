//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Resources.Pages {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option or rebuild the Visual Studio project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Web.Application.StronglyTypedResourceProxyBuilder", "14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Admin {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Admin() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Pages.Admin", global::System.Reflection.Assembly.Load("Pages.Admin.resources"));
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;strong&gt;DUST COLLECTED&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;The amount sent is smaller than the expected fee for returning it to you, which is {0:N2} microcoins. The money you sent is now so-called &quot;dust&quot; on the bitcoin network, and won&apos;t be moved again.&lt;br/&gt;&lt;br/&gt;Send a higher amount to perform an echo test..
        /// </summary>
        public static string BitcoinEchoTest_DustCollected {
            get {
                return ResourceManager.GetString("BitcoinEchoTest_DustCollected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a QR code for bitcoin echo testing for this entire Swarmops installation, not just for {0}. Read it from your phone&apos;s bitcoin wallet to perform the echo test, or send from your computer directly to [{1}] (that&apos;s a Bitcoin Cash address). The amount (less miner fees of {2:N2} microcoins) will be sent back to you in the next few seconds..
        /// </summary>
        public static string BitcoinEchoTest_Explain {
            get {
                return ResourceManager.GetString("BitcoinEchoTest_Explain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received {2:N2} microcoins ({0} {1:N2}). Returning..
        /// </summary>
        public static string BitcoinEchoTest_FundsReceived {
            get {
                return ResourceManager.GetString("BitcoinEchoTest_FundsReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received {0} microcoins (&quot;bits&quot;). Returning..
        /// </summary>
        public static string BitcoinEchoTest_FundsReceivedNative {
            get {
                return ResourceManager.GetString("BitcoinEchoTest_FundsReceivedNative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a bitcoin echo test. It tests the hotwallet. If you send a small amount here, it will be sent back to you, minus the sendback transaction fee (currently {0:N2} microcoins)..
        /// </summary>
        public static string BitcoinEchoTest_Info {
            get {
                return ResourceManager.GetString("BitcoinEchoTest_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bitcoin Cash Hotwallet Echo Test.
        /// </summary>
        public static string BitcoinEchoTest_PageTitle {
            get {
                return ResourceManager.GetString("BitcoinEchoTest_PageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waiting for transaction....
        /// </summary>
        public static string BitcoinEchoTest_StatusInitial {
            get {
                return ResourceManager.GetString("BitcoinEchoTest_StatusInitial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transaction detected, verifying....
        /// </summary>
        public static string BitcoinEchoTest_TransactionDetected {
            get {
                return ResourceManager.GetString("BitcoinEchoTest_TransactionDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops Bitcoin Echo Test.
        /// </summary>
        public static string BitcoinEchoTest_TxLabel {
            get {
                return ResourceManager.GetString("BitcoinEchoTest_TxLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Impersonation Active.
        /// </summary>
        public static string CommenceImpersonation_Active_Header {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Active_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have an active impersonation session as {0}. &lt;a href=&quot;javascript:terminateImpersonation();&quot;&gt;End impersonation.&lt;/a&gt;.
        /// </summary>
        public static string CommenceImpersonation_Active_Text {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Active_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;strong&gt;IMPERSONATE PERSON?&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;This is not to be taken lightly, and if you&apos;re not doing this for technical reasons, it may even be illegal depending on local laws.&lt;br/&gt;&lt;br/&gt;The purpose of this tool is to fix technical malfunctions. Everything is logged.&lt;br/&gt;&lt;br/&gt;Proceed?.
        /// </summary>
        public static string CommenceImpersonation_Confirm {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;strong&gt;IMPERSONATION TERMINATED&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;Impersonation terminated at {0:HH:mm} UTC. You are acting as yourself again..
        /// </summary>
        public static string CommenceImpersonation_Ended {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Ended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;strong&gt;IMPERSONATION DENIED&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;You may not impersonate somebody who is your direct manager..
        /// </summary>
        public static string CommenceImpersonation_Error_Authority_Report {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Error_Authority_Report", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;strong&gt;IMPERSONATION DENIED&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;You may not impersonate somebody else with system level access..
        /// </summary>
        public static string CommenceImpersonation_Error_Authority_System {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Error_Authority_System", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to select a person to impersonate..
        /// </summary>
        public static string CommenceImpersonation_Error_SelectPerson {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Error_SelectPerson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you need to impersonate yourself, we suggest you log off Swarmops and seek other kind of assistance..
        /// </summary>
        public static string CommenceImpersonation_Error_Self {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Error_Self", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;strong&gt;IMPERSONATION DENIED&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;You do not seem to have sufficient privileges to impersonate somebody else..
        /// </summary>
        public static string CommenceImpersonation_Failed {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Impersonate another user.
        /// </summary>
        public static string CommenceImpersonation_Header {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Impersonate.
        /// </summary>
        public static string CommenceImpersonation_Impersonate {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Impersonate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Person to impersonate.
        /// </summary>
        public static string CommenceImpersonation_Person {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Person", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;strong&gt;IMPERSONATION ACTIVE&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;Impersonation started at {0:HH:mm} UTC. This is the Dashboard as the impersonated person sees it. .
        /// </summary>
        public static string CommenceImpersonation_Success {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;This debugging tool allows you to impersonate another user to see and experience Swarmops as they do when logged in.&lt;/p&gt;
        ///&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This is a highly intrusive tool that should only be used for technical development and for requested support. Using this should not be taken lightly.&lt;/p&gt;
        ///&lt;p&gt;All impersonations are permanently logged, all and any actions taken while impersonated are traceable as such, and the impersonated user will be informed of the intrusion.&lt;/p&gt;.
        /// </summary>
        public static string CommenceImpersonation_Warning {
            get {
                return ResourceManager.GetString("CommenceImpersonation_Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activists will be called.
        /// </summary>
        public static string CreateOrganization_ActivistTitle {
            get {
                return ResourceManager.GetString("CreateOrganization_ActivistTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (not applicable).
        /// </summary>
        public static string CreateOrganization_Applicants_None {
            get {
                return ResourceManager.GetString("CreateOrganization_Applicants_None", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not-yet-members are called.
        /// </summary>
        public static string CreateOrganization_ApplicantTitle {
            get {
                return ResourceManager.GetString("CreateOrganization_ApplicantTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Root-level organization.
        /// </summary>
        public static string CreateOrganization_AsRoot {
            get {
                return ResourceManager.GetString("CreateOrganization_AsRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Child of {0}.
        /// </summary>
        public static string CreateOrganization_ChildOfX {
            get {
                return ResourceManager.GetString("CreateOrganization_ChildOfX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create new organization as....
        /// </summary>
        public static string CreateOrganization_CreateNewOrgAs {
            get {
                return ResourceManager.GetString("CreateOrganization_CreateNewOrgAs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Organization name cannot be empty. (You need to give the new organization a name!).
        /// </summary>
        public static string CreateOrganization_Error_OrganizationNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("CreateOrganization_Error_OrganizationNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can create a new organization either as a new standalone organization, or as a child organization of the current one. (Everybody with responsibilities in a parent organization automatically has corresponding rights and privileges in all its children.).
        /// </summary>
        public static string CreateOrganization_Info {
            get {
                return ResourceManager.GetString("CreateOrganization_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Organization Name.
        /// </summary>
        public static string CreateOrganization_NewOrganizationName {
            get {
                return ResourceManager.GetString("CreateOrganization_NewOrganizationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operating currency.
        /// </summary>
        public static string CreateOrganization_NewOrgCurrency {
            get {
                return ResourceManager.GetString("CreateOrganization_NewOrgCurrency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The new organization&apos;s name.
        /// </summary>
        public static string CreateOrganization_NewOrgName {
            get {
                return ResourceManager.GetString("CreateOrganization_NewOrgName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create New Organization.
        /// </summary>
        public static string CreateOrganization_PageTitle {
            get {
                return ResourceManager.GetString("CreateOrganization_PageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regular people will be called.
        /// </summary>
        public static string CreateOrganization_RegularTitle {
            get {
                return ResourceManager.GetString("CreateOrganization_RegularTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The new organization has been created. You have been given an non-expiring {0} in the organization, and been placed as its highest executive for the time being, so you can work with it and set it up properly. To configure the new organization, use this control panel (available later under Admin / Organization Settings)..
        /// </summary>
        public static string CreateOrganization_Success {
            get {
                return ResourceManager.GetString("CreateOrganization_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default position titles at start.
        /// </summary>
        public static string CreateOrganization_Titles {
            get {
                return ResourceManager.GetString("CreateOrganization_Titles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commercial.
        /// </summary>
        public static string CreateOrganization_Titles_Commercial {
            get {
                return ResourceManager.GetString("CreateOrganization_Titles_Commercial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Government.
        /// </summary>
        public static string CreateOrganization_Titles_Government {
            get {
                return ResourceManager.GetString("CreateOrganization_Titles_Government", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nonprofit.
        /// </summary>
        public static string CreateOrganization_Titles_Nonprofit {
            get {
                return ResourceManager.GetString("CreateOrganization_Titles_Nonprofit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;strong&gt;WORK IN PROGRESS.&lt;/strong&gt; Most of these options don&apos;t save yet..
        /// </summary>
        public static string EditOrganization_Info {
            get {
                return ResourceManager.GetString("EditOrganization_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} numbering.
        /// </summary>
        public static string EditOrganization_MemberNumberStyle {
            get {
                return ResourceManager.GetString("EditOrganization_MemberNumberStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open Ledgers Domain.
        /// </summary>
        public static string EditOrganization_OpenLedgersDomain {
            get {
                return ResourceManager.GetString("EditOrganization_OpenLedgersDomain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit Organization.
        /// </summary>
        public static string EditOrganization_PageTitle {
            get {
                return ResourceManager.GetString("EditOrganization_PageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to People become {0} of.
        /// </summary>
        public static string EditOrganization_ParticipationBeginsOrg {
            get {
                return ResourceManager.GetString("EditOrganization_ParticipationBeginsOrg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to People become {0} when.
        /// </summary>
        public static string EditOrganization_ParticipationBeginsWhen {
            get {
                return ResourceManager.GetString("EditOrganization_ParticipationBeginsWhen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} ends when.
        /// </summary>
        public static string EditOrganization_ParticipationChurn {
            get {
                return ResourceManager.GetString("EditOrganization_ParticipationChurn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initial {0} cost (in {1}).
        /// </summary>
        public static string EditOrganization_ParticipationCost {
            get {
                return ResourceManager.GetString("EditOrganization_ParticipationCost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One {0} lasts.
        /// </summary>
        public static string EditOrganization_ParticipationDuration {
            get {
                return ResourceManager.GetString("EditOrganization_ParticipationDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Renewed period counts from.
        /// </summary>
        public static string EditOrganization_RenewalDateEffect {
            get {
                return ResourceManager.GetString("EditOrganization_RenewalDateEffect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remind to renew.
        /// </summary>
        public static string EditOrganization_RenewalReminders {
            get {
                return ResourceManager.GetString("EditOrganization_RenewalReminders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Renewals affect.
        /// </summary>
        public static string EditOrganization_RenewalsAffect {
            get {
                return ResourceManager.GetString("EditOrganization_RenewalsAffect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Renewal cost (in {0}).
        /// </summary>
        public static string EditOrganization_RenewalsCost {
            get {
                return ResourceManager.GetString("EditOrganization_RenewalsCost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Organization Vanity Domain.
        /// </summary>
        public static string EditOrganization_VanityDomain {
            get {
                return ResourceManager.GetString("EditOrganization_VanityDomain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executive Positions For {0}.
        /// </summary>
        public static string OrgStaffing_Header_ExecutivePositions {
            get {
                return ResourceManager.GetString("OrgStaffing_Header_ExecutivePositions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local Positions (At Every Geography).
        /// </summary>
        public static string OrgStaffing_Header_LocalDefaultPositions {
            get {
                return ResourceManager.GetString("OrgStaffing_Header_LocalDefaultPositions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Staff Payroll.
        /// </summary>
        public static string OrgStaffing_Header_Payroll {
            get {
                return ResourceManager.GetString("OrgStaffing_Header_Payroll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strategic Positions For {0}.
        /// </summary>
        public static string OrgStaffing_Header_StrategicPositions {
            get {
                return ResourceManager.GetString("OrgStaffing_Header_StrategicPositions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Volunteers Awaiting Response.
        /// </summary>
        public static string OrgStaffing_Header_WaitingVolunteers {
            get {
                return ResourceManager.GetString("OrgStaffing_Header_WaitingVolunteers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the staffing structure for this organization, as well as its staffing at the strategic (board) and executive (C-level or equivalent) levels. You can also manage waiting volunteers and the payroll from here..
        /// </summary>
        public static string OrgStaffing_Info {
            get {
                return ResourceManager.GetString("OrgStaffing_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Organization Staffing.
        /// </summary>
        public static string OrgStaffing_PageTitle {
            get {
                return ResourceManager.GetString("OrgStaffing_PageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Admin Notifications From Address.
        /// </summary>
        public static string SystemSettings_AdminAddress {
            get {
                return ResourceManager.GetString("SystemSettings_AdminAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Admin Notifications From Name.
        /// </summary>
        public static string SystemSettings_AdminSender {
            get {
                return ResourceManager.GetString("SystemSettings_AdminSender", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backend Hostname Override.
        /// </summary>
        public static string SystemSettings_BackendHostnameOverride {
            get {
                return ResourceManager.GetString("SystemSettings_BackendHostnameOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SMTP Port must be numeric. Unable to parse host:port..
        /// </summary>
        public static string SystemSettings_Error_SmtpHostPort {
            get {
                return ResourceManager.GetString("SystemSettings_Error_SmtpHostPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to parse user, pass, host, and/or port. (Only host is required.).
        /// </summary>
        public static string SystemSettings_Error_SmtpSyntax {
            get {
                return ResourceManager.GetString("SystemSettings_Error_SmtpSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Externally Accessible URL.
        /// </summary>
        public static string SystemSettings_ExternalUrl {
            get {
                return ResourceManager.GetString("SystemSettings_ExternalUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Correspondence Transmission Settings.
        /// </summary>
        public static string SystemSettings_Header_CorrespondenceTxSettings {
            get {
                return ResourceManager.GetString("SystemSettings_Header_CorrespondenceTxSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System Administrators.
        /// </summary>
        public static string SystemSettings_Header_SystemAdministrators {
            get {
                return ResourceManager.GetString("SystemSettings_Header_SystemAdministrators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Various technical settings for this Swarmops installation. Not specific to any organization or person, but installation-wide..
        /// </summary>
        public static string SystemSettings_Info {
            get {
                return ResourceManager.GetString("SystemSettings_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation Name.
        /// </summary>
        public static string SystemSettings_InstallationName {
            get {
                return ResourceManager.GetString("SystemSettings_InstallationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System Settings.
        /// </summary>
        public static string SystemSettings_PageTitle {
            get {
                return ResourceManager.GetString("SystemSettings_PageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SMTP Server (user:pass@host:port).
        /// </summary>
        public static string SystemSettings_SmtpServer {
            get {
                return ResourceManager.GetString("SystemSettings_SmtpServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swarmops has sent you a test mail to verify your new SMTP server settings..
        /// </summary>
        public static string SystemSettings_TestMailSent {
            get {
                return ResourceManager.GetString("SystemSettings_TestMailSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You really, really, REALLY should use HTTPS for a website like this. But you knew that already, didn&apos;t you?.
        /// </summary>
        public static string SystemSettings_Warning_Insecure {
            get {
                return ResourceManager.GetString("SystemSettings_Warning_Insecure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebSocket Port (Backend).
        /// </summary>
        public static string SystemSettings_WebsocketPortBackend {
            get {
                return ResourceManager.GetString("SystemSettings_WebsocketPortBackend", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebSocket Port (Frontend).
        /// </summary>
        public static string SystemSettings_WebsocketPortFrontend {
            get {
                return ResourceManager.GetString("SystemSettings_WebsocketPortFrontend", resourceCulture);
            }
        }
    }
}
