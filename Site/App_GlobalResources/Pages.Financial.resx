<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttestCosts_AdvanceAttested" xml:space="preserve">
    <value>Cash Advance #{0:N0} for {1} has been approved for {3:N2}.</value>
    <comment>Status message.</comment>
  </data>
  <data name="AttestCosts_AdvanceDeattested" xml:space="preserve">
    <value>The approval for Cash Advance #{0:N0} for {1} was RETRACTED.  It will not be paid out unless approved again.</value>
    <comment>When somebody undoes a previous approval.</comment>
  </data>
  <data name="AttestCosts_BudgetIsEmpty" xml:space="preserve">
    <value>You cannot approve this amount. The budget is empty for the year {0}.</value>
  </data>
  <data name="AttestCosts_CannotAttestNegative" xml:space="preserve">
    <value>You cannot approve a negative amount.</value>
  </data>
  <data name="AttestCosts_CannotAttestZero" xml:space="preserve">
    <value>You cannot approve a zero amount.</value>
  </data>
  <data name="AttestCosts_Error_CantRebudgetSalary" xml:space="preserve">
    <value>Sorry, you cannot rebudget a salary payout.</value>
  </data>
  <data name="AttestCosts_Error_InvalidAmountRetry" xml:space="preserve">
    <value>That doesn't seem to be a valid amount. Please retry?</value>
  </data>
  <data name="AttestCosts_Error_PleaseSelectBudget" xml:space="preserve">
    <value>Please select a budget to retarget the charge for.</value>
  </data>
  <data name="AttestCosts_ExpenseAttested" xml:space="preserve">
    <value>Expense Claim #{0:N0} from {1} for {2} {3:N2} has been approved.</value>
    <comment>{2} is the currency.</comment>
  </data>
  <data name="AttestCosts_GridHeader_Action" xml:space="preserve">
    <value>Action</value>
    <comment>Yes / No buttons. Keep short!</comment>
  </data>
  <data name="AttestCosts_GridHeader_Beneficiary" xml:space="preserve">
    <value>Beneficiary</value>
    <comment>The receiver of money.</comment>
  </data>
  <data name="AttestCosts_GridHeader_Budget" xml:space="preserve">
    <value>Budget</value>
  </data>
  <data name="AttestCosts_GridHeader_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="AttestCosts_GridHeader_Docs" xml:space="preserve">
    <value>Docs</value>
    <comment>Button to see underlying documentation. Keep short!</comment>
  </data>
  <data name="AttestCosts_GridHeader_Item" xml:space="preserve">
    <value>Item</value>
    <comment>Could also be translated to "Type". Will list"cash advance", "invoice", etc.</comment>
  </data>
  <data name="AttestCosts_GridHeader_Requested" xml:space="preserve">
    <value>Requested</value>
    <comment>Header for the requested amount.</comment>
  </data>
  <data name="AttestCosts_Header_CostsAwaitingAttestation" xml:space="preserve">
    <value>Costs waiting for your approval</value>
  </data>
  <data name="AttestCosts_Info" xml:space="preserve">
    <value>This is where you approve costs that other people are requesting from your budgets. Nothing is paid before you have approved it.</value>
  </data>
  <data name="AttestCosts_InvoiceAttested" xml:space="preserve">
    <value>Invoice #{0:N0} from {1} for {2} {3:N2} has been approved.</value>
    <comment>{2} is the currency.</comment>
  </data>
  <data name="AttestCosts_InvoiceDeattested" xml:space="preserve">
    <value>Approval for Invoice #{0:N0} from {1} was RETRACTED.  It will not be paid unless approved again.</value>
    <comment>When somebody undoes a previous approval.</comment>
  </data>
  <data name="AttestCosts_Modal_ButtonAmount" xml:space="preserve">
    <value>Approve</value>
    <comment>keep short</comment>
  </data>
  <data name="AttestCosts_Modal_ButtonCorrect" xml:space="preserve">
    <value>Approve</value>
  </data>
  <data name="AttestCosts_Modal_ButtonDeny" xml:space="preserve">
    <value>Deny</value>
    <comment>keep short</comment>
  </data>
  <data name="AttestCosts_Modal_ButtonRebudget" xml:space="preserve">
    <value>Rebudget</value>
    <comment>keep short</comment>
  </data>
  <data name="AttestCosts_Modal_DenyTextPlaceholder" xml:space="preserve">
    <value>My hovercraft is full of eels</value>
    <comment>This is a Monty Python reference. When translating, translate to "I am denying your request for funds because..."</comment>
  </data>
  <data name="AttestCosts_Modal_DescribeOptionAmount" xml:space="preserve">
    <value>What amount are you attesting instead (in {0})?</value>
    <comment>The {0} is the organization currency (SEK, USD, µBTC etc).</comment>
  </data>
  <data name="AttestCosts_Modal_DescribeOptionCorrect" xml:space="preserve">
    <value>Change this item to this amount (in {0}), then attest it like that:</value>
  </data>
  <data name="AttestCosts_Modal_DescribeOptionDeny" xml:space="preserve">
    <value>Optional reason for denial to the submitter:</value>
  </data>
  <data name="AttestCosts_Modal_DescribeOptionRebudget" xml:space="preserve">
    <value>Move the charge to this budget instead:</value>
  </data>
  <data name="AttestCosts_Modal_Header" xml:space="preserve">
    <value>Fix problems or deny approval</value>
  </data>
  <data name="AttestCosts_Modal_RadioOptionAmount" xml:space="preserve">
    <value>I will approve this, but for a different amount.</value>
  </data>
  <data name="AttestCosts_Modal_RadioOptionCorrect" xml:space="preserve">
    <value>The amount is wrong. I will approve it for the correct amount.</value>
  </data>
  <data name="AttestCosts_Modal_RadioOptionDeny" xml:space="preserve">
    <value>I will not approve this record. It is scratched.</value>
    <comment>This is a Monty Python reference. When translating, translate to "Deny attestation of this record altogether."</comment>
  </data>
  <data name="AttestCosts_Modal_RadioOptionRebudget" xml:space="preserve">
    <value>This record should charge a different budget. Move it there.</value>
  </data>
  <data name="AttestCosts_Modal_WhatIsProblem" xml:space="preserve">
    <value>What seems to be the problem with this record?</value>
  </data>
  <data name="AttestCosts_OutOfBudget" xml:space="preserve">
    <value>There are not enough funds remaining in the budget to approve this cost.</value>
  </data>
  <data name="AttestCosts_OutOfBudgetPrecise" xml:space="preserve">
    <value>There are not enough funds to approve this. You can attest up to {0} {1:N2} more in this budget for the year {2}.</value>
    <comment>The {0} is the currency and the {1} is the remaining budget. The {2} is the current year.</comment>
  </data>
  <data name="AttestCosts_OverdraftConfirm" xml:space="preserve">
    <value>&lt;strong&gt;OVERDRAFT BUDGET?&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;There are not enough funds remaining in the budget to approve this expense. Normally, it would be blocked from approval. However, you may override this limitation and attest anyway, thereby causing the account to overdraft its budget.&lt;br/&gt;&lt;br/&gt;Do you want to approve the expense, thereby forcing an overdraft, or do you want to cancel, staying on budget instead?&lt;br/&gt;&lt;br/&gt;</value>
  </data>
  <data name="AttestCosts_OverdraftConfirmNo" xml:space="preserve">
    <value>Stay on Budget</value>
  </data>
  <data name="AttestCosts_OverdraftConfirmYes" xml:space="preserve">
    <value>Force Overdraft</value>
  </data>
  <data name="AttestCosts_Overdrafted" xml:space="preserve">
    <value>BUDGET WAS OVERDRAFTED.</value>
    <comment>The UPPERCASE is intentional.</comment>
  </data>
  <data name="AttestCosts_PageTitle" xml:space="preserve">
    <value>Approve Costs</value>
  </data>
  <data name="AttestCosts_ParleyAttested" xml:space="preserve">
    <value>Conference #{0:N0}, arranged by {1}, has been approved for {3:N2}.</value>
  </data>
  <data name="AttestCosts_ParleyDeattested" xml:space="preserve">
    <value>Approval for Conference #{0:N0} by {1} was RETRACTED.  It will not be greenlighted unless approved again.</value>
    <comment>When somebody undoes a previous approval.</comment>
  </data>
  <data name="AttestCosts_SalaryAttested" xml:space="preserve">
    <value>Salary #{0:N0} for {1} was attested for {3:N2}.</value>
  </data>
  <data name="AttestCosts_SalaryDeattested" xml:space="preserve">
    <value>Approval for Salary #{0:N0} for {1} was RETRACTED. It will not be paid out unless approved again.</value>
    <comment>When somebody undoes a previous approval.</comment>
  </data>
  <data name="AttestCosts_Warn_UninitializedBudget" xml:space="preserve">
    <value>&lt;strong&gt;WARNING: BUDGET NOT SET&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;The cost you're approving belongs to an account in the ledger that lacks owner and doesn't have a defined budget allowance for the year. Consider visiting the Chart of Accounts and allocating budgets for the expected revenue and expenses.&lt;br/&gt;&lt;br/&gt;This message will only display once per visit to Cost Approvals.&lt;br/&gt;</value>
  </data>
  <data name="CreateInboundInvoice_Amount" xml:space="preserve">
    <value>Invoice amount total (in {0})</value>
    <comment>{0} is the organization's main currency.</comment>
  </data>
  <data name="CreateInboundInvoice_Description" xml:space="preserve">
    <value>Description</value>
    <comment>Free-text description of invoice</comment>
  </data>
  <data name="CreateInboundInvoice_HeaderInvoiceImage" xml:space="preserve">
    <value>Invoice Image</value>
  </data>
  <data name="CreateInboundInvoice_HeaderPaymentDetails" xml:space="preserve">
    <value>Payment Details</value>
    <comment>Displayed as header over supplier's account details</comment>
  </data>
  <data name="CreateInboundInvoice_Info" xml:space="preserve">
    <value>This is where you file invoices received at your organization ("Accounts Payable"). Enter the supplier name, amount, due date, the invoice reference, and upload an image of the received invoice. Also, select a budget. The budget owner needs to attest, as usual. (Future roadmapped expansions to this mechanism include purchase orders and supplier lists.)</value>
  </data>
  <data name="CreateInboundInvoice_PageTitle" xml:space="preserve">
    <value>Received Inbound Invoice</value>
  </data>
  <data name="CreateInboundInvoice_Reference" xml:space="preserve">
    <value>Invoice reference</value>
  </data>
  <data name="CreateInboundInvoice_ReferenceAutomaticOcr" xml:space="preserve">
    <value>OCR / Automatic</value>
    <comment>Some invoices come with OCR numbers printed on them for automatic processing.</comment>
  </data>
  <data name="CreateInboundInvoice_ReferenceManual" xml:space="preserve">
    <value>Manual</value>
    <comment>Other invoices come without automated processing and a manual </comment>
  </data>
  <data name="CreateInboundInvoice_SuccessMessage" xml:space="preserve">
    <value>Inbound Invoice #{0:N0} filed.</value>
    <comment>The {0:N0} is just an identity number (formatted for culture). This message is displayed on success.</comment>
  </data>
  <data name="CreateInboundInvoice_SupplierAccount" xml:space="preserve">
    <value>Account</value>
    <comment>Free text input, intended to convey everything needed to get the money right</comment>
  </data>
  <data name="CreateInboundInvoice_UploadInvoiceImage" xml:space="preserve">
    <value>Upload image file</value>
  </data>
  <data name="CreateInboundInvoice_ValidationError_Account" xml:space="preserve">
    <value>Please enter the supplier's bank account or equivalent.</value>
  </data>
  <data name="Donate_Explain" xml:space="preserve">
    <value>This is a QR code for donations to {0}. Read it from your phone's bitcoin wallet to make a donation, or donate from your computer directly to [{1}] (that's a Bitcoin Cash address).</value>
    <comment>The {0} is the organization name. {1} is the bitcoin address for donations.</comment>
  </data>
  <data name="Donate_FundsReceived" xml:space="preserve">
    <value>Received {0} {1:N2} ({2:N0} microcoins or "bits"). Thank you!</value>
    <comment>{0} is native currency, {1} is amount in native currency</comment>
  </data>
  <data name="Donate_FundsReceivedNative" xml:space="preserve">
    <value>Received {0} microcoins ("bits"). Thank you!</value>
    <comment>Used if BTC is the org native currency.</comment>
  </data>
  <data name="Donate_Info" xml:space="preserve">
    <value>If you want to donate to the organization, your can do so here.</value>
  </data>
  <data name="Donate_PageTitle" xml:space="preserve">
    <value>Donate</value>
  </data>
  <data name="Donate_StatusInitial" xml:space="preserve">
    <value>Waiting for transaction...</value>
  </data>
  <data name="Donate_TransactionDetected" xml:space="preserve">
    <value>Transaction detected, verifying...</value>
  </data>
  <data name="Donate_TxLabel" xml:space="preserve">
    <value>Donation to {0}</value>
    <comment>The {0} is the organization name</comment>
  </data>
  <data name="Donate_TxLabel_Loan" xml:space="preserve">
    <value>Loan to {0}</value>
    <comment>The {0} is the organization name</comment>
  </data>
  <data name="FileExpenseClaim_Amount" xml:space="preserve">
    <value>Expense claim amount (in {0})</value>
    <comment>{0} is the currency.</comment>
  </data>
  <data name="FileExpenseClaim_BankAccount" xml:space="preserve">
    <value>Account Number</value>
  </data>
  <data name="FileExpenseClaim_BankClearing" xml:space="preserve">
    <value>Clearing Number</value>
  </data>
  <data name="FileExpenseClaim_BankName" xml:space="preserve">
    <value>Bank Name</value>
  </data>
  <data name="FileExpenseClaim_Budget" xml:space="preserve">
    <value>Budget</value>
  </data>
  <data name="FileExpenseClaim_CostType" xml:space="preserve">
    <value>Cost Type</value>
    <comment>This is the 2nd bookkeeping dimension.</comment>
  </data>
  <data name="FileExpenseClaim_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="FileExpenseClaim_HeaderBankDetails" xml:space="preserve">
    <value>Your Bank Details</value>
  </data>
  <data name="FileExpenseClaim_HeaderReceiptImages" xml:space="preserve">
    <value>Receipt Images</value>
  </data>
  <data name="FileExpenseClaim_Info" xml:space="preserve">
    <value>If you have made a purchase on behalf of the organization using your private funds, you will likely want reimbursement for that by filing an &lt;em&gt;expense claim&lt;/em&gt;. You do that here by uploading the receipts and selecting the budget they should be charged to. If you have previously received a cash advance for this purchase, this is where you clear the organization's loan to you by submitting receipts.</value>
  </data>
  <data name="FileExpenseClaim_PageTitle" xml:space="preserve">
    <value>Request Money Back For Expense</value>
  </data>
  <data name="FileExpenseClaim_SuccessMessagePartOne" xml:space="preserve">
    <value>An expense claim has been successfully filed for {0} {1:N2} against the budget of {2}. The receipts will need to be validated and the claim will need to be attested by the budget owner.</value>
    <comment>{0} is the currency, {1} is the amount, and {2} is the budget name.</comment>
  </data>
  <data name="FileExpenseClaim_SuccessMessagePartTwo" xml:space="preserve">
    <value>As soon as this has happened, the funds will proceed to payout to your indicated account.</value>
  </data>
  <data name="FileExpenseClaim_SuccessMessagePartTwoOwnBudget" xml:space="preserve">
    <value>As this is your own budget, attestation is already complete. Only validation is necessary.</value>
  </data>
  <data name="FileExpenseClaim_UploadRecieptImages" xml:space="preserve">
    <value>Upload Receipt Images</value>
  </data>
  <data name="FileExpenseClaim_ValidationError_Amount" xml:space="preserve">
    <value>Please enter the amount of money (in {0}) that you are claiming.</value>
  </data>
  <data name="FileExpenseClaim_ValidationError_Documents" xml:space="preserve">
    <value>Please upload one or more receipt images supporting the expense claim.</value>
  </data>
  <data name="FileExpenseClaim_ValidationError_MissingTag" xml:space="preserve">
    <value>Please select an option as indicated.</value>
    <comment>Very general as tags may be many things.</comment>
  </data>
  <data name="FileExpenseClaim_ValidationError_Purpose" xml:space="preserve">
    <value>Please describe what this purchase was.</value>
  </data>
  <data name="PayOutMoney_GridHeader_Amount" xml:space="preserve">
    <value>Amount</value>
    <comment>Amount to be paid out</comment>
  </data>
  <data name="PayOutMoney_GridHeader_PaidOut" xml:space="preserve">
    <value>Paid</value>
    <comment>Possibly in imperative; a click in this column indicates payment has been done. It is an action column, not an information column.</comment>
  </data>
  <data name="PayOutMoney_GridHeader_Recipient" xml:space="preserve">
    <value>Recipient</value>
    <comment>Can be org (for invoice) or person (for salary, expense, advance)</comment>
  </data>
  <data name="PayOutMoney_Header" xml:space="preserve">
    <value>Costs Ready For Payout</value>
  </data>
  <data name="PayOutMoney_Info" xml:space="preserve">
    <value>These are the various forms of costs to the organization that have passed all the hurdles for payout. They are ready to be paid out to the recipient. Here is where you check them off as being paid out (probably while having your bank open in another window).</value>
  </data>
  <data name="PayoutMoney_OptionShowOcr" xml:space="preserve">
    <value>Show OCR for mobile apps</value>
  </data>
  <data name="PayOutMoney_OptionShowOpen" xml:space="preserve">
    <value>Show open payouts ({0:N0})</value>
    <comment>These are payouts that have been ordered, but aren't yet mapped to actual transactions. Can be shown for the purpose of undoing them if they were wrong.</comment>
  </data>
  <data name="PayOutMoney_PageTitle" xml:space="preserve">
    <value>Pay Out Money</value>
  </data>
  <data name="PayOutMoney_PayoutCannotUndo" xml:space="preserve">
    <value>Cannot undo payout #{0}: it has already settled or closed.</value>
  </data>
  <data name="PayOutMoney_PayoutCreated" xml:space="preserve">
    <value>Payout #{0:N0} to {1} was created.</value>
    <comment>Written as log message when the user confirms a payout has been made.</comment>
  </data>
  <data name="PayOutMoney_PayoutUndone" xml:space="preserve">
    <value>Payout #{0:N0} was undone and everything restored.</value>
  </data>
  <data name="PayrollTaxForms_AdditiveTax" xml:space="preserve">
    <value>Additive Tax</value>
    <comment>If applicable, translate to local legal tax term</comment>
  </data>
  <data name="PayrollTaxForms_DeductedTax" xml:space="preserve">
    <value>Deducted Tax</value>
    <comment>If applicable, translate to local legal tax term</comment>
  </data>
  <data name="PayrollTaxForms_GrossPay" xml:space="preserve">
    <value>Gross Paycheck</value>
  </data>
  <data name="PayrollTaxForms_Info" xml:space="preserve">
    <value>View cheat sheets (completed tax forms) for the organization payroll, which are easy for you to copy to your actual tax forms, or possibly even print as is. Performance and actual forms vary by country and sometimes depend on third-party code and plugins.</value>
  </data>
  <data name="PayrollTaxForms_PageTitle" xml:space="preserve">
    <value>Payroll Tax Forms</value>
  </data>
  <data name="PayrollTaxForms_TaxFormsHeader" xml:space="preserve">
    <value>Monthly Tax Forms For {0} For</value>
    <comment>The {0} is the organization name. A country selector follows (imagine a "France" tacked on to the end).</comment>
  </data>
  <data name="PayrollTaxForms_TotalCost" xml:space="preserve">
    <value>Total Cost</value>
  </data>
  <data name="PayrollTaxForms_TotalTax" xml:space="preserve">
    <value>Total Tax</value>
  </data>
  <data name="RequestCashAdvance_Amount" xml:space="preserve">
    <value>Advance amount (in {0})</value>
    <comment>{0} is the currency.</comment>
  </data>
  <data name="RequestCashAdvance_BankAccount" xml:space="preserve">
    <value>Account Number</value>
  </data>
  <data name="RequestCashAdvance_BankClearing" xml:space="preserve">
    <value>Clearing Number</value>
  </data>
  <data name="RequestCashAdvance_BankName" xml:space="preserve">
    <value>Bank Name</value>
  </data>
  <data name="RequestCashAdvance_Budget" xml:space="preserve">
    <value>Budget</value>
  </data>
  <data name="RequestCashAdvance_HeaderBankDetails" xml:space="preserve">
    <value>Your Bank Details</value>
  </data>
  <data name="RequestCashAdvance_Info" xml:space="preserve">
    <value>If you are about to make a purchase on behalf of the organization, but need the money in advance rather than claiming it back afterwards, you can request a cash advance for a specific purpose.</value>
  </data>
  <data name="RequestCashAdvance_PageTitle" xml:space="preserve">
    <value>Request Cash Advance</value>
  </data>
  <data name="RequestCashAdvance_Purpose" xml:space="preserve">
    <value>Purpose</value>
  </data>
  <data name="RequestCashAdvance_SuccessMessagePartOne" xml:space="preserve">
    <value>A cash advance has been requested for &lt;strong&gt;{0}&lt;/strong&gt;. The requested amount is {2} {3:N2}. Note that this is a &lt;strong&gt;loan&lt;/strong&gt; from the organization until receipts have been presented.</value>
    <comment>{0} is the person receiving the advance, {1} is the entered description. {2} is the currency (in caps) and {3:N2} is the amount, with two decimals, displayed in culture.</comment>
  </data>
  <data name="RequestCashAdvance_SuccessMessagePartTwo" xml:space="preserve">
    <value>This needs to be attested by the budget owner and will then proceed to payout.</value>
  </data>
  <data name="RequestCashAdvance_SuccessMessagePartTwoOwnBudget" xml:space="preserve">
    <value>As this is your own budget, this has been automatically attested and has proceeded to payout.</value>
    <comment>This is displayed if either the person creating the cash advance OR the person receiving it is the budget owner.</comment>
  </data>
  <data name="RequestCashAdvance_ValidationError_Amount" xml:space="preserve">
    <value>Please enter the amount of money (in {0}) that you'd like to advance.</value>
    <comment>{0} is the currency.</comment>
  </data>
  <data name="RequestCashAdvance_ValidationError_BankAccount" xml:space="preserve">
    <value>Please enter your bank account number.</value>
  </data>
  <data name="RequestCashAdvance_ValidationError_BankClearing" xml:space="preserve">
    <value>Please enter your bank's clearing number.</value>
  </data>
  <data name="RequestCashAdvance_ValidationError_BankName" xml:space="preserve">
    <value>Please enter your bank's name.</value>
  </data>
  <data name="RequestCashAdvance_ValidationError_Budget" xml:space="preserve">
    <value>Please select a budget to charge.</value>
  </data>
  <data name="RequestCashAdvance_ValidationError_Purpose" xml:space="preserve">
    <value>Please state the purpose of the cash advance.</value>
  </data>
  <data name="ValidateReceipts_Header_ReceiptsAwaitingValidation" xml:space="preserve">
    <value>Receipts awaiting your validation</value>
  </data>
  <data name="ValidateReceipts_Info" xml:space="preserve">
    <value>This is where you inspect and confirm the validity of receipts that accompany expense claims. Check that the amount is correct and that the receipt appears to be for what it is claimed to be for.</value>
  </data>
  <data name="ValidateReceipts_PageTitle" xml:space="preserve">
    <value>Validate Receipts</value>
  </data>
  <data name="ValidateReceipts_ReceiptsDevalidated" xml:space="preserve">
    <value>Validation for receipts for Expense Claim #{0:N0} for {1} {2:N2} was RETRACTED. The expense claim will not proceed to payout unless re-validated.</value>
  </data>
  <data name="ValidateReceipts_ReceiptsValidated" xml:space="preserve">
    <value>The receipts for Expense Claim #{0:N0} for {1} {2:N2} have been validated.</value>
  </data>
  <data name="CreateInboundInvoice_ButtonCreate" xml:space="preserve">
    <value>Create</value>
    <comment>Could also be "file" (as verb, about the invoice) or equivalent</comment>
  </data>
  <data name="CreateInboundInvoice_ValidationError_Amount" xml:space="preserve">
    <value>Please enter the amount of money (in {0}) the invoice requests.</value>
  </data>
  <data name="CreateInboundInvoice_ValidationError_Budget" xml:space="preserve">
    <value>Please specify a budget to charge.</value>
  </data>
  <data name="CreateInboundInvoice_ValidationError_Documents" xml:space="preserve">
    <value>Please upload one or more documents of the original invoice.</value>
  </data>
  <data name="CreateInboundInvoice_ValidationError_MissingTag" xml:space="preserve">
    <value>Please select an option.</value>
  </data>
  <data name="CreateInboundInvoice_ValidationError_Purpose" xml:space="preserve">
    <value>Please describe what this purchase was.</value>
  </data>
  <data name="FileExpenseClaim_ButtonRequest" xml:space="preserve">
    <value>Request</value>
    <comment>Could also be "file" (as verb) or equivalent</comment>
  </data>
  <data name="RequestCashAdvance_ButtonRequest" xml:space="preserve">
    <value>Request</value>
  </data>
  <data name="CreateInboundInvoice_AmountVat" xml:space="preserve">
    <value>VAT part of total ({0})</value>
  </data>
  <data name="FileExpenseClaim_Vat" xml:space="preserve">
    <value>VAT of the total ({0})</value>
  </data>
  <data name="ListInboundInvoices_Header" xml:space="preserve">
    <value>Listing Inbound Invoices</value>
  </data>
  <data name="ListInboundInvoices_Header_Sender" xml:space="preserve">
    <value>Invoice sender</value>
  </data>
  <data name="ListInboundInvoices_Info" xml:space="preserve">
    <value>This lists the latest 100 invoices, sorted by their due date with newest first.</value>
  </data>
  <data name="ListInboundInvoices_Title" xml:space="preserve">
    <value>Inbound Invoices</value>
  </data>
  <data name="CreateOutboundInvoice_BoxTitle" xml:space="preserve">
    <value>Creating Outbound Invoice</value>
  </data>
  <data name="CreateOutboundInvoice_ButtonCreate" xml:space="preserve">
    <value>Create</value>
    <comment>This goes on a button, so needs to be short (8-9 letters max)</comment>
  </data>
  <data name="CreateOutboundInvoice_PageTitle" xml:space="preserve">
    <value>Creating Outbound Invoice</value>
  </data>
  <data name="CreateOutboundInvoice_SuccessMessage" xml:space="preserve">
    <value>Outbound Invoice #{0:N0} filed.</value>
  </data>
  <data name="Donate_FundsReceivedLabel" xml:space="preserve">
    <value>Funds Received ({0})</value>
    <comment>The {0} will be replaced with currency name.</comment>
  </data>
  <data name="ListOutboundInvoices_CreatedDateTime" xml:space="preserve">
    <value>Sent</value>
  </data>
  <data name="ListOutboundInvoices_CustomerReceivingInvoice" xml:space="preserve">
    <value>Customer</value>
  </data>
  <data name="ListOutboundInvoices_Header" xml:space="preserve">
    <value>Listing Outbound Invoices</value>
  </data>
  <data name="ListOutboundInvoices_Info" xml:space="preserve">
    <value>This lists the 100 most recent outbound invoices, sorted by when they were created, newest first.</value>
  </data>
  <data name="ListOutboundInvoices_InvoiceAmountTotalIncludingTaxes" xml:space="preserve">
    <value>Amount Total</value>
  </data>
  <data name="ListOutboundInvoices_PaymentExpectedByDate" xml:space="preserve">
    <value>Due Date</value>
  </data>
  <data name="ListOutboundInvoices_Title" xml:space="preserve">
    <value>List Outbound Invoices</value>
  </data>
  <data name="FileExpenseClaim_Expensify_CsvUploadDescription" xml:space="preserve">
    <value>Upload Expensify CSV</value>
  </data>
  <data name="FileExpenseClaim_Expensify_InstructionsBasic" xml:space="preserve">
    <value>If you have many expense reports, you can gather them with Expensify and upload an Expensify CSV report here (which you obtain from at Expensify under Reports, Export, as CSV). Swarmops will use Expensify to fetch all the individual receipts and log them as separate expense claims for proper accounting.</value>
  </data>
  <data name="FileExpenseClaim_Expensify_InstructionsNeedVat" xml:space="preserve">
    <value>In order for this to work, since {0} reports VAT to the tax authorities, you'll need to modify the default Expensify CSV profile to include the VAT, which the default doesn't. Expensify's help pages has more on how to do this and if you're using Expensify on a team basis, your Expensify policy should already have a VAT-enabled CSV export profile.</value>
    <comment>{0} is the organization name.</comment>
  </data>
  <data name="FileExpenseClaim_Expensify_InstructionsNothingAdvanced" xml:space="preserve">
    <value>Based on the organization's settings, the "Default CSV" export profile in Expensify should be sufficient for Swarmops.</value>
  </data>
  <data name="FileExpenseClaim_Expensify_ReportCurrency" xml:space="preserve">
    <value>Expensify report's currency is</value>
  </data>
  <data name="FileExpenseClaim_Title_Expensify" xml:space="preserve">
    <value>Upload Expensify Report For Reimbursement</value>
  </data>
  <data name="FileExpenseClaim_Expensify_Error_BadFile" xml:space="preserve">
    <value>&lt;p&gt;&lt;strong&gt;ERROR: Unable to parse the Expensify CSV.&lt;/strong&gt; If this is a CSV file from Expensify, then Swarmops needs the columns "Timestamp", "Amount", "Merchant", "Comment", "Category", "MCC", "Original Currency", and "Original Amount" to be present in the file. If the organization reports VAT, then a further column called "VAT" is required.&lt;/p&gt;&lt;p&gt;Unable to proceed with this file.&lt;/p&gt;</value>
    <comment>Do not translate the Expensify column field names.</comment>
  </data>
  <data name="FileExpenseClaim_Expensify_Error_NeedsVat" xml:space="preserve">
    <value>&lt;p&gt;&lt;strong&gt;ERROR: The Expensify CSV file doesn't have a VAT field.&lt;/strong&gt; Since this organization reports Value Added Tax (VAT) to authorities, this must be specified on a per-expense basis. Please enable VAT in Expensify and create a new CSV export profile that exports this under the column header "VAT". If your team has already created such a CSV profile, you may just need to select it when exporting to CSV.&lt;/p&gt;&lt;p&gt;Unable to process this file.&lt;/p&gt;</value>
  </data>
  <data name="FileExpenseClaim_Expensify_UploadAnother" xml:space="preserve">
    <value>Upload Another Expensify CSV File?</value>
    <comment>Displayed after upload of the first file, so "another" means "a second (third, fourth...) file", as opposed to "a different file". French "encore un fichier", German "eine weitere Datei", Scandinavian "en fil till", etc.</comment>
  </data>
  <data name="FileExpenseClaim_ForWhom_DefaultMyself" xml:space="preserve">
    <value>myself</value>
  </data>
  <data name="FileExpenseClaim_ForWhom_Prompt" xml:space="preserve">
    <value>This is an expense claim from whom?</value>
  </data>
  <data name="FileExpenseClaim_Expensify_Error_InvalidCsv" xml:space="preserve">
    <value>&lt;p&gt;&lt;strong&gt;ERROR: The Expensify CSV file is missing required data fields.&lt;/strong&gt; The file appears to be missing at least one of the required fields of Expensify's default CSV profile. Refer to the technical documentation and compare with the file you tried to upload. (It is a more probable cause of error, of course, that you tried to upload the completely wrong file &amp;ndash; maybe a photograph instead of an Expensify CSV &amp;ndash; and that this is the cause for the missing expected data.)&lt;/p&gt;&lt;p&gt;Unable to process this file.&lt;/p&gt;</value>
  </data>
  <data name="AttestCosts_Modal_DescribeCorrectNoVat" xml:space="preserve">
    <value>(The amount must exclude any VAT specified!)</value>
    <comment>This refers to when a budget owner is asked to correct an amount to charge their budget, based on seeing an invoice or receipt for that charge, and is instructed that they should not enter the TOTAL as shown on the invoice or receipt, but the TOTAL EXCEPT VAT.</comment>
  </data>
  <data name="FileExpenseClaim_Expensify_NeedBudgetsForAll" xml:space="preserve">
    <value>All expense claims need a budget before submitting.</value>
    <comment>This is displayed after the user has uploaded an Expensify report with lots of expense claims, but hasn't yet set a budget for all of them</comment>
  </data>
  <data name="FileExpenseClaim_Expensify_NoRecordsLeft" xml:space="preserve">
    <value>No Expensify records to submit</value>
    <comment>This appears after an empty file is uploaded, or the last record deleted</comment>
  </data>
  <data name="FileExpenseClaim_Expensify_SubmitRecordSingle" xml:space="preserve">
    <value>Ready to submit one claim</value>
  </data>
  <data name="FileExpenseClaim_Expensify_SubmitRecordsSeveral" xml:space="preserve">
    <value>Ready to submit {0} claims</value>
    <comment>The {0} is replaced by a number, 2 or higher</comment>
  </data>
  <data name="FileExpenseClaim_Expensify_SuccessOne" xml:space="preserve">
    <value>Claim successfully filed.</value>
  </data>
  <data name="FileExpenseClaim_Expensify_SuccessSeveral" xml:space="preserve">
    <value>Successfully filed {0} claims.</value>
  </data>
  <data name="AttestCosts_ExpenseDeattested" xml:space="preserve">
    <value>Approval for Expense Claim #{0:N0} from {1} was RETRACTED. It will not be paid unless approved again.</value>
    <comment>When somebody undoes a previous attestation.</comment>
  </data>
  <data name="PayOutMoney_GridHeader_CurrencyMethod" xml:space="preserve">
    <value>Currency, Method</value>
    <comment>"Method" refers to the method of payout -- wire transfer, direct deposit, giro service, etc.</comment>
  </data>
  <data name="PayOutMoney_GridHeader_PayThis" xml:space="preserve">
    <value>Pay</value>
    <comment>Like the "Actions" column in other grids, but just with one option, "Pay this expenditure"</comment>
  </data>
  <data name="PayOutMoney_Modal_ConfirmPaid" xml:space="preserve">
    <value>This is Paid</value>
    <comment>As in "Confirm The Currently Displayed Payout Has Been Manually Executed" -- try to keep short, "This is Paid" length is ideal</comment>
  </data>
  <data name="PayOutMoney_Modal_CurrencyAmount" xml:space="preserve">
    <value>Currency and Amount</value>
    <comment>Will be a label for something like "USD 10,000.00"</comment>
  </data>
  <data name="PayOutMoney_Modal_Header" xml:space="preserve">
    <value>Execute This Payment Manually Now</value>
    <comment>Displayed as header over the details of a payment to be made manually (as opposed to with bitcoin/crypto)</comment>
  </data>
  <data name="PayOutMoney_Modal_LabelOcr1" xml:space="preserve">
    <value>Are you scanning this payment?</value>
    <comment>In longer form, the question would be "Are you using a mobile phone or other device to capture this payment data automatically?". Some banking apps can scan QR codes or specially formatted number sequences.</comment>
  </data>
  <data name="PayOutMoney_Modal_LabelOcr2" xml:space="preserve">
    <value>Show in machine-readable format</value>
    <comment>Don't make this string much longer than it is.</comment>
  </data>
  <data name="PayOutMoney_Modal_TransferMethod" xml:space="preserve">
    <value>Transfer Method</value>
    <comment>As in "money transfer method"; this can be a domestic bank transfer, mailing a check, et cetera.</comment>
  </data>
  <data name="PayOutMoney_AutomationFieldNext" xml:space="preserve">
    <value>...and this</value>
    <comment>AutomationStartFirst and AutomationStartNext are shown as labels to machine-readable data fields, that the user can scan with an app in their smartphone.</comment>
  </data>
  <data name="PayOutMoney_AutomationFieldStart" xml:space="preserve">
    <value>Scan this</value>
    <comment>AutomationStartFirst and AutomationStartNext are shown as labels to machine-readable data fields, that the user can scan with an app in their smartphone.</comment>
  </data>
  <data name="PayOutMoney_GridHeader_Reference" xml:space="preserve">
    <value>Reference</value>
    <comment>Depends on cost type - can be an OCR number for an invoice, a cash advance number, a salary spec, etc.</comment>
  </data>
  <data name="PayOutMoney_PaymentLate" xml:space="preserve">
    <value>Payment is late</value>
    <comment>"Late" in this context means "after its due date".</comment>
  </data>
  <data name="FileExpenseClaim_DateIncurred" xml:space="preserve">
    <value>Date of Expense</value>
    <comment>Refers to the date of when the expense happened, not to the filing date of the receipt</comment>
  </data>
</root>