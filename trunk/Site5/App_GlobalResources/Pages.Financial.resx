<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttestCosts_AdvanceAttested" xml:space="preserve">
    <value>Cash Advance #{0} for {1} has been attested for {3:N2}.</value>
    <comment>Status message.</comment>
  </data>
  <data name="AttestCosts_AdvanceDeattested" xml:space="preserve">
    <value>Cash Advance #{0} for {1} was UN-attested.  It will not be paid out unless attested again.</value>
    <comment>When somebody undoes a previous attestation.</comment>
  </data>
  <data name="AttestCosts_ExpenseAttested" xml:space="preserve">
    <value>Expense Claim #{0} from {1} for {2} {3:N2} has been attested.</value>
    <comment>{2} is the currency.</comment>
  </data>
  <data name="AttestCosts_ExpenseDeattested" xml:space="preserve">
    <value>Expense Claim #{0} from {1} was DE-attested. It will not be paid out unless attested again.</value>
    <comment>When somebody undoes a previous attestation.</comment>
  </data>
  <data name="AttestCosts_GridHeader_Action" xml:space="preserve">
    <value>Action</value>
    <comment>Yes / No buttons. Keep short!</comment>
  </data>
  <data name="AttestCosts_GridHeader_Beneficiary" xml:space="preserve">
    <value>Beneficiary</value>
    <comment>The receiver of money.</comment>
  </data>
  <data name="AttestCosts_GridHeader_Budget" xml:space="preserve">
    <value>Budget</value>
  </data>
  <data name="AttestCosts_GridHeader_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="AttestCosts_GridHeader_Docs" xml:space="preserve">
    <value>Docs</value>
    <comment>Button to see underlying documentation. Keep short!</comment>
  </data>
  <data name="AttestCosts_GridHeader_Item" xml:space="preserve">
    <value>Item</value>
    <comment>Could also be translated to "Type". Will list"cash advance", "invoice", etc.</comment>
  </data>
  <data name="AttestCosts_GridHeader_Requested" xml:space="preserve">
    <value>Requested</value>
    <comment>Header for the requested amount.</comment>
  </data>
  <data name="AttestCosts_Header_CostsAwaitingAttestation" xml:space="preserve">
    <value>Costs waiting for your attestation</value>
  </data>
  <data name="AttestCosts_Info" xml:space="preserve">
    <value>This is where you attest costs that other people are requesting from your budgets. Nothing is paid before you have attested it.</value>
  </data>
  <data name="AttestCosts_InvoiceAttested" xml:space="preserve">
    <value>Invoice #{0} from {1} for {2} {3:N2} has been attested.</value>
    <comment>{2} is the currency.</comment>
  </data>
  <data name="AttestCosts_InvoiceDeattested" xml:space="preserve">
    <value>Invoice #{0} from {1} was UN-attested.  It will not be paid unless attested again.</value>
    <comment>When somebody undoes a previous attestation.</comment>
  </data>
  <data name="AttestCosts_PageTitle" xml:space="preserve">
    <value>Attest Costs</value>
  </data>
  <data name="AttestCosts_ParleyAttested" xml:space="preserve">
    <value>Conference #{0}, arranged by {1}, has been attested for {3:N2}.</value>
  </data>
  <data name="AttestCosts_ParleyDeattested" xml:space="preserve">
    <value>Conference #{0} by {1} was UN-attested.  It will not be greenlighted unless attested again.</value>
    <comment>When somebody undoes a previous attestation.</comment>
  </data>
  <data name="AttestCosts_SalaryAttested" xml:space="preserve">
    <value>Salary #{0} for {1} was attested for {3:N2}.</value>
  </data>
  <data name="AttestCosts_SalaryDeattested" xml:space="preserve">
    <value>Salary #{0} for {1} was DE-attested. It will not be paid out unless attested again.</value>
    <comment>When somebody undoes a previous attestation.</comment>
  </data>
  <data name="FileExpenseClaim_Amount" xml:space="preserve">
    <value>Expense claim amount (in {0})</value>
    <comment>{0} is the currency.</comment>
  </data>
  <data name="FileExpenseClaim_BankAccount" xml:space="preserve">
    <value>Account Number</value>
  </data>
  <data name="FileExpenseClaim_BankClearing" xml:space="preserve">
    <value>Clearing Number</value>
  </data>
  <data name="FileExpenseClaim_BankName" xml:space="preserve">
    <value>Bank Name</value>
  </data>
  <data name="FileExpenseClaim_Budget" xml:space="preserve">
    <value>Budget</value>
  </data>
  <data name="FileExpenseClaim_CostType" xml:space="preserve">
    <value>Cost Type</value>
    <comment>This is the 2nd bookkeeping dimension.</comment>
  </data>
  <data name="FileExpenseClaim_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="FileExpenseClaim_HeaderBankDetails" xml:space="preserve">
    <value>Your Bank Details</value>
  </data>
  <data name="FileExpenseClaim_HeaderReceiptImages" xml:space="preserve">
    <value>Receipt Images</value>
  </data>
  <data name="FileExpenseClaim_Info" xml:space="preserve">
    <value>If you have made a purchase on behalf of the organization using your private funds, you will likely want reimbursement for that by filing an &lt;em&gt;expense claim&lt;/em&gt;. You do that here by uploading the receipts and selecting the budget they should be charged to. If you have previously received a cash advance for this purchase, this is where you clear the organization's loan to you by submitting receipts.</value>
  </data>
  <data name="FileExpenseClaim_PageTitle" xml:space="preserve">
    <value>Request Money Back For Expense</value>
  </data>
  <data name="FileExpenseClaim_SuccessMessagePartOne" xml:space="preserve">
    <value>An expense claim has been successfully filed for {0} {1:N2} against the budget of {2}. The receipts will need to be validated and the claim will need to be attested by the budget owner.</value>
    <comment>{0} is the currency, {1} is the amount, and {2} is the budget name.</comment>
  </data>
  <data name="FileExpenseClaim_SuccessMessagePartTwo" xml:space="preserve">
    <value>As soon as this has happened, the funds will proceed to payout to your indicated account.</value>
  </data>
  <data name="FileExpenseClaim_SuccessMessagePartTwoOwnBudget" xml:space="preserve">
    <value>As this is your own budget, attestation is already complete. Only validation is necessary.</value>
  </data>
  <data name="FileExpenseClaim_UploadRecieptImages" xml:space="preserve">
    <value>Upload Receipt Images:</value>
  </data>
  <data name="FileExpenseClaim_ValidationError_Amount" xml:space="preserve">
    <value>Please enter the amount of money (in {0}) that you are claiming.</value>
  </data>
  <data name="FileExpenseClaim_ValidationError_Documents" xml:space="preserve">
    <value>Please upload one or more receipt images supporting the expense claim.</value>
  </data>
  <data name="FileExpenseClaim_ValidationError_MissingTag" xml:space="preserve">
    <value>Please select an option as indicated.</value>
    <comment>Very general as tags may be many things.</comment>
  </data>
  <data name="FileExpenseClaim_ValidationError_Purpose" xml:space="preserve">
    <value>Please describe what this purchase was.</value>
  </data>
  <data name="PayOutMoney_GridHeader_Amount" xml:space="preserve">
    <value>Amount</value>
    <comment>Amount to be paid out</comment>
  </data>
  <data name="PayOutMoney_GridHeader_BankAccount" xml:space="preserve">
    <value>Clearing / Account</value>
    <comment>Will display as "XXXX / YYYYYYYY" where XXXX is the clearing number</comment>
  </data>
  <data name="PayOutMoney_GridHeader_BankName" xml:space="preserve">
    <value>Bank</value>
  </data>
  <data name="PayOutMoney_GridHeader_DueDate" xml:space="preserve">
    <value>Due Date</value>
  </data>
  <data name="PayOutMoney_GridHeader_PaidOut" xml:space="preserve">
    <value>Paid</value>
    <comment>Possibly in imperative; a click in this column indicates payment has been done. It is an action column, not an information column.</comment>
  </data>
  <data name="PayOutMoney_GridHeader_Recipient" xml:space="preserve">
    <value>Recipient</value>
    <comment>Can be org (for invoice) or person (for salary, expense, advance)</comment>
  </data>
  <data name="PayOutMoney_GridHeader_Reference" xml:space="preserve">
    <value>Reference</value>
    <comment>Depends on cost type - can be an OCR number for an invoice, a cash advance number, a salary spec, etc.</comment>
  </data>
  <data name="PayOutMoney_Header" xml:space="preserve">
    <value>Costs Ready For Payout</value>
  </data>
  <data name="PayOutMoney_Info" xml:space="preserve">
    <value>These are the various forms of costs to the organization that have passed all the hurdles for payout. They are ready to be paid out to the recipient. Here is where you check them off as being paid out (probably while having your bank open in another window).</value>
  </data>
  <data name="PayOutMoney_PageTitle" xml:space="preserve">
    <value>Pay Out Money</value>
  </data>
  <data name="PayOutMoney_PayoutCannotUndo" xml:space="preserve">
    <value>Cannot undo payout #{0}: it has already settled or closed.</value>
  </data>
  <data name="PayOutMoney_PayoutCreated" xml:space="preserve">
    <value>Payout #{0} to {1} was created.</value>
    <comment>Written as log message when the user confirms a payout has been made.</comment>
  </data>
  <data name="PayOutMoney_PayoutUndone" xml:space="preserve">
    <value>Payout #{0} was undone and everything restored.</value>
  </data>
  <data name="RequestCashAdvance_Amount" xml:space="preserve">
    <value>Advance amount (in {0})</value>
    <comment>{0} is the currency.</comment>
  </data>
  <data name="RequestCashAdvance_BankAccount" xml:space="preserve">
    <value>Account Number</value>
  </data>
  <data name="RequestCashAdvance_BankClearing" xml:space="preserve">
    <value>Clearing Number</value>
  </data>
  <data name="RequestCashAdvance_BankName" xml:space="preserve">
    <value>Bank Name</value>
  </data>
  <data name="RequestCashAdvance_Budget" xml:space="preserve">
    <value>Budget</value>
  </data>
  <data name="RequestCashAdvance_HeaderBankDetails" xml:space="preserve">
    <value>Your Bank Details</value>
  </data>
  <data name="RequestCashAdvance_Info" xml:space="preserve">
    <value>If you are about to make a purchase on behalf of the organization, but need the money in advance rather than claiming it back afterwards, you can request a cash advance for a specific purpose.</value>
  </data>
  <data name="RequestCashAdvance_PageTitle" xml:space="preserve">
    <value>Request Cash Advance</value>
  </data>
  <data name="RequestCashAdvance_Purpose" xml:space="preserve">
    <value>Purpose</value>
  </data>
  <data name="RequestCashAdvance_SuccessMessagePartOne" xml:space="preserve">
    <value>A cash advance has been requested for &lt;strong&gt;{0}&lt;/strong&gt;. The requested amount is {2} {3:N2}. Note that this is a &lt;strong&gt;loan&lt;/strong&gt; from the organization until receipts have been presented.</value>
    <comment>{0} is the person receiving the advance, {1} is the entered description. {2} is the currency (in caps) and {3:N2} is the amount, with two decimals, displayed in culture.</comment>
  </data>
  <data name="RequestCashAdvance_SuccessMessagePartTwo" xml:space="preserve">
    <value>This needs to be attested by the budget owner and will then proceed to payout.</value>
  </data>
  <data name="RequestCashAdvance_SuccessMessagePartTwoOwnBudget" xml:space="preserve">
    <value>As this is your own budget, this has been automatically attested and has proceeded to payout.</value>
    <comment>This is displayed if either the person creating the cash advance OR the person receiving it is the budget owner.</comment>
  </data>
  <data name="RequestCashAdvance_ValidationError_Amount" xml:space="preserve">
    <value>Please enter the amount of money (in {0}) that you'd like to advance.</value>
    <comment>{0} is the currency.</comment>
  </data>
  <data name="RequestCashAdvance_ValidationError_BankAccount" xml:space="preserve">
    <value>Please enter your bank account number.</value>
  </data>
  <data name="RequestCashAdvance_ValidationError_BankClearing" xml:space="preserve">
    <value>Please enter your bank's clearing number.</value>
  </data>
  <data name="RequestCashAdvance_ValidationError_BankName" xml:space="preserve">
    <value>Please enter your bank's name.</value>
  </data>
  <data name="RequestCashAdvance_ValidationError_Budget" xml:space="preserve">
    <value>Please select a budget to charge.</value>
  </data>
  <data name="RequestCashAdvance_ValidationError_Purpose" xml:space="preserve">
    <value>Please state the purpose of the cash advance.</value>
  </data>
  <data name="ValidateReceipts_Header_ReceiptsAwaitingValidation" xml:space="preserve">
    <value>Receipts awaiting your validation</value>
  </data>
  <data name="ValidateReceipts_Info" xml:space="preserve">
    <value>This is where you inspect and confirm the validity of receipts that accompany expense claims. Check that the amount is correct and that the receipt appears to be for what it is claimed to be for.</value>
  </data>
  <data name="ValidateReceipts_PageTitle" xml:space="preserve">
    <value>Validate Receipts</value>
  </data>
  <data name="ValidateReceipts_ReceiptsDevalidated" xml:space="preserve">
    <value>The receipts for Expense Claim #{0} for {1} {2:N2} have been DE-validated. The expense claim will not proceed to payout unless re-validated.</value>
  </data>
  <data name="ValidateReceipts_ReceiptsValidated" xml:space="preserve">
    <value>The receipts for Expense Claim #{0} for {1} {2:N2} have been validated.</value>
  </data>
</root>