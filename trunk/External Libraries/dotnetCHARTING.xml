<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>dotnetCHARTING</name>
    </assembly>
    <members>
        <member name="T:dotnetCHARTING.BackgroundMode">
            <summary>Specifies a background drawing mode.</summary>
        </member>
        <member name="F:dotnetCHARTING.BackgroundMode.Color">
            <summary>Draws a solid color.</summary>
        </member>
        <member name="F:dotnetCHARTING.BackgroundMode.Image">
            <summary>Draws a centered image on the background surface.</summary>
        </member>
        <member name="F:dotnetCHARTING.BackgroundMode.ImageStretch">
            <summary>Stretches an image across the background surface.</summary>
        </member>
        <member name="F:dotnetCHARTING.BackgroundMode.ImageTile">
            <summary>Tiles an image on a background surface.</summary>
        </member>
        <member name="F:dotnetCHARTING.BackgroundMode.Gradient">
            <summary>Draws a 2 color gradient.</summary>
        </member>
        <member name="F:dotnetCHARTING.BackgroundMode.Brush">
            <summary>Uses the Background.Brush object to fill the surface.</summary>
        </member>
        <member name="T:dotnetCHARTING.BoxCorner">
            <summary>Specifies a box edge style.</summary>
        </member>
        <member name="F:dotnetCHARTING.BoxCorner.Square">
            <summary>The edge is a corner.</summary>
        </member>
        <member name="F:dotnetCHARTING.BoxCorner.Cut">
            <summary>The edge is cut.</summary>
        </member>
        <member name="F:dotnetCHARTING.BoxCorner.Round">
            <summary>The edge is rounded.</summary>
        </member>
        <member name="T:dotnetCHARTING.Calculation">
            <summary>Specifies a calculation to be performed on a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.Sum">
            <summary>Calculates the sum of a series or series collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.Mean">
            <summary>Calculates the mean of a series or series collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.Median">
            <summary>Calculates the median of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.Mode">
            <summary>Calculates the mode of a series or series collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.Average">
            <summary>Calculates the average of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.Minimum">
            <summary>Calculates the minimum of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.Maximum">
            <summary>Calculates the maximum of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.RunningSum">
            <summary>Calculates a running sum of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.RunningMean">
            <summary>Calculates a running mean of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.RunningMedian">
            <summary>Calculates a running median of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.RunningMode">
            <summary>Calculates a running mode of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.RunningAverage">
            <summary>Calculates a running average of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.RunningMinimum">
            <summary>Calculates a running minimum of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.RunningMaximum">
            <summary>Calculates a running maximum of a series or series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.TrendLineLinear">
            <summary>Calculates the linear regression of y values within a series
collection.</summary>
        </member>
        <member name="F:dotnetCHARTING.Calculation.TrendLineLinearScatter">
            <summary>Calculates the linear regression of x and y values within a
series collection.</summary>
        </member>
        <member name="T:dotnetCHARTING.ChartAreaLayoutMode">
            <summary>Specifies the positioning behavior of multiple chart areas on
a single chart image.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartAreaLayoutMode.VerticalPriority">
            <summary>    Specifies that chart areas layout will be based on axis
    relationships where x axes will be matched before chart areas
    are added based on y axis relationships.
    ChartAreaLayoutRules.EnforceOppositeAxisAlignment affects
    this setting.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartAreaLayoutMode.HorizontalPriority">
            <summary>    Specifies that chart areas layout will be based on axis
    relationships where y axes will be matched before chart areas
    are added based on x axis relationships.
    ChartAreaLayoutRules.EnforceOppositeAxisAlignment affects
    this setting.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartAreaLayoutMode.VerticalSmart">
            <summary>Specifies that chart areas will be laid out vertically in a
single column and arranged based on x axis relationships.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartAreaLayoutMode.HorizontalSmart">
            <summary>Specifies that chart areas will be laid out horizontally in a
single row and arranged based on x axis relationships.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartAreaLayoutMode.Vertical">
            <summary>Specifies that chart areas will be laid out vertically in a
single column in the order they were added.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartAreaLayoutMode.Horizontal">
            <summary>Specifies that chart areas will be laid out horizontally in a
single row in the order they were added.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartAreaLayoutMode.Custom">
            <summary>Specifies that chart areas will be laid out in a grid matrix
based on ChartArea.GridPosition.</summary>
        </member>
        <member name="T:dotnetCHARTING.ChartType">
            <summary>Represents the chart type of a chart.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Combo">
            <summary>The combo chart supports virtually every feature. This chart
is capable of being every chart you want it to be based on settings
of other objects like series and axes. The x axis is a label axis
and the y axis is a value axis.



Element values used

YValue, YValueStart, YDateTime, YDateTimeStart, Complete</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.ComboSideBySide">
            <summary>Each series is drawn side by side. This chart doesn't support
stacked axis scales and unclustered columns. The x axis is a label
axis and the y axis is a value axis.



Element values used

YValue, YValueStart, YDateTime, YDateTimeStart, Complete</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.ComboHorizontal">
            <summary>This chart supports the bar and cylinder series types. The y
axis is a label axis and the x axis is a value axis.



Element values used

YValue, YValueStart, YDateTime, YDateTimeStart, Complete</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Pie">
            <summary>The pie chart draws a single pie where each slice represents
a series.

Most applications would use Pies rather than Pie



Element values used

YValue</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Pies">
            <summary>Multiple pies where each pie is a series and each slice is an
element (suitable for most applications). Pies may also be drawn as
donuts. Most applications would use Pies rather than Pie. Pies does
not support Series.Palette.



Element values used

YValue</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Donut">
            <summary>See Pie.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Donuts">
            <summary>See Pies.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Radar">
            <summary>Draws a single radar. The time scale is not supported by the
radar graph.



Element values used

YValue</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Radars">
            <summary>Draws multiple radars where each radar is a series. The time
scale is not supported by radar graph.



Element values used

YValue</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Scatter">
            <summary>Draws scattered data. Markers, lines, and splines are
supported.



Element values used

YValue, YDateTime, XValue, XDateTime</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Bubble">
            <summary>Draws scattered data. Markers, lines, and splines are
supported. Data Used: YValue, YDateTime, XValue, XDateTime</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Financial">
            <summary>Only 3 axes exist for this chart, price, volume and x axis.
No more axes can be bound to series but you can calculate as many
axes as you would like. HLC Charts can be achieved by providing a
high, low, and close but leaving open equal double.NaN.



Element values used

Open, High, Low, Close, Volume</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Gantt">
            <summary>See ComboHorizontal.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Gauges">
            <summary>Draws a gauge for each series. Each element represents a
needle.

Element values used
YValue</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Map">
            <summary>Draws a map from a shapefile or ecw image.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.MultipleGrouped">
            <summary>Draws funnels that are laid out on the chart similar to
Pie.</summary>
        </member>
        <member name="F:dotnetCHARTING.ChartType.Multiple">
            <summary>Draws funnels that are laid out on the chart similar to
gauges or radars.</summary>
        </member>
        <member name="T:dotnetCHARTING.DataProviderType">
            <summary>Specifies a database type.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataProviderType.MsSql">
            <summary>MS SQL database.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataProviderType.OleDb">
            <summary>OleDb Connection</summary>
        </member>
        <member name="F:dotnetCHARTING.DataProviderType.MsAccess">
            <summary>Microsoft Access database.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataProviderType.MySql">
            <summary>MySql database.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataProviderType.Oracle">
            <summary>Oracle database.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataProviderType.MsOracle">
            <summary>Microsoft oracle provider.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataProviderType.Odbc">
            <summary>Odbc connection.</summary>
        </member>
        <member name="T:dotnetCHARTING.DataSourceType">
            <summary>Specifies a
DataSource
type to split the parent
DataSource
into.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataSourceType.None">
            <summary>Specifies no type</summary>
        </member>
        <member name="F:dotnetCHARTING.DataSourceType.Element">
            <summary>Specifies an
Element
data source type.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataSourceType.Series">
            <summary>Specifies a
Series data
source type.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataSourceType.SeriesCollection">
            <summary>Specifies an
SeriesCollection
data source type.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataSourceType.ElementGroup">
            <summary>Specifies an Element Group data source type. Element groups
are elements in the same
SeriesCollection
that share a name.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataSourceType.AxisMarker">
            <summary>Specifies an
AxisMarker
data source type.</summary>
        </member>
        <member name="F:dotnetCHARTING.DataSourceType.ScaleRange">
            <summary>Specifies a
ScaleRange
data source type.</summary>
        </member>
        <member name="T:dotnetCHARTING.ElementMarkerType">
            <summary>Built in element marker icons.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.None">
            <summary>Does not draw a marker</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.Square">
            <summary>Markers is drawn as a square.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.Triangle">
            <summary>Markers is drawn as a triangle.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.Circle">
            <summary>Markers is drawn as a circle.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.Diamond">
            <summary>Markers is drawn as a diamond.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.FourPointStar">
            <summary>Markers is drawn as a four point star.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.FivePointStar">
            <summary>Markers is drawn as a five point star.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.SixPointStar">
            <summary>Markers is drawn as a six point star.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.SevenPointStar">
            <summary>Markers is drawn as a seven point star.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.Split">
            <summary>Markers is drawn as a financial split.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.ReverseSplit">
            <summary>Markers is drawn as a financial reverse split.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.Merger">
            <summary>Markers is drawn as a financial merger.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.Dividend">
            <summary>Markers is drawn as a financial dividend paid
indicator.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementMarkerType.Spinoff">
            <summary>Markers is drawn as a financial spinoff.</summary>
        </member>
        <member name="T:dotnetCHARTING.ElementValue">
            <summary>Specifies a value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.Name">
            <summary>The name of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.YValue">
            <summary>Y value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.YValueStart">
            <summary>Initial y value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.XValue">
            <summary>X value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.XValueStart">
            <summary>Initial x value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.YDateTime">
            <summary>Y DateTime value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.YDateTimeStart">
            <summary>Initial y DateTime value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.XDateTime">
            <summary>X DateTime value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.XDateTimeStart">
            <summary>Initial x DateTime value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.BubbleSize">
            <summary>Bubble size value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.Complete">
            <summary>Percent completed value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.Open">
            <summary>Financial open price value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.Close">
            <summary>Financial close price value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.High">
            <summary>Financial high price value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.Low">
            <summary>Financial low price value of an element.</summary>
        </member>
        <member name="F:dotnetCHARTING.ElementValue.Volume">
            <summary>Financial trade volumn value of an element.</summary>
        </member>
        <member name="T:dotnetCHARTING.EmptyElementMode">
            <summary>Specifies how empty elements are handled.</summary>
        </member>
        <member name="F:dotnetCHARTING.EmptyElementMode.None">
            <summary>Empty elements are not shown or marked leaving gaps.</summary>
        </member>
        <member name="F:dotnetCHARTING.EmptyElementMode.Ignore">
            <summary>Completes empty areas by filling the line, or area. Columns
will behave the same as EmptyElementMode.None.</summary>
        </member>
        <member name="F:dotnetCHARTING.EmptyElementMode.Fill">
            <summary>Fills the empty area with EmptyElement properties of a
series.</summary>
        </member>
        <member name="F:dotnetCHARTING.EmptyElementMode.TreatAsZero">
            <summary>Empty elements will have the value of 0 and not be marked as
empty.</summary>
        </member>
        <member name="T:dotnetCHARTING.FieldType">
            <summary>Specifies a database field data type.</summary>
        </member>
        <member name="F:dotnetCHARTING.FieldType.Text">
            <summary>String data type.</summary>
        </member>
        <member name="F:dotnetCHARTING.FieldType.Date">
            <summary>Date data type.</summary>
        </member>
        <member name="F:dotnetCHARTING.FieldType.Number">
            <summary>Number data type.</summary>
        </member>
        <member name="F:dotnetCHARTING.FieldType.Currency">
            <summary>Currency data type.</summary>
        </member>
        <member name="F:dotnetCHARTING.FieldType.Double">
            <summary>Double data type.</summary>
        </member>
        <member name="F:dotnetCHARTING.FieldType.Bool">
            <summary>Bool data type.</summary>
        </member>
        <member name="F:dotnetCHARTING.FieldType.LongNumber">
            <summary>LongNumber data type.</summary>
        </member>
        <member name="F:dotnetCHARTING.FieldType.BigInt">
            <summary>BigInt data type.</summary>
        </member>
        <member name="T:dotnetCHARTING.HatchStylePalette">
            <summary>Specifies a pre-defined hatch style palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.HatchStylePalette.None">
            <summary>No hatch style palette is specified.</summary>
        </member>
        <member name="F:dotnetCHARTING.HatchStylePalette.One">
            <summary>Palette one.</summary>
        </member>
        <member name="F:dotnetCHARTING.HatchStylePalette.Two">
            <summary>Palette two.</summary>
        </member>
        <member name="F:dotnetCHARTING.HatchStylePalette.Three">
            <summary>Palette three.</summary>
        </member>
        <member name="F:dotnetCHARTING.HatchStylePalette.Random">
            <summary>A random palette.</summary>
        </member>
        <member name="T:dotnetCHARTING.HitTestType">
            <summary>Defines the type of object described by a HitTestInfo
class.</summary>
        </member>
        <member name="F:dotnetCHARTING.HitTestType.None">
            <summary>No object.</summary>
        </member>
        <member name="F:dotnetCHARTING.HitTestType.Element">
            <summary>An element.</summary>
        </member>
        <member name="F:dotnetCHARTING.HitTestType.LegendEntry">
            <summary>A LegendEntry.</summary>
        </member>
        <member name="F:dotnetCHARTING.HitTestType.Label">
            <summary>A Label.</summary>
        </member>
        <member name="F:dotnetCHARTING.HitTestType.Annotation">
            <summary>An Annotation.</summary>
        </member>
        <member name="F:dotnetCHARTING.HitTestType.TitleBox">
            <summary>A TitleBox</summary>
        </member>
        <member name="F:dotnetCHARTING.HitTestType.LegendBox">
            <summary>A LegendBox</summary>
        </member>
        <member name="F:dotnetCHARTING.HitTestType.XAxis">
            <summary>An X Axis.</summary>
        </member>
        <member name="F:dotnetCHARTING.HitTestType.YAxis">
            <summary>A Y Axis.</summary>
        </member>
        <member name="F:dotnetCHARTING.HitTestType.ChartArea">
            <summary>A ChartArea.</summary>
        </member>
        <member name="T:dotnetCHARTING.ImageFormat">
            <summary>Specifies file save format.</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Png">
            <summary>Saves an image using the W3C Portable Network Graphics (PNG)
image format.</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Bmp">
            <summary>Saves an image as a bitmap (BMP).</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Jpg">
            <summary>Saves an image using the Joint Photographic Experts Group
(JPEG) image format.</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Emf">
            <summary>Saves an image using the enhanced Windows metafile (EMF)
image format.</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Wmf">
            <summary>Saves an image using the Windows metafile (WMF) image
format.</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Tif">
            <summary>Saves an image using the Tag Image File Format (TIFF) image
format.</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Swf">
            <summary>Saves an image as an Swf flash movie.</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Pdf">
            <summary>Saves an image as a Pdf file.</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Svg">
            <summary>Saves an image as an Svg file.</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Xaml">
            <summary>Saves an image as an Xaml file.</summary>
        </member>
        <member name="F:dotnetCHARTING.ImageFormat.Svgz">
            <summary>Saves an image as a compressed Svg file.</summary>
        </member>
        <member name="T:dotnetCHARTING.LabelAlignment">
            <summary>Specifies alignment of a label.</summary>
        </member>
        <member name="F:dotnetCHARTING.LabelAlignment.Automatic">
            <summary>Label is aligned automatically.</summary>
        </member>
        <member name="F:dotnetCHARTING.LabelAlignment.Bottom">
            <summary>Label is bottom aligned.</summary>
        </member>
        <member name="F:dotnetCHARTING.LabelAlignment.Center">
            <summary>Label is center aligned.</summary>
        </member>
        <member name="F:dotnetCHARTING.LabelAlignment.Top">
            <summary>Label is top aligned.</summary>
        </member>
        <member name="F:dotnetCHARTING.LabelAlignment.OutsideBottom">
            <summary>Label is below an object such as a column.</summary>
        </member>
        <member name="F:dotnetCHARTING.LabelAlignment.OutsideTop">
            <summary>Label is above an object such as a column.</summary>
        </member>
        <member name="T:dotnetCHARTING.LegendBoxPosition">
            <summary>Specifies the position of the legend box.</summary>
        </member>
        <member name="F:dotnetCHARTING.LegendBoxPosition.Top">
            <summary>The legend box is rendered at the top right side of the
graph.</summary>
        </member>
        <member name="F:dotnetCHARTING.LegendBoxPosition.Middle">
            <summary>The legend box is rendered at the middle right side of the
graph.</summary>
        </member>
        <member name="F:dotnetCHARTING.LegendBoxPosition.Bottom">
            <summary>The legend box is rendered at the bottom right side of the
graph.</summary>
        </member>
        <member name="F:dotnetCHARTING.LegendBoxPosition.BottomMiddle">
            <summary>The legend box is rendered at the bottom middle side of the
graph.</summary>
        </member>
        <member name="F:dotnetCHARTING.LegendBoxPosition.None">
            <summary>The legend box is now visible.</summary>
        </member>
        <member name="T:dotnetCHARTING.LegendEntryHeaderMode">
            <summary>Specifies a header mode for element entries.</summary>
        </member>
        <member name="F:dotnetCHARTING.LegendEntryHeaderMode.None">
            <summary>No effect.</summary>
        </member>
        <member name="F:dotnetCHARTING.LegendEntryHeaderMode.RepeatOnEachColumn">
            <summary>Forces the LegendEntry to be repeated at the top of each
column in multi-column legend boxes.</summary>
        </member>
        <member name="F:dotnetCHARTING.LegendEntryHeaderMode.StartNewColumn">
            <summary>Causes the LegendEntry to start a new column.</summary>
        </member>
        <member name="T:dotnetCHARTING.LimitMode">
            <summary>Controls the type of limitation in
Limit
or
SplitByLimit
properties.</summary>
        </member>
        <member name="F:dotnetCHARTING.LimitMode.Top">
            <summary>Keep only top Limit values.</summary>
        </member>
        <member name="F:dotnetCHARTING.LimitMode.Bottom">
            <summary>Keep only bottom Limit values.</summary>
        </member>
        <member name="F:dotnetCHARTING.LimitMode.ExcludeTop">
            <summary>Remove top Limit values.</summary>
        </member>
        <member name="F:dotnetCHARTING.LimitMode.ExcludeBottom">
            <summary>Remove Bottom Limit values.</summary>
        </member>
        <member name="T:dotnetCHARTING.Orientation">
            <summary>Specifies the orientation of an object.</summary>
        </member>
        <member name="F:dotnetCHARTING.Orientation.Left">
            <summary>The object is on the left.</summary>
        </member>
        <member name="F:dotnetCHARTING.Orientation.Right">
            <summary>The object is on the right.</summary>
        </member>
        <member name="F:dotnetCHARTING.Orientation.Top">
            <summary>The object is on top.</summary>
        </member>
        <member name="F:dotnetCHARTING.Orientation.Bottom">
            <summary>The object is on bottom.</summary>
        </member>
        <member name="F:dotnetCHARTING.Orientation.TopLeft">
            <summary>The object ( Usually an annotation) on the upper left hand
side.</summary>
        </member>
        <member name="F:dotnetCHARTING.Orientation.TopRight">
            <summary>The object ( Usually an annotation) on the upper right hand
side.</summary>
        </member>
        <member name="F:dotnetCHARTING.Orientation.BottomRight">
            <summary>The object ( Usually an annotation) on the bottom right hand
side.</summary>
        </member>
        <member name="F:dotnetCHARTING.Orientation.BottomLeft">
            <summary>The object ( Usually an annotation) on the bottom left hand
side.</summary>
        </member>
        <member name="F:dotnetCHARTING.Orientation.None">
            <summary>No orientation is specified.</summary>
        </member>
        <member name="T:dotnetCHARTING.Palette">
            <summary>Specifies a pre-defined palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.None">
            <summary>No Palette</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.One">
            <summary>Palette one.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Two">
            <summary>Palette two.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Three">
            <summary>Palette three.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Four">
            <summary>Palette four.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Five">
            <summary>Palette five.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Random">
            <summary>A random palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Autumn">
            <summary>Autumn palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Bright">
            <summary>Bright palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Lavender">
            <summary>Lavender palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.MidTones">
            <summary>Mid tones palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Mixed">
            <summary>Mixed palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Pastel">
            <summary>Pastel palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Poppies">
            <summary>Poppies palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.Spring">
            <summary>Spring palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.WarmEarth">
            <summary>Warm earth palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.WaterMeadow">
            <summary>Water meadow palette.</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.DarkRainbow">
            <summary>Dark rainbow palette. (Optimized for
ShadingEffectMode.Four)</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.MidRange">
            <summary>Mid range colors. (Optimized for
ShadingEffectMode.Four)</summary>
        </member>
        <member name="F:dotnetCHARTING.Palette.VividDark">
            <summary>Vivid dark palette. (Optimized for
ShadingEffectMode.Four)</summary>
        </member>
        <member name="T:dotnetCHARTING.PieLabelMode">
            <summary>Specifies pie label behavior.</summary>
        </member>
        <member name="F:dotnetCHARTING.PieLabelMode.Inside">
            <summary>Labels must be inside the pie, if they dont fit they will not
be visible.</summary>
        </member>
        <member name="F:dotnetCHARTING.PieLabelMode.Outside">
            <summary>Labels are drawn outside the pie with a line pointing to the
slice it represents.</summary>
        </member>
        <member name="F:dotnetCHARTING.PieLabelMode.Automatic">
            <summary>If labels fit inside a slice they are drawn there otherwise
they are drawn outside with a line pointing to the slice it
represents.</summary>
        </member>
        <member name="T:dotnetCHARTING.RadarLabelMode">
            <summary>Specifies how tick labels behave on a radar graph.</summary>
        </member>
        <member name="F:dotnetCHARTING.RadarLabelMode.None">
            <summary>The labels are not visible.</summary>
        </member>
        <member name="F:dotnetCHARTING.RadarLabelMode.Normal">
            <summary>The labels are drawn horizontally next to the tick
mark.</summary>
        </member>
        <member name="F:dotnetCHARTING.RadarLabelMode.Angled">
            <summary>The labels are angled based on the tick mark angle.</summary>
        </member>
        <member name="F:dotnetCHARTING.RadarLabelMode.Inside">
            <summary>The label is on the right side of the tick mark and angled to
touch the top of the grid. The label will be within the radar
grid.</summary>
        </member>
        <member name="F:dotnetCHARTING.RadarLabelMode.Outside">
            <summary>The label is on the right side of the tick mark and angled to
lie on top of the grid. The label will be outside the radar
grid.</summary>
        </member>
        <member name="T:dotnetCHARTING.RadarMode">
            <summary>Specifies the behavior of the x axis on a circular graph such
as radar.</summary>
        </member>
        <member name="F:dotnetCHARTING.RadarMode.Spider">
            <summary>The x axis tick marks are connected by straight lines
resembling a spider web.</summary>
        </member>
        <member name="F:dotnetCHARTING.RadarMode.Polar">
            <summary>The x axis ticks marks are connected by arcs completing a
circle around the chart. Connected data points such as lines will
have data points interpolated around the arc.</summary>
        </member>
        <member name="T:dotnetCHARTING.Scale">
            <summary>Indicates the scale of an axis.</summary>
        </member>
        <member name="F:dotnetCHARTING.Scale.Normal">
            <summary>The normal scale will always show 0 on the chart.</summary>
        </member>
        <member name="F:dotnetCHARTING.Scale.Range">
            <summary>The axis will start and end shortly outside the range of
element values.</summary>
        </member>
        <member name="F:dotnetCHARTING.Scale.Logarithmic">
            <summary>Logarithmic axis scale.</summary>
        </member>
        <member name="F:dotnetCHARTING.Scale.Time">
            <summary>Time axis scale.</summary>
        </member>
        <member name="F:dotnetCHARTING.Scale.Stacked">
            <summary>Similar to Normal but elements are stacked
on top of each other.</summary>
        </member>
        <member name="F:dotnetCHARTING.Scale.FullStacked">
            <summary>Elements are stacked and each stack is equal to 100.</summary>
        </member>
        <member name="F:dotnetCHARTING.Scale.LogarithmicStacked">
            <summary>Similar to Logarithmic but elements are
stacked on top of each other.</summary>
        </member>
        <member name="T:dotnetCHARTING.ScaleBreakStyle">
            <summary>Specifies how a scale break is drawn on a chart.</summary>
        </member>
        <member name="F:dotnetCHARTING.ScaleBreakStyle.None">
            <summary>The scale break is not accentuated in any way.</summary>
        </member>
        <member name="F:dotnetCHARTING.ScaleBreakStyle.ZigZag">
            <summary>A gap with a zig zag is drawn at the scale break
position.</summary>
        </member>
        <member name="F:dotnetCHARTING.ScaleBreakStyle.Gap">
            <summary>A gap is drawn at the scale break position.</summary>
        </member>
        <member name="F:dotnetCHARTING.ScaleBreakStyle.Line">
            <summary>A line is drawn at the scale break position.</summary>
        </member>
        <member name="T:dotnetCHARTING.SeriesType">
            <summary>Specifies how a series will be shown on the chart.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.Marker">
            <summary>Draws elements as element markers.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.Line">
            <summary>Draws the series as a line.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.Spline">
            <summary>Draws the series as a spline.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.AreaLine">
            <summary>Draws the series as an area line.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.Column">
            <summary>Draws the series as a bar.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.Cylinder">
            <summary>Draws the series as a cylinder.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.Bar">
            <summary>See Column.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.Bubble">
            <summary>Draws the series elements as bubbles.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.AreaSpline">
            <summary>Draws the series as an area spline.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.Pyramid">
            <summary>Draws the series as a four point pyramid.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.Cone">
            <summary>Draws the series as a cone.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesType.BubbleShape">
            <summary>Draws the series as a shape, based on the element's ShapeType
property.</summary>
        </member>
        <member name="T:dotnetCHARTING.SeriesTypeFinancial">
            <summary>Specifies how a financial series will be shown on the
chart.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeFinancial.CandleStick">
            <summary>Draws the series with candle sticks.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeFinancial.Bar">
            <summary>Draws the series with bars.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeFinancial.Open">
            <summary>Draws the opening price as a line.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeFinancial.Close">
            <summary>Draws the closing price as a line.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeFinancial.High">
            <summary>Draws the high price as a line.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeFinancial.Low">
            <summary>Draws the low price as a line.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeFinancial.HighLowArea">
            <summary>Draws a range area of highs and lows.</summary>
        </member>
        <member name="T:dotnetCHARTING.SeriesTypeMultiple">
            <summary>Specifies how a multiple chart type series will be shown on
the chart.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeMultiple.FunnelCone">
            <summary>Draws the series as a funnel cone.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeMultiple.FunnelPyramid">
            <summary>Draws the series as a funnel pyramid.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeMultiple.Cone">
            <summary>Draws the series as a cone.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeMultiple.Pyramid">
            <summary>Draws the series as a pyramid.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeMultiple.Pie">
            <summary>Draws the series as a pie.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeMultiple.Gauge">
            <summary>Draws the series as a gauge.</summary>
        </member>
        <member name="F:dotnetCHARTING.SeriesTypeMultiple.StackedBubble">
            <summary>Draws the series as a stacked bubble.</summary>
        </member>
        <member name="T:dotnetCHARTING.ShadingEffectMode">
            <summary>Specifies a shading mode.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShadingEffectMode.None">
            <summary>No shading is applied.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShadingEffectMode.One">
            <summary>Shading style One.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShadingEffectMode.Two">
            <summary>Shading style Two.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShadingEffectMode.Three">
            <summary>Shading style Three.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShadingEffectMode.Four">
            <summary>Shading style Four.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShadingEffectMode.Five">
            <summary>Shading style Five.</summary>
        </member>
        <member name="T:dotnetCHARTING.ShapeType">
            <summary>Specifies how a shape bubble will be drawn.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.None">
            <summary>No shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Triangle">
            <summary>Triangle shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Cube">
            <summary>Cube shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Pentagon">
            <summary>Pentagon shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Hexagon">
            <summary>Hexagon shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Heptagon">
            <summary>Heptagon shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Octagon">
            <summary>Octagon shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Nonagon">
            <summary>Nonagon shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Decagon">
            <summary>Decagon shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.FivePointStar">
            <summary>Five Point Star shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.SixPointStar">
            <summary>Six Point Star shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.SevenPointStar">
            <summary>Seven Point Star shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.EightPointStar">
            <summary>Eight Point Star shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.ArrowUp">
            <summary>Arrow up shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.ArrowDown">
            <summary>Arrow down shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.ArrowLeft">
            <summary>Arrow left shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.ArrowRight">
            <summary>Arrow right shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Refresh">
            <summary>Refresh shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Heart">
            <summary>Hear shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Ribbon">
            <summary>Ribbon shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Zap">
            <summary>Zap shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Trophy">
            <summary>Trophy shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Chat">
            <summary>Chat bubbles shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Peace">
            <summary>Peace shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.ThumbsUp">
            <summary>Thumbs up shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.ThumbsDown">
            <summary>Thumbs down shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.PointLeft">
            <summary>Point left shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.PointRight">
            <summary>Point right shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.PointUp">
            <summary>Point up shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.PointDown">
            <summary>Point down shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Hand">
            <summary>Hand shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Flag">
            <summary>Flag shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Plane">
            <summary>Plane shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Drop">
            <summary>Drop shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Flake">
            <summary>Flake shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Hourglass">
            <summary>Hourglass shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Mouse">
            <summary>Mouse shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Folder">
            <summary>Folder shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Candle">
            <summary>Candle shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Quote">
            <summary>Quote shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Bell">
            <summary>Bell shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Clover">
            <summary>Clover shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.X">
            <summary>X shape.</summary>
        </member>
        <member name="F:dotnetCHARTING.ShapeType.Check">
            <summary>Check shape.</summary>
        </member>
        <member name="T:dotnetCHARTING.SubValueType">
            <summary>Specifies the how a sub value is drawn.</summary>
        </member>
        <member name="F:dotnetCHARTING.SubValueType.ErrorBar">
            <summary>Draws a traditional error bar. The width of the cap line is
determined by SubValue.Line.Length. If not specified it is
dynamically determined based on the element size.</summary>
        </member>
        <member name="F:dotnetCHARTING.SubValueType.Marker">
            <summary>Draws a marker at the value position of the SubValue. Two
markers are drawn then the SubValue represents a range.</summary>
        </member>
        <member name="F:dotnetCHARTING.SubValueType.Line">
            <summary>Same as the error bar except only the cap lines are
drawn.</summary>
        </member>
        <member name="T:dotnetCHARTING.SynchronizeScaleMode">
            <summary>Specifies an axis scale synchronization mode between two or
more axes.</summary>
        </member>
        <member name="F:dotnetCHARTING.SynchronizeScaleMode.Origin">
            <summary>Synchronizes axes to match the axis origins. The origin is
the position on a numeric axis where the value is zero (0). This
mode does not apply to time axes.</summary>
        </member>
        <member name="F:dotnetCHARTING.SynchronizeScaleMode.Full">
            <summary>Synchronizes the complete axis scale (high, and low).</summary>
        </member>
        <member name="F:dotnetCHARTING.SynchronizeScaleMode.High">
            <summary>Synchronizes the high range values of multiple axes.</summary>
        </member>
        <member name="F:dotnetCHARTING.SynchronizeScaleMode.Low">
            <summary>Synchronizes the low range values of multiple axes.</summary>
        </member>
        <member name="T:dotnetCHARTING.TickLabelMode">
            <summary>Specifies how tick labels are laid out.</summary>
        </member>
        <member name="F:dotnetCHARTING.TickLabelMode.Automatic">
            <summary>Specifies that the best mode is automatically
determined.</summary>
        </member>
        <member name="F:dotnetCHARTING.TickLabelMode.Angled">
            <summary>Specifies that labels are angled. Only applies to x
axes.</summary>
        </member>
        <member name="F:dotnetCHARTING.TickLabelMode.Normal">
            <summary>Specifies that labels are drawn horizontally on a single
line. If labels will overlap with this setting, they will
automatically switch to angled.</summary>
        </member>
        <member name="F:dotnetCHARTING.TickLabelMode.Wrapped">
            <summary>Specifies that labels are drawn wrapping horizontally. If
labels will overlap with this setting, they will automatically
switch to angled.</summary>
        </member>
        <member name="T:dotnetCHARTING.TimeInterval">
            <summary>Specifies a time interval.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Minutes">
            <summary>Specifies minutes.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Hours">
            <summary>Specifies hours.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Days">
            <summary>Specifies days.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Weeks">
            <summary>Specifies weeks.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Months">
            <summary>Specifies months.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Quarters">
            <summary>Specifies quarters (3 months).</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Years">
            <summary>Specifies years.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Hour">
            <summary>Specifies hour by minute.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Day">
            <summary>Specifies day by hour.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Week">
            <summary>Specifies week by day.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Month">
            <summary>Specifies month by day.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Quarter">
            <summary>Specifies year by quarter (3 months).</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Year">
            <summary>Specifies year by months.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.None">
            <summary>Specifies no time interval.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Seconds">
            <summary>Specifies seconds.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Milliseconds">
            <summary>Specified one millisecond.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Second">
            <summary>Specifies second.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeInterval.Minute">
            <summary>Specifies minute by seconds.</summary>
        </member>
        <member name="T:dotnetCHARTING.TimeScaleLabelMode">
            <summary>Specifies the single value time label automation mode.</summary>
            <remarks>    This feature automates choosing different format strings
    and axis ticks for particular instances in time. These time
    instance attributes can be modified through the
    
    Axis.TimeLabelAutomationMode property.
    (Tutorial)
    See:
    Getting Started / General Tutorials
    / Axis Tutorials / Axis Ticks
    / Axis Time Label Automation</remarks>
        </member>
        <member name="F:dotnetCHARTING.TimeScaleLabelMode.Default">
            <summary>Specifies no time label automation. Only the Axis.DefaultTick
and Axis.FormatString will be used.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeScaleLabelMode.Hidden">
            <summary>Specifies hidden time label mode. Single value time labels
will not be shown.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeScaleLabelMode.Dynamic">
            <summary>Specifies time instance specific label automation mode. Axis
ticks will use a format string and axis tick relevant to the
instance in time they represent.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeScaleLabelMode.Smart">
            <summary>Specifies smart time label automation. Similar to specific
except the first tick will indicate the instance in time and take
it's default value from the axis default tick.</summary>
        </member>
        <member name="T:dotnetCHARTING.TimeScaleLabelRangeMode">
            <summary>Specifies the range value time label automation mode.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeScaleLabelRangeMode.Default">
            <summary>Range time ticks will not be generated unless the time
intervals are specified in
TimeScaleLabelInfo.RangeIntervals.</summary>
        </member>
        <member name="F:dotnetCHARTING.TimeScaleLabelRangeMode.Dynamic">
            <summary>    Range time ticks are generated based on dynamically
    determined intervals.
    If time intervals are specified in
    TimeScaleLabelInfo.RangeIntervals this mode will behave like
    Default mode.</summary>
        </member>
        <member name="T:dotnetCHARTING.TitleBoxPosition">
            <summary>Specifies the title box position.</summary>
        </member>
        <member name="F:dotnetCHARTING.TitleBoxPosition.None">
            <summary>Title box not drawn.</summary>
        </member>
        <member name="F:dotnetCHARTING.TitleBoxPosition.Left">
            <summary>Title box is left aligned.</summary>
        </member>
        <member name="F:dotnetCHARTING.TitleBoxPosition.Center">
            <summary>Title box is centered.</summary>
        </member>
        <member name="F:dotnetCHARTING.TitleBoxPosition.Right">
            <summary>Title box is right aligned.</summary>
        </member>
        <member name="F:dotnetCHARTING.TitleBoxPosition.Full">
            <summary>Title box is stretched across the graph area ( Text is
centered ).</summary>
        </member>
        <member name="F:dotnetCHARTING.TitleBoxPosition.FullWithLegend">
            <summary>Title box is stretched across the graph area ( Text is left
aligned, legend right aligned ).</summary>
        </member>
        <member name="T:dotnetCHARTING.TruncationMode">
            <summary>Specifies how to trim characters from a string that exceeds a
maximum number of characters.</summary>
        </member>
        <member name="F:dotnetCHARTING.TruncationMode.Start">
            <summary>The end of a string is removed until the specified number of
characters remains. (ABCD..)</summary>
        </member>
        <member name="F:dotnetCHARTING.TruncationMode.Middle">
            <summary>The start and end of a string is removed until the specified
number of characters remains. (..EFGH..)</summary>
        </member>
        <member name="F:dotnetCHARTING.TruncationMode.End">
            <summary>The start of a string is removed until the specified number
of characters remains. (..IJKL)</summary>
        </member>
        <member name="F:dotnetCHARTING.TruncationMode.StartEnd">
            <summary>The middle of a string is removed until the specified number
of characters remains (ABCD..IJKL)</summary>
        </member>
        <member name="F:dotnetCHARTING.TruncationMode.None">
            <summary>No trimming is performed.</summary>
        </member>
        <member name="T:dotnetCHARTING.LabelOverride">
            <summary>Defines a string find and replace pair used by Axis objects
to manipulate tick labels.</summary>
            <remarks>The key must match the whole label string not just a part of
it.</remarks>
        </member>
        <member name="M:dotnetCHARTING.LabelOverride.#ctor">
            <summary>Initialize a new case insensitive instance of the
LabelOverride class.</summary>
        </member>
        <member name="M:dotnetCHARTING.LabelOverride.#ctor(System.String,System.String)">
            <summary>Initialize a new case insensitive instance of the
LabelOverride class.</summary>
            <param name="key">String to override.</param>
            <param name="val">String to override the key with.</param>
        </member>
        <member name="M:dotnetCHARTING.LabelOverride.#ctor(System.String,System.String,System.Boolean)">
            <summary>Initialize a new instance of the LabelOverride class.</summary>
            <param name="key">String to override.</param>
            <param name="val">String to override the key with.</param>
            <param name="ignoreCase">Specifies whether the key is case sensitive.</param>
        </member>
        <member name="F:dotnetCHARTING.LabelOverride.IgnoreCase">
            <summary>Specifies whether the key is case sensitive.</summary>
        </member>
        <member name="F:dotnetCHARTING.LabelOverride.Key">
            <summary>String to override.</summary>
        </member>
        <member name="F:dotnetCHARTING.LabelOverride.Value">
            <summary>String to override the key with.</summary>
        </member>
        <member name="T:dotnetCHARTING.Annotation">
            <summary>Encapsulates a dotnetCHARTING.Box object with a position,
data source, and hot spot functionality.</summary>
            <remarks>Annotations can either be instantiated for an Element or
added to the Chart.Annotation collection. When attached to an
element, the annotation will follow the element's position (unless
specified) and have a spike indicating which element it's referring
to.

When an annotation does not have a size or any text specified and
it's Background has an image, the size is will become that of the
background's image.</remarks>
        </member>
        <member name="M:dotnetCHARTING.Annotation.#ctor">
            <summary>Initializes a new instance of the Annotation class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Annotation.#ctor">
            <summary>Initializes a new instance of the Annotation class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Annotation.#ctor(dotnetCHARTING.Background)">
            <summary>Initializes a new instance of the Annotation class with a
background. Useful when using an image as the annotation.</summary>
            <param name="background">Background object for the annotation.</param>
        </member>
        <member name="M:dotnetCHARTING.Annotation.#ctor(System.String)">
            <summary>Initializes a new instance of the Annotation class with
text.</summary>
            <param name="text">Annotation text.</param>
        </member>
        <member name="M:dotnetCHARTING.Annotation.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the Annotation class with text
and a tool tip.</summary>
            <param name="text">Annotation text.</param>
            <param name="toolTip">Annotation tool tip.</param>
        </member>
        <member name="M:dotnetCHARTING.Annotation.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the Annotation class with text,
tool tip, and a url.</summary>
            <param name="text">Annotation text.</param>
            <param name="toolTip">Annotation tool tip.</param>
            <param name="url">Annotation url.</param>
        </member>
        <member name="P:dotnetCHARTING.Annotation.DataSource">
            <summary>Gets or sets the DataSource object used to replace tokens in
this annotation's label, tool tip, and URL.</summary>
            <remarks>Data sources include Element, Series, and AxisMarker objects.
When the source is specified, any tokens associated with the source
type may be used.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Annotation.DynamicSize">
            <summary>Gets or sets a value that indicates whether a golden
rectangle is maintained as the shape of this annotation.</summary>
            <remarks>If false, the shape will be determined by the text and will
be drawn on a single line unless Size is specified.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Annotation.Hotspot">
            <summary>Gets or sets the Hotspot of this Annotation.</summary>
        </member>
        <member name="P:dotnetCHARTING.Annotation.Orientation">
            <summary>Gets or sets the annotation's orientation around it's
Position and draws a spike to it.</summary>
            <remarks>If orientation is set to Bottom or Right, BottomRight will be
selected. If orientation is set to Top or Left, TopLeft will be
selected. If the annotation is added to the Chart.Annotations
collection, the default is BottomRight but no spike is
drawn.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Annotation.Position">
            <summary>Gets or sets this annotation's position.</summary>
        </member>
        <member name="P:dotnetCHARTING.Annotation.Size">
            <summary>Gets or sets the annotation's size.</summary>
            <remarks>If the size is not specified, it is determined by DynamicSize
and the size of the specified text.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Annotation.TextAlignmentHorizontal">
            <summary>Gets or sets the horizontal StringAlignment of text in this
in the annotation.</summary>
        </member>
        <member name="P:dotnetCHARTING.Annotation.TextAlignmentVertical">
            <summary>Gets or sets the vertical StringAlignment of text in this in
the annotation.</summary>
        </member>
        <member name="P:dotnetCHARTING.Annotation.ToolTip">
            <summary>Gets or sets this annotation's tool tip.</summary>
        </member>
        <member name="P:dotnetCHARTING.Annotation.URL">
            <summary>Gets or sets this annotation's hotspot url.</summary>
        </member>
        <member name="P:dotnetCHARTING.Annotation.URLTarget">
            <summary>Gets or sets the target URL of this annotation's link.</summary>
        </member>
        <member name="T:dotnetCHARTING.AnnotationCollection">
            <summary>Contains a collection of Annotation objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.AnnotationCollection.#ctor(dotnetCHARTING.Annotation[])">
            <summary>Creates a new instance of AnnotationCollection with the
specified list of Annotation objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.AnnotationCollection.Add">
            <summary>Adds a specified AnnotationCollection to this
collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.AnnotationCollection.Add(dotnetCHARTING.AnnotationCollection)">
            <summary>Adds a specified AnnotationCollection to this
collection.</summary>
            <param name="annotationCollection">The AnnotationCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.AnnotationCollection.Add(dotnetCHARTING.Annotation[])">
            <summary>Adds the specified Annotation objects to this
collection.</summary>
            <param name="annotationList">A list of Annotation objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.AnnotationCollection.Contains(dotnetCHARTING.Annotation)">
            <summary>Determines whether this collection contains a specified
Annotation.</summary>
            <returns>true if the specified Annotation belongs to this collection;
otherwise, false.</returns>
            <param name="annotation">The Annotation to find.</param>
        </member>
        <member name="M:dotnetCHARTING.AnnotationCollection.IndexOf(dotnetCHARTING.Annotation)">
            <summary>Determines the index of a specified Annotation in this
collection.</summary>
            <returns>The zero-based index of the specified Annotation.</returns>
            <param name="annotation">The Annotation to find.</param>
        </member>
        <member name="M:dotnetCHARTING.AnnotationCollection.Insert(System.Int32,dotnetCHARTING.Annotation)">
            <summary>Inserts a Annotation into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the Annotation.</param>
            <param name="annotation">The Annotation to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.AnnotationCollection.Remove(dotnetCHARTING.Annotation)">
            <summary>Removes a specified Annotation from this collection.</summary>
            <param name="annotation">The Annotation to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.AnnotationCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.Axis">
            <summary>Represents an axis drawn on a ChartArea.</summary>
            <remarks>    The axis object is a powerful class that does the following. 
    
        Defines objects used to draw the axis and fill
        sections of a ChartArea such as grid lines.
        Facilitates tick label text formatting and numerous
        manipulation mechanisms.
        Defines data element layout and order.
        Defines an axis dotnetCHARTING.Scale, range, and tick
        frequency.
        Calculates copies of itself that can perform unit
        conversions between over one thousand defined units, mark
        time ranges with a specified TimeInterval, and manipulate
        each tick label with a specified custom method.
    Axes can behave in 3 different modes. 
    
        
            Mode
            Description
        
        
            Value Axis
            The value axis dynamically displays a
            numeric or DateTime range. Properties such as Scale,
            Interval, TimeInterval and others that relate to ranges
            apply to this type of axis. Using ChartType.Combo, the
            y axis is a value axis, with ChartType.Horizontal the x
            axis is.
        
        
            Label Axis
            The label axis does not display a range of
            values but rather the names of elements or series.
            Using ChartType.Combo, the x axis is a label axis and
            with ChartType.Horizontal the y axis is. Using the
            DataEngine with DataEngine.DateGrouping generates
            elements with a numeric value in Element.YValue and a
            DateTime value in Element.XDateTime. Because the Combo
            chart's x axis is a label axis the date time value
            cannot be shown. To remedy this, the DataEngine also
            populates each element's Name property with a string
            representation of the DateTime value. This allows the x
            axis to show date values but it does not allow the use
            of advanced options such as setting the TimeInterval
            for those dates. To expose this functionality
            ChartType.Scatter must be used because the x axis for
            that chart type acts as a value axis.
        
        
            Calculated Axis
            A calculated or shadow axis is created by
            using of the Axis.Calculate methods and must be added
            to the Chart.AxisCollection collection. It is drawn by
            the original axis and represents the same range but
            displays it in a different way.
        
    </remarks>
        </member>
        <member name="M:dotnetCHARTING.Axis.#ctor">
            <summary>Initializes a new instance of the Axis class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Axis.#ctor">
            <summary>Initializes a new instance of the Axis class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Axis.#ctor(System.String)">
            <summary>Initializes a new instance of the Axis class with a name and
label.</summary>
            <param name="name">Sets the name and label of this axis.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.#ctor(System.String,dotnetCHARTING.ChangeValueDelegate,dotnetCHARTING.Axis)">
            <summary>Initializes a new instance of the Axis class that will
process the tick values of the specified axis based on a custom
method.</summary>
            <remarks>This instance must be added to Chart.AxisCollection. The
specified axis must appear on the chart, otherwise, the new
instance will have no effect when added to
Chart.AxisCollection.</remarks>
            <param name="name">The name and label of this axis.</param>
            <param name="ChangeValue">A delegate used to pass a custom method used for processing
tick values.</param>
            <param name="axisToShadow">The original axis whose tick labels will be processed.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.#ctor(System.String,System.Object,System.Object,dotnetCHARTING.Axis)">
            <summary>Initializes a new instance of the Axis class that will
convert the tick labels of the specified axis to the specified
units.</summary>
            <remarks>This instance must be added to Chart.AxisCollection. The
specified axis must appear on the chart, otherwise, the new
instance will have no effect when added to
Chart.AxisCollection.</remarks>
            <param name="name">The name and label of this axis.</param>
            <param name="fromUnit">Units representing the values of the original axis.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="axisToShadow">The original axis whose tick labels are converted.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.#ctor(System.String,dotnetCHARTING.Scale)">
            <summary>Initializes a new instance of the Axis class with a name,
label, and scale enumeration.</summary>
            <param name="name">Sets the name and label of this axis.</param>
            <param name="scale">Sets the scale of this axis.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.#ctor(System.String,dotnetCHARTING.TimeInterval,dotnetCHARTING.Axis)">
            <summary>Initializes a new instance of the Axis class that will
recalculate time intervals of the specified axis.</summary>
            <remarks>This instance must be added to Chart.AxisCollection. The
specified axis must appear on the chart and use Scale.Time,
otherwise, the new instance will have no effect when added to
Chart.AxisCollection.</remarks>
            <param name="name">The name and label of this axis.</param>
            <param name="timeInterval">A TimeInterval enumaration that specifies the new
TimeInterval for this axis.</param>
            <param name="axisToShadow">An axis to derived from.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.AddCalculatedTick">
            <summary>Adds an dotnetCHARTING.AxisTick with a value based on the
specified dotnetCHARTING.Calculation.</summary>
        </member>
        <member name="M:dotnetCHARTING.Axis.AddCalculatedTick(dotnetCHARTING.Calculation)">
            <summary>Adds an dotnetCHARTING.AxisTick with a value based on the
specified dotnetCHARTING.Calculation.</summary>
            <remarks>The calculation will be based on all the series using this
axis.</remarks>
            <param name="calculation">Calculation to perform.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.AddCalculatedTick(dotnetCHARTING.Calculation,dotnetCHARTING.Series)">
            <summary>Adds an dotnetCHARTING.AxisTick with a value based on the
specified dotnetCHARTING.Calculation.</summary>
            <remarks>The calculation will be based on the specified Series.</remarks>
            <param name="calculation">Calculation to perform.</param>
            <param name="series">Series to perform the calculation on.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.AddCalculatedTick(dotnetCHARTING.Calculation,dotnetCHARTING.SeriesCollection)">
            <summary>Adds an dotnetCHARTING.AxisTick with a value based on the
specified dotnetCHARTING.Calculation.</summary>
            <remarks>The calculation will be based on the specified
SeriesCollection.</remarks>
            <param name="calculation">Calculation to perform.</param>
            <param name="series">SeriesCollection to perform the calculation on.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.AddCalculatedTick(System.String,dotnetCHARTING.Calculation)">
            <summary>Adds an dotnetCHARTING.AxisTick with a value based on the
specified dotnetCHARTING.Calculation using a template for the
resulting label.</summary>
            <remarks>    The calculation will be based on all the series using
    this axis.
    The Value token in the template will be replaced with
    the resulting value.</remarks>
            <param name="labelTemplate">A template for the resulting tick label.</param>
            <param name="calculation">Calculation to perform.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.AddCalculatedTick(System.String,dotnetCHARTING.Calculation,dotnetCHARTING.Series)">
            <summary>Adds an dotnetCHARTING.AxisTick with a value based on the
specified dotnetCHARTING.Calculation using a template for the
resulting label.</summary>
            <remarks>    The calculation will be based on the specified
    Series.
    The Value token in the template will be replaced with
    the resulting value.</remarks>
            <param name="labelTemplate">A template for the resulting tick label.</param>
            <param name="calculation">Calculation to perform.</param>
            <param name="series">Series to perform the calculation on.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.AddCalculatedTick(System.String,dotnetCHARTING.Calculation,dotnetCHARTING.SeriesCollection)">
            <summary>Adds an dotnetCHARTING.AxisTick with a value based on the
specified dotnetCHARTING.Calculation using a template for the
resulting label.</summary>
            <remarks>    The calculation will be based on the specified
    SeriesCollection.
    The Value token in the template will be replaced with
    the resulting value.</remarks>
            <param name="labelTemplate">A template for the resulting tick label.</param>
            <param name="calculation">Calculation to perform.</param>
            <param name="series">SeriesCollection to perform the calculation on.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.AddLabelOverride">
            <summary>Adds a LabelOverride to the LabelOverrides
collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.Axis.AddLabelOverride(System.String,System.String)">
            <summary>Adds a LabelOverride to the LabelOverrides
collection.</summary>
            <param name="Key">The string to look for.</param>
            <param name="Value">The string to replace the key with.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.AddLabelOverride(System.String,System.String,System.Boolean)">
            <summary>Adds a LabelOverride to the LabelOverrides
collection.</summary>
            <param name="Key">The string to look for.</param>
            <param name="Value">The string to replace the key with.</param>
            <param name="IgnoreCase">A Boolean value indicating whether to ignore case for strings
or convert the string to a number for comparison with the key so
'0' will match '0.0'</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.Calculate">
            <summary>Obtains a copy instance of this Axis and processes it's tick
values based on the specified method.</summary>
        </member>
        <member name="M:dotnetCHARTING.Axis.Calculate(System.String,dotnetCHARTING.ChangeValueDelegate)">
            <summary>Obtains a copy instance of this Axis and processes it's tick
values based on the specified method.</summary>
            <returns>A new calculated instance of this axis which must be added to
the Chart.AxisCollection collection.</returns>
            <param name="name">Name of the new axis instance.</param>
            <param name="ChangeValue">A ChangeValueDelegate pointing to a function that will
process the tick labels of the new axis.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.Calculate(System.String,System.Object,System.Object)">
            <summary>Obtains a copy instance of this Axis and performs unit
conversion for it's tick values based on the specified
units.</summary>
            <returns>A new calculated instance of this axis.</returns>
            <param name="name">Name of the new axis.</param>
            <param name="convertFromUnit">Units to convert from.</param>
            <param name="convertToUnit">Units to convert to.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.Calculate(System.String,System.Object,System.Object,System.Boolean)">
            <summary>Obtains a copy instance of this Axis and performs unit
conversion for it's tick values based on the specified
units.</summary>
            <returns>A new calculated instance of this axis.</returns>
            <param name="name">Name of the new axis.</param>
            <param name="convertFromUnit">Unit to convert from.</param>
            <param name="convertToUnit">Unit to convert to.</param>
            <param name="refreshScale">If true, the axis ticks will not necessarily match the
original ticks. They will have their own appropriate interval and
be easier to read in many cases.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.Calculate(System.String,dotnetCHARTING.TimeInterval)">
            <summary>Obtains a copy instance of this Axis and recalculates it's
tick values based a specified TimeInterval.</summary>
            <returns>A new instance of the calculated axis.</returns>
            <param name="name">Name of the derived axis.</param>
            <param name="timeInterval">A dotnetCHARTING.TimeInterval enumeration that specifies the
new time interval for the resulting axis.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.Calculate(System.String,dotnetCHARTING.TimeIntervalAdvanced)">
            <summary>Obtains a copy instance of this Axis and recalculates it's
tick values based a specified TimeInterval.</summary>
            <returns>A new instance of the calculated axis.</returns>
            <param name="name">Name of the derived axis.</param>
            <param name="timeIntervalAdvanced">A dotnetCHARTING.TimeIntervalAdvanced class that specifies
the new time interval for the resulting axis.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.Calculate(System.String)">
            <summary>Creates a replica axis object that shadows this axis.</summary>
            <param name="name">Name of the resulting axis.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.Calculate(System.String,System.Boolean)">
            <summary>Creates a replica axis object with a clear values option that
shadows this axis.</summary>
            <returns/>
            <param name="name">Name of the resulting axis.</param>
            <param name="clearValues">Removes the original (automatically generated) axis
ticks.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.Calculate(System.String,System.Boolean,dotnetCHARTING.Orientation)">
            <summary>Creates a replica axis object with an orientation and a value
clearing option that shadows this axis.</summary>
            <returns/>
            <param name="name">Name of the resulting axis.</param>
            <param name="clearValues">Removes the original (automatically generated) axis
ticks.</param>
            <param name="axisOrientation">Orientation of the axis.</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.Clear">
            <summary>Serves as a shortcut to hide this axis.</summary>
            <remarks>    The axis is cleared by setting the following properties: 
    
        

Axis.ClearValues = true;
Axis.TickLine.Length = 0;
Axis.Line.Color = Color.Empty;
Axis.TickLabelPadding = 0;
Axis.Label.Text = "";

    </remarks>
        </member>
        <member name="M:dotnetCHARTING.Axis.GetCoordintates">
            <summary>Gets the coordinates of this axis after the chart is
rendered.</summary>
        </member>
        <member name="M:dotnetCHARTING.Axis.GetValueAtX(System.String)">
            <summary>Returns the value of this X axis at the specified x/y
coordinates.</summary>
            <returns>An object representing the value of the axis at the given
position.</returns>
            <param name="coordinates">A string representing the coordinates of the image. For
example: "100,230"</param>
        </member>
        <member name="M:dotnetCHARTING.Axis.GetValueAtY(System.String)">
            <summary>Returns the value of this Y axis at the specified x/y
coordinates.</summary>
            <returns>An object representing the value of the axis at the given
position.</returns>
            <param name="coordinates">A string representing the coordinates of the image. For
example: "100,230"</param>
        </member>
        <member name="P:dotnetCHARTING.Axis.AlternateGridBackground">
            <summary>Gets or sets a Background object used to fill the area
between every other grid two grid lines.</summary>
            <remarks>To disable this feature, set AlternateGridBackground.Color =
Color.Empty.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.CenterTickMarks">
            <summary>Gets or sets a value that indicates whether axis ticks are
centered above tick labels or drawn between each label.</summary>
            <remarks>When false, Axis.DefaultTick.Line properties are used for all
tick lines.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.ClearValues">
            <summary>Gets or sets a value which indicates whether tick labels are
cleared before LabelOverrides are applied.</summary>
            <remarks>Only the tick labels that are not overridden are
cleared.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.ClusterColumns">
            <summary>Gets or sets a value that indicates whether columns and
cylinders are drawn side by side or front to back.</summary>
            <remarks>(Applies to label axes) When true, columns and cylinders are
drawn side by side.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.CombinedElementsCalculation">
            <summary>Gets or sets the Calculation used when multiple elements on a
quantitative x axis are located at the same x position. If the
elements are columns they will be combined into a single element
using this calculation, otherwise, the original elements are
plotted.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.CultureName">
            <summary>Gets or sets the culture name used for number and date
formatting in conjunction with FormatString.</summary>
            <remarks>The culture name is applied to tick values and data charted
on this axis. See the CultureInfo class for possible names of a
culture.

(This property applies to value axes)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.DefaultMinorTick">
            <summary>Gets or sets the default dotnetCHARTING.AxisTick used for all
generated minor axis ticks.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.DefaultTick">
            <summary>Gets or sets an AxisTick that acts as a vehicle for property
settings that will propagate to all other axis ticks on this
axis.</summary>
            <remarks>The property settings of this object will not overwrite
properties explicitly set for any given AxisTick.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.ExtraTicks">
            <summary>A collection of AxisTick objects added to the axis.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.FormatString">
            <summary>Gets or sets the format string used by this axis.</summary>
            <remarks>Tick labels and labels of elements bound to this axis will be
formatted with this format string.

(This property applies to value axes)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.GenerateElementTicks">
            <summary>Gets or sets a value that indicates whether an AxisTick
object is generated for each element's position on this
axis.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.GridLine">
            <summary>Gets or sets this axis' grid dotnetCHARTING.Line.</summary>
            <remarks>Grid lines are drawn for each tick mark on an axis to the
other side of a ChartArea. To disable grid lines set
GridLine.Color = Color.Empty or Axis.ShowGrid =
false.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.Interval">
            <summary>Gets or sets the numeric tick label interval for this
axis.</summary>
            <remarks>Tick labels will increment by this value starting at
Axis.Minimum and ending at Axis.Maximum if specified. If not set,
the interval is automatically determined based on the data
range.

(Applies to quantitative axes with numeric scales)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.InvertScale">
            <summary>Gets or sets a value that indicates whether the axis scale is
inverted.</summary>
            <remarks>When true the axis ticks will be reversed.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.Label">
            <summary>Gets or sets the axis label.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.LabelMarker">
            <summary>Gets or sets an ElementMarker object used on gauge charts in
place of the axis' label.</summary>
            <remarks>The marker will be positioned between the needle base and the
center of the gauge axis.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.LabelOverrides">
            <summary>A collection of LabelOverride objects.</summary>
            <remarks>LabelOverrides defines a string find and replace pair used to
manipulate tick labels.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.LabelRotate">
            <summary>Gets or sets a value which indicates whether the axis label
of this y axis is facing the tick labels or is facing
away.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.Line">
            <summary>Gets or sets the axis dotnetCHARTING.Line.</summary>
            <remarks>When the origin or 'point of zero' is visible on the axis,
this line is drawn twice and away from the origin in order for line
caps to appear correctly (Line.StartCap, Line.EndCap).</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.LogarithmicBase">
            <summary>Gets or sets the logarithmic base of logarithmic axis scales.
Used only in conjunction with Logarithmic Scales.</summary>
            <remarks>This property is used in conjunction with enumeration members
Scale.Logarithmic and
Scale.LogarithmicStacked.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.Markers">
            <summary>A collection of AxisMarkers used to highlight sections of
this axis.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.Maximum">
            <summary>Gets or sets the upper bounds of this numeric axis'
range.</summary>
            <remarks>Applies to value axes. When not specified, this value is set
relative to the maximum range of the plotted data.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.Minimum">
            <summary>Gets or sets the lower bounds of this numeric axis'
range.</summary>
            <remarks>Applies to value axes. When not specified, this value
defaults to 0. When the range axis scale is used, it will be set
relative to the minimum range of the plotted data.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.MinimumInterval">
            <summary>Gets or sets the numeric minimum interval value.</summary>
            <remarks>This allows you to prevent the axis scales from using
intervals that are smaller than a single unit of your data. For
example a chart showing votes where the maximum value is three may
show intervals at .5, which cant represent any data for your chart.
In this case setting this value to 1 will represent the chart data
better.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.MinorInterval">
            <summary>Gets or sets a numeric value that determines the interval of
minor axis ticks.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.MinorTicksPerInterval">
            <summary>Gets or sets the number of minor axis ticks generated between
major axis ticks.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.MinorTimeIntervalAdvanced">
            <summary>Gets or sets a
TimeIntervalAdvanced
object that determines the interval of minor axis ticks.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.Name">
            <summary>Gets or sets the name of this axis.</summary>
            <remarks>If Axis.Label.Text is not specified this value will be used.
The name is also used to identify the axis with element or series
tokens.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.NumberPercision">
            <summary>See NumberPrecision</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.NumberPrecision">
            <summary>Gets or sets the number of decimal digits of this axis'
format.</summary>
            <remarks>If not specified, this value will be determined
automatically.

(Applies to value axes)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.Orientation">
            <summary>Gets or sets the orientation of this axis.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.OrientationAngle">
            <summary>Gets or sets an angle measured in degrees clockwise from the
y-axis specifying the direction a gauge axis is
oriented.</summary>
            <remarks>When RangeAngle is set, the orientation is the point the
middle of the axis is facing. When SweepAngle is set, the
orientation is the starting angle of the sweep.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.OverlappingCircularLabelSeparator">
            <summary>Gets or sets a text label separator used when two axis ticks
on a radar's x axis overlap.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.Percent">
            <summary>Gets or sets a value that indicates whether this axis
displays percent values.</summary>
            <remarks>When true, a percent sign sign will be added to the end of
tick labels and the Maximum will snap to 100 percent if the plotted
data's range falls between 50 and 100.

(Applies to value axes not using Scale.Time)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.Position">
            <summary>Gets or sets the axis positions when 2 or more axes are drawn
on the same side of a ChartArea.</summary>
            <remarks>Lower values will be drawn closer to the front. This will
also affect the order of series bound the the axes.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.RadarMode">
            <summary>Gets or sets the RadarMode of this axis. Applies when this
object is the x axis of a radar chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.RangeAngle">
            <summary>Gets or sets an angle measured in degrees that is centered at
the orientation angle.</summary>
            <remarks>Example: If the orientation angle is 100 and the range angle
is 100, the axis will begin at 50 degrees and end at 150
degrees.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.ReverseSeries">
            <summary>Gets or sets a value that indicates whether the positions of
series bound to this axis are reversed.</summary>
            <remarks>(Applies to label axes)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.ReverseSeriesPositions">
            <summary>Gets or sets a value that indicates whether the positions of
series bound to this axis are reversed without reversing legend
positions.</summary>
            <remarks>Applies to label axes.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.ReverseStack">
            <summary>Gets or sets a value that indicates whether the order of
stacked elements is reversed.</summary>
            <remarks>Applies to value axes using a stacked axis Scale.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.Scale">
            <summary>Gets or sets the scale of this axis.</summary>
            <remarks>Applies to value axes.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.ScaleBreakCalendarPattern">
            <summary>Gets or sets a calendar pattern object that specifies the
sequence of scale breaks on a time axis.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.ScaleBreakLine">
            <summary>Gets or sets a Line object that is used to outline scale
breaks on this axis.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.ScaleBreaks">
            <summary>A collection of ScaleRange objects that represent
discontinuations in this axis' scale.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.ScaleBreakStyle">
            <summary>Gets or set a ScaleBreakStyle enumeration member that
specifies the scale break style.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.ScaleRange">
            <summary>Gets or sets the scale's high and low values.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.ShowGrid">
            <summary>Gets or sets a value indicating whether grid lines are
drawn.</summary>
            <remarks>If false, no grid lines will be drawn.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.SmartMinorTicks">
            <summary>Gets or sets a value that indicates whether relevant minor
axis ticks will be automatically determined based on major
intervals.</summary>
            <remarks>This property applies to automatic major intervals, not user
defined intervals.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.SmartScaleBreak">
            <summary>Gets or sets a value that indicates whether this axis will
insert a discontinuity into it's scale if appropriate.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.SmartScaleBreakLimit">
            <summary>Gets of sets the maximum number of scale breaks used when
Axis.SmartScaleBreak = true.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.SpacingPercentage">
            <summary>Gets or sets a percentage (0 - 100) which indicates the
spacing between columns, cylinders or groups thereof.</summary>
            <remarks>(Applies to label axes)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.StaticColumnWidth">
            <summary>Gets or sets the static bar width in pixels.</summary>
            <remarks>A value of 0 = Automatic and spacing will be based on the
SpacingPercentage property.

(Applies to label axes)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.SweepAngle">
            <summary>Gets or sets an angle measured in degrees clockwise from the
OrientationAngle to the other side of the axis.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.SynchronizeScale">
            <summary>Gets a class that contains options to synchronize the scale
of this axis with other scales.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.TickLabel">
            <summary>Gets or sets the Label of all tick marks.</summary>
            <remarks>When the axis is a label axis, the tick label's text can be
populated with tokens which represent information about the plotted
data.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.TickLabelAngle">
            <summary>Gets or sets the angle of axis tick labels when they are
angled. Setting this property will not automatically angle tick
labels.</summary>
            <remarks>To force tick label angles, set Axis.TickLabelMode =
Axis.TickLabelMode.Angled.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.TickLabelMode">
            <summary>Gets or sets the label mode that specifies how tick labels
behave.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.TickLabelPadding">
            <summary>Gets or sets a value in pixels indicating the padding between
axis elements such as the axis label, tick labels, and ticks
lines.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.TickLabelSeparatorLine">
            <summary>Gets or sets the a tick label separator. The separator is
automatically used when labels are wrapped. To disable or enable,
set the this line's color to Color.Transparent or a valid
color respectively.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.TickLine">
            <summary>Gets or sets the tick dotnetCHARTING.Line for all ticks
marks.</summary>
            <remarks>Setting TickLine.Length will specify the tick line's
length.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.TickNumberMaximum">
            <summary>Gets or sets the maximum number of tick marks for numeric
axis scales.</summary>
            <remarks>. Three (3) is lowest number of tick marks possible.

(Applies to value axes with numeric scales)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.TimeInterval">
            <summary>Gets or sets the time interval between tick labels when using
the time scale.</summary>
            <remarks>(Applies to quantitative axes using
Scale.Time)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.TimeIntervalAdvanced">
            <summary>Gets or sets a class that represents advanced time interval
settings to supplement the TimeInterval property.</summary>
            <remarks>This property can be used in conjunction with TimeInterval or
override it completley.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.TimePadding">
            <summary>Gets or sets the time padding of this axis.</summary>
            <remarks>(Applies to value axes using Scale.Time)</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.TimeScaleLabels">
            <summary>Gets the TimeLabelAutomationInfo class that encapsulates axis
ticks, format strings, and options of the Time Label Automation
features used to represent particular instances in time.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis.ZeroLine">
            <summary>Gets or sets the grid dotnetCHARTING.Line at the origin or
'point of zero' on this axis.</summary>
            <remarks>Applies to value axes with numeric scales except
Scale.Logarithmic</remarks>
        </member>
        <member name="P:dotnetCHARTING.Axis.ZeroTick">
            <summary>Gets or sets an AxisTick that replaces automatically
generated axis tick with a value of zero (0).</summary>
            <remarks>This tick can be disabled by setting it to null or it can be
overridden by adding a new AxisTick with a value of zero to the
ExtraTicks collection.</remarks>
        </member>
        <member name="T:dotnetCHARTING.Axis+ScaleSync">
            <summary>An extension to the Axis.SynchronizeScale property. Defines
the scale synchronization behavior of an axis.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+ScaleSync.Mode">
            <summary>Gets or sets the SynchronizeScaleMode of this scale sync
class.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+ScaleSync.PreserveScale">
            <summary>Gets or sets a value that determines whether the axis scale
will change when re-drawn on another ChartArea.</summary>
        </member>
        <member name="T:dotnetCHARTING.Axis+TimeScaleLabelInfo">
            <summary>Encapsulates time scale label behavior options in addition to
axis ticks and format strings used instead of the main axis ticks
when they represent particular instances in time.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.DayFormatString">
            <summary>Gets or sets the format string used with DateTime values that
represent the instance in time wher(Shortcut to:
Element.Hotspot.URL)e the day changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.DayTick">
            <summary>Gets or sets the AxisTick used to represent the instance in
time where the day changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.HourFormatString">
            <summary>Gets or sets the format string used with DateTime values that
represent the instance in time where the hour changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.HourTick">
            <summary>Gets or sets the AxisTick used to represent the instance in
time where the hour changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.MaximumRangeRows">
            <summary>Gets of sets the maximum number or rows automatically
generated range ticks will span.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.MillisecondFormatString">
            <summary>Gets or sets the format string used with DateTime values that
represent the instance in time where the millisecond
changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.MillisecondTick">
            <summary>Gets or sets the axis tick used to represent the instance in
time where the millisecond changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.MinuteFormatString">
            <summary>Gets or sets the format string used with DateTimevalues that
represent the instance in time where the minute changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.MinuteTick">
            <summary>Gets or sets the AxisTick used to represent the instance in
time where the minute changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.Mode">
            <summary>Gets or sets the time label automation mode for single value
labels.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.MonthFormatString">
            <summary>Gets or sets the format string used with DateTime values that
represent the instance in time where the Month changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.MonthTick">
            <summary>Gets or sets the AxisTick used to represent the instance in
time where the Month changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.PercentEdgeOverlapToRemoveTicks">
            <summary>Gets or sets a value that indicates whether auto-generated
range ticks are trimmed if more than the specified percentage of
the label lingers outside of the axis bounds.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.QuarterFormatString">
            <summary>Gets or sets the format string used with DateTime labels of
quarter range ticks.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.QuarterTick">
            <summary>Gets or sets the AxisTick used to represent a year's quarter
range ticks.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.RangeIntervals">
            <summary>Gets or sets an TimeIntervalCollection used with modes Range
and AddRange. When no intervals are specified the intervals will be
determined dynamically.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.RangeMode">
            <summary>Gets or sets the time label automation mode for range value
labels.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.SecondFormatString">
            <summary>Gets or sets the format string used with DateTime values that
represent the instance in time where the second changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.SecondTick">
            <summary>Gets or sets the AxisTick used to represent the instance in
time where the second changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.WeekFormatString">
            <summary>Gets or sets the format string used with DateTime labels of
week range ticks.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.WeekTick">
            <summary>Gets or sets the AxisTick used to represent a week range
ticks.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.YearFormatString">
            <summary>Gets or sets the format string used with DateTime values that
represent the instance in time where the year changes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Axis+TimeScaleLabelInfo.YearTick">
            <summary>Gets or sets the AxisTick used to represent the instance in
time where the Year changes.</summary>
        </member>
        <member name="T:dotnetCHARTING.AxisCollection">
            <summary>Contains a collection of Axis objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisCollection.#ctor(dotnetCHARTING.Axis[])">
            <summary>Creates a new instance of AxisCollection with the specified
list of Axis objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisCollection.Add">
            <summary>Adds a specified AxisCollection to this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisCollection.Add(dotnetCHARTING.AxisCollection)">
            <summary>Adds a specified AxisCollection to this collection.</summary>
            <param name="axisCollection">The AxisCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisCollection.Add(dotnetCHARTING.Axis[])">
            <summary>Adds the specified AxisMarker objects to this
collection.</summary>
            <param name="axisList">A list of AxisMarker objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisCollection.Contains(dotnetCHARTING.Axis)">
            <summary>Determines whether this collection contains a specified
Axis.</summary>
            <returns>true if the specified Axis belongs to this collection;
otherwise, false.</returns>
            <param name="axis">The Axis to find.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisCollection.IndexOf(dotnetCHARTING.Axis)">
            <summary>Determines the index of a specified Axis in this
collection.</summary>
            <returns>The zero-based index of the specified Axis.</returns>
            <param name="axis">The Axis to find.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisCollection.Insert(System.Int32,dotnetCHARTING.Axis)">
            <summary>Inserts a Axis into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the Axis.</param>
            <param name="axis">The Axis to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisCollection.Remove(dotnetCHARTING.Axis)">
            <summary>Removes a specified Axis from this collection.</summary>
            <param name="axis">The Axis to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.AxisCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.AxisMarker">
            <summary>Defines styles and positions used to mark a specified section
or point on an axis.</summary>
            <remarks>    Each marker displayed on the chart will also have a LegendEntry
    in the LegendBox.
    
    There are two ways to use AxisMarkers. 
    
        Attach to axis
        An AxisMarker can be added to the Markers collection of any
        axis. In this case, a numeric, time, or text: value or
        range must be specified.
        
        When Value is specified, ValueLow and ValueHigh are both
        set to this value. When ValueLow and ValueHigh are
        equivalent, this AxisMarker is represented by the Line
        object, otherwise, Background fills the range between
        ValueLow and ValueHigh.
        Attach to element
        An AxisMarker is instantiated and passed to the AxisMarker
        property of any element. In such a case, the axis marker is
        drawn on the Axis where the element's name is
        displayed.
    
    See sample
    'AxisMarkerAdvanced.aspx' in the download.</remarks>
        </member>
        <member name="M:dotnetCHARTING.AxisMarker.#ctor">
            <summary>Initialize a new instance of the AxisMarker class.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisMarker.#ctor">
            <summary>Initialize a new instance of the AxisMarker class.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,dotnetCHARTING.Background)">
            <summary>Initialize a new instance of the AxisMarker class with a
label and Background.</summary>
            <param name="label">The Label drawn on the marker. The label trickles down to
this AxisMarker object's LegendEntry.Name property
unless one explicitly specified.</param>
            <param name="bg">dotnetCHARTING.Background which fills the an area of the
chart within a specified range.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,dotnetCHARTING.Background,dotnetCHARTING.CalendarPattern)">
            <summary>Initialize a new instance of the AxisMarker class with a
label, Background object, and calendar pattern.</summary>
            <param name="label">The Label drawn on the marker. The label trickles down to
this AxisMarker object's LegendEntry.Name property
unless one explicitly specified.</param>
            <param name="bg">Background which fills the an area of the chart within the
specified range.</param>
            <param name="calendarPattern">CalendarPattern of this axis marker.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,dotnetCHARTING.Background,System.Object,System.Object)">
            <summary>Initialize a new instance of the AxisMarker class with a
label, Background object, and axis range.</summary>
            <param name="label">The Label drawn on the marker. The label trickles down to
this AxisMarker object's LegendEntry.Name property
unless one explicitly specified.</param>
            <param name="bg">Background which fills the an area of the chart within the
specified range.</param>
            <param name="valueLow">Numeric, DateTime, or Text low axis range.</param>
            <param name="valueHigh">Numeric, DateTime, or Text high axis range..</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,System.Drawing.Color,dotnetCHARTING.CalendarPattern)">
            <summary>Initialize a new instance of the AxisMarker class with a
label, colort, and axis range.</summary>
            <param name="label">The Label drawn on the marker. The label trickles down to
this AxisMarker object's LegendEntry.Name property
unless one explicitly specified.</param>
            <param name="col">The color that fills the an area of the chart within the
specified range.</param>
            <param name="calendarPattern">CalendarPattern of this axis marker.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,System.Drawing.Color,System.Object)">
            <summary>Initialize a new instance of the AxisMarker class with a
label, Background object, and a numeric or time value representing
a point on an axis..</summary>
            <param name="label">The Label drawn on the marker. The label trickles down to
this AxisMarker object's LegendEntry.Name property
unless one explicitly specified.</param>
            <param name="lineColor">The color used to draw line at the specified position.</param>
            <param name="myValue">Numeric, DateTime, or Text value representing a point on an
axis.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,System.Drawing.Color,System.Object,System.Object)">
            <summary>Initialize a new instance of the AxisMarker class with a
label, colort, and axis range.</summary>
            <param name="label">The Label drawn on the marker. The label trickles down to
this AxisMarker object's LegendEntry.Name property
unless one explicitly specified.</param>
            <param name="col">The color that fills the an area of the chart within the
specified range.</param>
            <param name="valueLow">Numeric, DateTime, or Text low axis range.</param>
            <param name="valueHigh">Numeric, DateTime, or Text high axis range..</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,dotnetCHARTING.Line,System.Object)">
            <summary>Initialize a new instance of the AxisMarker class with a
label, Background object, and a numeric or time value representing
a point on an axis..</summary>
            <param name="label">The Label drawn on the marker. The label trickles down to
this AxisMarker object's LegendEntry.Name property
unless one explicitly specified.</param>
            <param name="line">Line to draw at the specified position.</param>
            <param name="myValue">Numeric, DateTime, or Text value representing a point on an
axis.</param>
        </member>
        <member name="P:dotnetCHARTING.AxisMarker.Background">
            <summary>Gets or sets a dotnetCHARTING.Background object used to fill
this AxisMarker object's range on a
ChartArea.</summary>
        </member>
        <member name="P:dotnetCHARTING.AxisMarker.BringToFront">
            <summary>Gets or sets a value that indicates whether the AxisMarker is
drawn in front of the chart data while in 2D mode.</summary>
        </member>
        <member name="P:dotnetCHARTING.AxisMarker.CalendarPattern">
            <summary>Gets or set a CalendarPattern used by this axis marker
instead of the range values.</summary>
        </member>
        <member name="P:dotnetCHARTING.AxisMarker.Label">
            <summary>Gets or sets a Label object drawn next to the
AxisMarker on a ChartArea.</summary>
        </member>
        <member name="P:dotnetCHARTING.AxisMarker.LegendEntry">
            <summary>Gets or sets a dotnetCHARTING.LegendEntry that represents
this AxisMarker in a LegendBox.</summary>
        </member>
        <member name="P:dotnetCHARTING.AxisMarker.Line">
            <summary>Gets or sets a dotnetCHARTING.Line object drawn on a
ChartArea.</summary>
            <remarks>This line is used when ValueHigh and ValueLow are equal or if
Value is set.</remarks>
        </member>
        <member name="P:dotnetCHARTING.AxisMarker.Tick">
            <summary>Gets or sets an AxisTick object that will represent this
AxisMarker on the axis where it resides.</summary>
            <remarks>By default this tick is null and must be instantiated. If the
axis marker is a range, the axis tick will also be a range
AxisTick. If a dotnetCHARTING.CalendarPattern is used, the tick
cannot be used.</remarks>
        </member>
        <member name="P:dotnetCHARTING.AxisMarker.Value">
            <summary>Gets or sets the numeric, DateTime, or text value of this
AxisMarker.</summary>
            <remarks>When Value is specified, ValueLow and ValueHigh are both set
to this value. When ValueLow and ValueHigh are equivalent, this
AxisMarker is represented by the Line object, otherwise, Background
fills the range between ValueLow and ValueHigh.</remarks>
        </member>
        <member name="P:dotnetCHARTING.AxisMarker.ValueHigh">
            <summary>Gets or sets the upper bounds of a numeric, DateTime, or text
range.</summary>
            <remarks>When ValueLow and ValueHigh are equivalent, this AxisMarker
is represented by the Line object, otherwise, Background fills the
range between ValueLow and ValueHigh.</remarks>
        </member>
        <member name="P:dotnetCHARTING.AxisMarker.ValueLow">
            <summary>Gets or sets the lower bounds of a numeric, DateTime, or text
range.</summary>
            <remarks>When ValueLow and ValueHigh are equivalent, this AxisMarker
is represented by the Line object, otherwise, Background fills the
range between ValueLow and ValueHigh.</remarks>
        </member>
        <member name="T:dotnetCHARTING.AxisMarkerCollection">
            <summary>Contains a collection of AxisMarker objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisMarkerCollection.#ctor(dotnetCHARTING.AxisMarker[])">
            <summary>Creates a new instance of AxisMarkerCollection with the
specified list of AxisMarker objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisMarkerCollection.Add">
            <summary>Adds a specified AxisMarkerCollection to this
collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisMarkerCollection.Add(dotnetCHARTING.AxisMarkerCollection)">
            <summary>Adds a specified AxisMarkerCollection to this
collection.</summary>
            <param name="axisMarkerCollection">The AxisMarkerCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarkerCollection.Add(dotnetCHARTING.AxisMarker[])">
            <summary>Adds the specified AxisMarker objects to this
collection.</summary>
            <param name="axisMarkerList">A list of AxisMarker objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarkerCollection.Contains(dotnetCHARTING.AxisMarker)">
            <summary>Determines whether this collection contains a specified
AxisMarker.</summary>
            <returns>true if the specified AxisMarker belongs to this collection;
otherwise, false.</returns>
            <param name="axisMarker">The AxisMarker to find.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarkerCollection.IndexOf(dotnetCHARTING.AxisMarker)">
            <summary>Determines the index of a specified AxisMarker in this
collection.</summary>
            <returns>The zero-based index of the specified AxisMarker.</returns>
            <param name="axisMarker">The AxisMarker to find.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarkerCollection.Insert(System.Int32,dotnetCHARTING.AxisMarker)">
            <summary>Inserts a AxisMarker into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the AxisMarker.</param>
            <param name="axisMarker">The AxisMarker to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisMarkerCollection.Remove(dotnetCHARTING.AxisMarker)">
            <summary>Removes a specified AxisMarker from this collection.</summary>
            <param name="axisMarker">The AxisMarker to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.AxisMarkerCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.AxisTick">
            <summary>Encapsulates an axis tick that includes Label or
ElementMarker, TickLine, and GridLine styling objects.</summary>
            <remarks>    Appearance
    AxisTick objects can appear in three different ways.
    
        Normal axis tick with a label.
        AxisTick where the label is replaced with the
        AxisTick.Marker object (Icon or Image).
        Range AxisTick in which case the tick has a low and
        high value.
    
    
    
    Uses
    AxisTick objects can also be used in different ways.
    
        
            
                As an additional axis tick.
            
        
        
            
                To override a tick on an axis.
            
        
        
            
                To override multiple ticks on an axis.
            
        
    </remarks>
        </member>
        <member name="M:dotnetCHARTING.AxisTick.#ctor">
            <summary>Initializes a new instance of the AxisTick class.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisTick.#ctor">
            <summary>Initializes a new instance of the AxisTick class.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisTick.#ctor(System.Object)">
            <summary>Initializes a new instance of the AxisTick class with an
arbitrary numeric or DateTime value.</summary>
            <param name="val">Axis tick value. The label will automatically represent the
value given.(Number or DateTime)</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTick.#ctor(System.Object,System.Object)">
            <summary>Initializes a new instance of the AxisTick class with an
arbitrary numeric or DateTime range.</summary>
            <param name="lowValue">Low value. (Number or DateTime)</param>
            <param name="highValue">High value. (Number or DateTime)</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTick.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>Initializes a new instance of the AxisTick class with an
arbitrary numeric or DateTime range and an option to make this axis
tick override ticks within it's range instead of appearing on the
axis.</summary>
            <param name="lowValue">Low value.(Number or DateTime)</param>
            <param name="highValue">High value.(Number or DateTime)</param>
            <param name="overrideTheTicks">When true, the axis tick will override ticks within it's
range, otherwise, it will be a range tick.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTick.#ctor(System.Object,System.Object,System.String)">
            <summary>Initializes a new instance of the AxisTick class with an
arbitrary numeric or DateTime range and label.</summary>
            <param name="lowValue">Low value.(Number or DateTime)</param>
            <param name="highValue">High value.(Number or DateTime)</param>
            <param name="labelText">Label text.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTick.#ctor(System.Object,System.String)">
            <summary>Initializes a new instance of the AxisTick class with an
arbitrary numeric or DateTime value and a text label..</summary>
            <param name="val">Axis tick value.(Number or DateTime)</param>
            <param name="TextOverride">Label text.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTick.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the AxisTick class with text of
an original label and new text to override that label with.</summary>
            <remarks>Case insensitive.</remarks>
            <param name="originalLabelText">Label text of the axis tick to replace.</param>
            <param name="newLabelText">New label text.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTick.Dispose">
            <summary>Releases all resources used by this
AxisTick.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisTick.SetAllColors(System.Drawing.Color)">
            <summary>Sets the colors of this AxisTick's Label, Line, and
GridLine.</summary>
            <param name="color">Color to use.</param>
        </member>
        <member name="P:dotnetCHARTING.AxisTick.GridLine">
            <summary>Gets or sets the properties of the Line drawn on the
ChartArea at this AxisTick object's
position.</summary>
        </member>
        <member name="P:dotnetCHARTING.AxisTick.Label">
            <summary>Gets or sets the Label of this
AxisTick.</summary>
        </member>
        <member name="P:dotnetCHARTING.AxisTick.Line">
            <summary>Gets or sets the tick line of this AxisTick.
The property Line.Length will control the length of this
tick.</summary>
        </member>
        <member name="P:dotnetCHARTING.AxisTick.Marker">
            <summary>Gets or sets an ElementMarker object used instead of the
label text.</summary>
        </member>
        <member name="P:dotnetCHARTING.AxisTick.OverrideTicks">
            <summary>Gets or sets a value indicating whether this range AxisTick
is drawn on an axis or if it's properties are used to override
those of other AxisTicks within it's range.</summary>
        </member>
        <member name="T:dotnetCHARTING.AxisTickCollection">
            <summary>Contains a collection of AxisTick objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.#ctor(dotnetCHARTING.AxisTick[])">
            <summary>Creates a new instance of AxisTickCollection with the
specified list of AxisTick objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.Add">
            <summary>Adds the specified AxisTick object to this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.Add(dotnetCHARTING.AxisTick)">
            <summary>Adds the specified AxisTick object to this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.Add(dotnetCHARTING.AxisTickCollection)">
            <summary>Adds a specified AxisTickCollection to this
collection.</summary>
            <param name="axisTickCollection">The AxisTickCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.Add(dotnetCHARTING.AxisTick[])">
            <summary>Adds the specified AxisTick objects to this
collection.</summary>
            <param name="axisTickList">A list of AxisTick objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.Contains(dotnetCHARTING.AxisTick)">
            <summary>Determines whether this collection contains a specified
AxisTick.</summary>
            <returns>true if the specified AxisTick belongs to this collection;
otherwise, false.</returns>
            <param name="axisTick">The AxisTick to find.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.FromValues">
            <summary>Creates a collection of axis ticks with the specified
values.</summary>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.FromValues(System.Double[])">
            <summary>Creates a collection of axis ticks with the specified
values.</summary>
            <param name="list">List of double values.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.FromValues(System.DateTime[])">
            <summary>Creates a collection of axis ticks with the specified
values.</summary>
            <param name="list">List of DateTime values.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.IndexOf(dotnetCHARTING.AxisTick)">
            <summary>Determines the index of a specified AxisTick in this
collection.</summary>
            <returns>The zero-based index of the specified AxisTick.</returns>
            <param name="axisTick">The AxisTick to find.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.Insert(System.Int32,dotnetCHARTING.AxisTick)">
            <summary>Inserts a AxisTick into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the AxisTick.</param>
            <param name="axisTick">The AxisTick to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.AxisTickCollection.Remove(dotnetCHARTING.AxisTick)">
            <summary>Removes a specified AxisTick from this collection.</summary>
            <param name="axisTick">The AxisTick to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.AxisTickCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.Background">
            <summary>Defines styling properties used to fill the interior of
polygons and chart elements such as legend boxes, annotations and
other shapes.</summary>
        </member>
        <member name="M:dotnetCHARTING.Background.#ctor">
            <summary>Initializes a new instance of the Background class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Background.#ctor">
            <summary>Initializes a new instance of the Background class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Background.#ctor(System.Drawing.Brush)">
            <summary>Initializes a new instance of the Background object with a
Brush.</summary>
            <param name="brush">Brush object used to to fill the background.</param>
        </member>
        <member name="M:dotnetCHARTING.Background.#ctor(System.Drawing.Color)">
            <summary>Initializes a new instance of the Background object with a
color.</summary>
            <param name="myColor">Color to fill with.</param>
        </member>
        <member name="M:dotnetCHARTING.Background.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>Initializes a new instance of the Background object with
gradient colors drawn left to right.</summary>
            <param name="myColor">First color.</param>
            <param name="secondColor">Second color</param>
        </member>
        <member name="M:dotnetCHARTING.Background.#ctor(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>Initializes a new instance of the Background object with
gradient colors drawn at a specified angle.</summary>
            <param name="myColor">First color.</param>
            <param name="secondColor">Second color</param>
            <param name="angle">Specifies an angle ( left to right = 0, right to left = 180
)</param>
        </member>
        <member name="M:dotnetCHARTING.Background.#ctor(System.String)">
            <summary>Initializes a new instance of the Background object with a
tiled image.</summary>
            <param name="imagePath">Path of an image.</param>
        </member>
        <member name="M:dotnetCHARTING.Background.#ctor(System.String,dotnetCHARTING.BackgroundMode)">
            <summary>Initializes a new instance of the Background object with an
image and a background mode.</summary>
            <remarks>The</remarks>
            <param name="imagePath">Path of a background image.</param>
            <param name="backgroundMode">Specifies a BackgroundMode to use with the image.</param>
        </member>
        <member name="P:dotnetCHARTING.Background.Bevel">
            <summary>Gets or sets a value that indicates wherer this background
will use a bevel shading effect.</summary>
        </member>
        <member name="P:dotnetCHARTING.Background.Brush">
            <summary>Gets or sets a brush object that is used to fill
objects.</summary>
        </member>
        <member name="P:dotnetCHARTING.Background.Color">
            <summary>Gets or sets the primary Color.</summary>
        </member>
        <member name="P:dotnetCHARTING.Background.GlassEffect">
            <summary>Gets or sets a value that indicates whether a glass effect is
used to fill an object.</summary>
        </member>
        <member name="P:dotnetCHARTING.Background.GradientAngle">
            <summary>Gets or sets an angle at which gradients are drawn.( left to
right = 0, right to left = 180 )</summary>
        </member>
        <member name="P:dotnetCHARTING.Background.HatchColor">
            <summary>Gets or sets a color hatch patterns are drawn with.</summary>
        </member>
        <member name="P:dotnetCHARTING.Background.HatchStyle">
            <summary>Gets or sets a hatch pattern.</summary>
            <remarks>If not specified, no hatch will is drawn.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Background.ImagePath">
            <summary>Gets or sets the path of a fill image.</summary>
            <remarks>An image fill is used when BackgroundMode.ImageTile,
BackgroundMode.ImageStretch or BackgroundMode.Image is used.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Background.Mode">
            <summary>Gets or sets the fill mode.</summary>
        </member>
        <member name="P:dotnetCHARTING.Background.SecondaryColor">
            <summary>Gets or sets the secondary color.</summary>
            <remarks>The secondary color is used with the primary color to create
a gradient fill when using BackgroundMode.Gradient.</remarks>
        </member>
        <member name="T:dotnetCHARTING.Box">
            <summary>Defines a base class for derived objects such as TitleBox,
LegendBox, and Annotation.</summary>
            <remarks>    The box object provides the following 
    
        Defines objects used to fill the interior, shadow,
        and outline the box.
        Defines rectangle edge styles.
        Defines the position, title box icon, LegendBox
        layout template, and interior label.
    </remarks>
        </member>
        <member name="M:dotnetCHARTING.Box.#ctor">
            <summary>Initializes a new instance of the Box class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Box.ClearColors">
            <summary>Serves as a shortcut to make this box invisible.</summary>
            <remarks>The following properties are set when invoked:

Background.Color = Color.Empty

Background.Bevel = false

Line.Color = Color.Empty

Shadow.Color = Color.Empty

InteriorLine.Color = Color.Empty</remarks>
        </member>
        <member name="M:dotnetCHARTING.Box.GetCoordinates">
            <summary>Gets the coordinates of this box after the chart is
rendered.</summary>
        </member>
        <member name="M:dotnetCHARTING.Box.GetRectangle">
            <summary>Gets a Rectangle object indicating this boxes position and
size after the chart is rendered.</summary>
        </member>
        <member name="P:dotnetCHARTING.Box.Background">
            <summary>Gets or sets a background object used to fill the interior of
this box.</summary>
        </member>
        <member name="P:dotnetCHARTING.Box.CornerBottomLeft">
            <summary>Gets or sets the bottom left corner style.</summary>
        </member>
        <member name="P:dotnetCHARTING.Box.CornerBottomRight">
            <summary>Gets or sets the bottom right corner style.</summary>
        </member>
        <member name="P:dotnetCHARTING.Box.CornerTopLeft">
            <summary>Gets or sets the top left corner style.</summary>
        </member>
        <member name="P:dotnetCHARTING.Box.CornerTopRight">
            <summary>Gets or sets the top right corner style.</summary>
        </member>
        <member name="P:dotnetCHARTING.Box.DefaultCorner">
            <summary>Gets or sets the default box corner style.</summary>
            <remarks>Explicitly set corners will not be overridden.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Box.IconPath">
            <summary>Gets or sets the icon path of this title box.</summary>
            <remarks>Only the title box supports this feature.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Box.InteriorLine">
            <summary>Gets or sets the interior line of this legend box.</summary>
            <remarks>Multiple column legend boxes draw this line to separate
columns.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Box.Label">
            <summary>Gets or sets the Label of this box.</summary>
            <remarks>When the box text is not determined by this label, it's font
and color properties will be used for any text that appears in the
box. When used as a TitleBox and the position is set to
FullWithLegend, the font properties of ChartArea.LegendBox.Label
will be used for the legend entries and the Chart.TitleBox.Label
properties and text will be used for the title.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Box.Line">
            <summary>Gets or sets the exterior line of this box.</summary>
        </member>
        <member name="P:dotnetCHARTING.Box.Orientation">
            <summary>Gets or sets this object's orientation around a
ChartArea.</summary>
        </member>
        <member name="P:dotnetCHARTING.Box.Padding">
            <summary>Gets or sets a value in pixels that represents the padding
between objects within the box and the box walls.</summary>
            <remarks>Legend boxes also use this property to set the padding
between entries.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Box.Position">
            <summary>Gets or sets the position of this box.</summary>
        </member>
        <member name="P:dotnetCHARTING.Box.Shadow">
            <summary>Gets or sets the Shadow cast under this box.</summary>
        </member>
        <member name="P:dotnetCHARTING.Box.Visible">
            <summary>Gets or sets a value that indicates whether this box is
visible.</summary>
        </member>
        <member name="T:dotnetCHARTING.CalendarPattern">
            <summary>Specifies a calendar pattern such as weekends in a
week.</summary>
            <remarks>    The pattern is represented by an array of boolean values.
    CalendarPattern.PatternFromString can be used to quickly create
    patterns using simple strings. A week pattern would look like
    this: "0000000". A zero for each day of the week. To
    indicate weekends the pattern will be "1000001". The
    time units must also be specified.
    Each one or zero represents a day:
    myCalendarPattern.PatternUnit = TimeInterval.Day
    
    The entire pattern represents a week:
    myCalendarPattern.CalendarUnit =
    TimeInterval.Week
    
    The above calendar pattern will flag each saturday and sunday
    in a given, time span.</remarks>
        </member>
        <member name="M:dotnetCHARTING.CalendarPattern.#ctor">
            <summary>Initializes a new instance of the CalendarPattern
class.</summary>
        </member>
        <member name="M:dotnetCHARTING.CalendarPattern.#ctor">
            <summary>Initializes a new instance of the CalendarPattern
class.</summary>
        </member>
        <member name="M:dotnetCHARTING.CalendarPattern.#ctor(dotnetCHARTING.TimeInterval,dotnetCHARTING.TimeInterval,System.Boolean[])">
            <summary>Initializes a new instance of the CalendarPattern class with
time units and a pattern.</summary>
        </member>
        <member name="M:dotnetCHARTING.CalendarPattern.#ctor(dotnetCHARTING.TimeInterval,dotnetCHARTING.TimeInterval,System.String)">
            <summary>Initializes a new instance of the CalendarPattern class with
time units and a string pattern.</summary>
        </member>
        <member name="M:dotnetCHARTING.CalendarPattern.Invert">
            <summary>Inverts this CalendarPattern.</summary>
            <remarks>If the pattern is "0011", after this operation it will become
"1100".</remarks>
        </member>
        <member name="M:dotnetCHARTING.CalendarPattern.PatternFromString(System.String)">
            <summary>Gets a boolean array from a string of ones (1) and zeros
(0).</summary>
            <returns>bool[]</returns>
            <param name="str">A pattern in a string form. A string of "1100" will return [
true, true, false, false ]. The boolean array can be used to set
the Pattern property of this CalendPattern.</param>
        </member>
        <member name="P:dotnetCHARTING.CalendarPattern.AdjustmentUnit">
            <summary>Gets or sets a values by which the time interval is offset on
the axis.</summary>
            <remarks>This property can be useful with axis markers because tick
marks may appear at the beginning of a time unit like month. The
calendar pattern may need to be adjusted to properly correspond to
axis ticks.</remarks>
        </member>
        <member name="P:dotnetCHARTING.CalendarPattern.CalendarUnit">
            <summary>Gets or sets a TimeInterval that represents the time unit of
the entire Pattern.</summary>
        </member>
        <member name="P:dotnetCHARTING.CalendarPattern.Pattern">
            <summary>Gets or sets the calendar pattern.</summary>
        </member>
        <member name="P:dotnetCHARTING.CalendarPattern.PatternUnit">
            <summary>Gets or sets a TimeInterval that represents the time unit of
each Boolean value in the Pattern.</summary>
        </member>
        <member name="P:dotnetCHARTING.CalendarPattern.Weekdays">
            <summary>Gets a calendar pattern instance representing
weekdays.</summary>
        </member>
        <member name="P:dotnetCHARTING.CalendarPattern.Weekends">
            <summary>Gets a calendar pattern instance representing
weekends.</summary>
        </member>
        <member name="T:dotnetCHARTING.Chart">
            <summary>The .netCHARTING control.</summary>
        </member>
        <member name="M:dotnetCHARTING.Chart.#ctor">
            <summary>Initializes a new empty instance of the Chart control.</summary>
        </member>
        <member name="M:dotnetCHARTING.Chart.GetChartBitmap">
            <summary>Obtains a Bitmap of the generated chart.</summary>
            <remarks>When invoked, the Point properties of all elements drawn on
the chart will be populated.</remarks>
            <returns>A Bitmap of the chart.</returns>
        </member>
        <member name="M:dotnetCHARTING.Chart.GetChartMetafile">
            <summary>Returns the metafile contains records that describe a
sequence of graphics operations that can be recorded (constructed)
and played back (displayed).</summary>
            <returns>A Metafile of the chart image.</returns>
        </member>
        <member name="M:dotnetCHARTING.Chart.GetChartStream">
            <summary>Returns the memory stream of the image.</summary>
            <returns>A MemoryStream of the chart image.</returns>
        </member>
        <member name="M:dotnetCHARTING.Chart.GetLegendBitmap">
            <summary>Obtains a Bitmap of the legend generated by the chart.</summary>
            <remarks>When invoked, the Point properties of all elements drawn on
the chart will be populated.</remarks>
            <returns>A Bitmap of the legend.</returns>
        </member>
        <member name="M:dotnetCHARTING.Chart.LoadState">
            <summary>Imports a chart object from the specified xml file.</summary>
        </member>
        <member name="M:dotnetCHARTING.Chart.LoadState(System.String)">
            <summary>Imports a chart object from the specified xml file.</summary>
            <returns>A chart object.</returns>
            <remarks>This property takes either a raw xml string or an xml file
name. For an xml file name it takes either an absolute path
'c:/inetpub/wwwroot/app/chart.xml', a physical UNC path
('\\myUncPath\cahrt.xml'), a relative path ('temp/chart.xml',) or
when started with '/' a relative path from c:/inetpub/wwwroot/
('/app/chart.xml), or only a file name 'chart.xml' in the temp
directory.</remarks>
            <param name="xmlDataOrFileName">A raw xml string or an xml file name to load.</param>
        </member>
        <member name="M:dotnetCHARTING.Chart.LoadState(System.String,System.Boolean)">
            <summary>Imports a chart object from the specified xml file.</summary>
            <returns>A chart object.</returns>
            <remarks>This property takes either a raw xml string or an xml file
name. For an xml file name it takes either an absolute path
'c:/inetpub/wwwroot/app/chart.xml', a physical UNC path
('\\myUncPath\cahrt.xml'), a relative path ('temp/chart.xml',) or
when started with '/' a relative path from c:/inetpub/wwwroot/
('/app/chart.xml), or only a file name 'chart.xml' in the temp
directory.</remarks>
            <param name="xmlDataOrFileName">A raw xml string or an xml file name to load.</param>
            <param name="clear">Determine whether clear the chart object before loading the
data.</param>
        </member>
        <member name="M:dotnetCHARTING.Chart.LoadState(System.String,dotnetCHARTING.Chart)">
            <summary>Set the chart object from the specified xml file.</summary>
            <remarks>This first parameter takes either a raw xml string or an xml
file name. For an xml file name it takes either an absolute path
'c:/inetpub/wwwroot/app/chart.xml', a physical UNC path
('\\myUncPath\cahrt.xml'), a relative path ('temp/chart.xml',) or
when started with '/' a relative path from c:/inetpub/wwwroot/
('/app/chart.xml), or only a file name 'chart.xml' in the temp
directory.</remarks>
            <param name="xmlDataOrFileName">A raw xml string or an xml file name to load.</param>
            <param name="chartObject">The chart object that be loaded with XML data.</param>
        </member>
        <member name="M:dotnetCHARTING.Chart.LoadState(System.String,dotnetCHARTING.Chart,System.Boolean)">
            <summary>Set the chart object from the specified xml file.</summary>
            <remarks>This first parameter takes either a raw xml string or an xml
file name. For an xml file name it takes either an absolute path
'c:/inetpub/wwwroot/app/chart.xml', a physical UNC path
('\\myUncPath\cahrt.xml'), a relative path ('temp/chart.xml',) or
when started with '/' a relative path from c:/inetpub/wwwroot/
('/app/chart.xml), or only a file name 'chart.xml' in the temp
directory.</remarks>
            <param name="xmlDataOrFileName">Path of XML file or XML data to load.</param>
            <param name="chartObject">The chart object that be loaded with XML data.</param>
            <param name="clear">Determine whether clear the chart object before loading the
data.</param>
        </member>
        <member name="M:dotnetCHARTING.Chart.SaveState">
            <summary>    string LoadState()
    void LoadState(string xmlFilePath,Chart
    chartObject)
    string LoadState(Chart chartObject)
    string LoadState()
    void LoadState(string xmlFilePath)
    string LoadState(Chart chartObject)
    string LoadState(string xmlFilePathOrData)
    void LoadState(string xmlFilePathOrData,Chart
    chartObject)
    string LoadState(Chart chartObject)
    string LoadState()
    string LoadState(string xmlFilePath)
    void LoadState(string xmlFilePath,Chart
    chartObject)</summary>
        </member>
        <member name="M:dotnetCHARTING.Chart.SaveState(System.String)">
            <summary>Saves this chart instance to an xml file.</summary>
            <remarks>This first parameter takes either an absolute path
'c:/inetpub/wwwroot/app/chart.xml', a physical UNC path
('\\myUncPath\cahrt.xml'), a relative path ('temp/chart.xml',) or
when started with '/' a relative path from c:/inetpub/wwwroot/
('/app/chart.xml), or only a file name 'chart.xml' in the temp
directory.</remarks>
            <param name="xmlFilePath">Path of XML file.</param>
        </member>
        <member name="M:dotnetCHARTING.Chart.SaveState(System.String,dotnetCHARTING.Chart)">
            <summary>Saves the chart instance to an xml file.</summary>
            <remarks>This first parameter takes either an absolute path
'c:/inetpub/wwwroot/app/chart.xml', a physical UNC path
('\\myUncPath\cahrt.xml'), a relative path ('temp/chart.xml',) or
when started with '/' a relative path from c:/inetpub/wwwroot/
('/app/chart.xml), or only a file name 'chart.xml' in the temp
directory.</remarks>
            <param name="xmlFilePath">Path of the XML file.</param>
            <param name="chartObject">The chart object is being serialized.</param>
        </member>
        <member name="M:dotnetCHARTING.Chart.SaveState">
            <summary>Saves this chart instance to an xml string.</summary>
            <returns>The xml string which represent the current chart
object.</returns>
        </member>
        <member name="M:dotnetCHARTING.Chart.SaveState(dotnetCHARTING.Chart)">
            <summary>Saves the chart instance to an xml string.</summary>
            <returns>The xml string which represent the chart object.</returns>
            <param name="chartObject">The chart object is being serialized.</param>
        </member>
        <member name="P:dotnetCHARTING.Chart.AlternateText">
            <summary>Gets or sets text displayed in place of a chart when images
can't be viewed. This property can also be used as a tooltip for
the chart in browsers that support this feature.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Annotations">
            <summary>A collection of Annotation objects drawn on the chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.AutoNameLabels">
            <summary>Gets or sets a value which indicates whether elements and
series are automatically named when no names are provided.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.AxisCollection">
            <summary>Contains a collection of calculated Axis objects.</summary>
            <remarks>Axes added to this collection must be calculated from axes on
the chart, otherwise they are ignored.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.Background">
            <summary>Gets or sets the Background of this chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.BubbleCenterStack">
            <summary>Gets or sets a boolean value to control bubble center
stack.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.BubbleStackShadeAsOne">
            <summary>Gets or sets a boolean value to control bubble stack
shade.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.CacheDuration">
            <summary>Gets or sets the number of minutes an image is cached and
displayed on a page before a new one is generated.</summary>
            <remarks>When set, a given chart image will be generated on the first
hit and on all subsequent hits within the cache duration period the
same image will be returned with no rendering work by the chart
control.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.CalculateEmptyElement">
            <summary>Gets or sets a value indicating whether the values of empty
elements are percieved as 0 or omitted in calculations performed
with the Chart.SeriesCollection.Add(Calculation calc)
shortcut.</summary>
            <remarks>If this property is set to false, in all calculations
(average,min,median,mode etc.) only the applicable elements are
counted. If set to true, such elements are given 0 values and
included in the calculation. This case occurs when you have
multiple series and are calculating derived series from them.
Defaults to true.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.ChartArea">
            <summary>Gets or sets the main ChartArea of the image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ChartAreaLayout">
            <summary>Gets or sets chart area layout options.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ChartAreaSpacing">
            <summary>Gets or sets a value in pixels that defines the spacing
between boxes like chart areas and legends.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.CleanupMinimumAge">
            <summary>Gets or sets the minimum number of minutes images are stored
in the TempDirectory before they are deleted.</summary>
            <remarks>When .netCHARTING renders a chart a temporary file is created
in the directory set by the TempDirectory property. The
CleanupMinimumAge ensures that only files older than this age, in
minutes, will be deleted.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.CleanupPeriod">
            <summary>Gets or sets the number of minutes images are stored in the
TempDirectory folder before they are deleted.</summary>
            <remarks>When .netCHARTING renders a chart a temporary file is created
in the directory set by the TempDirectory property. The
CleanUpPeriod property determines how frequently (in minutes) this
directory is cleaned by deleting old temporary files. The default
is 15 minutes and the property can be set to 0 in order to disable
the cleanup in which case temp files are not automatically
deleted.

Any files that start with 'dnc-' will be deleted in the temp
directory.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.ClipGauges">
            <summary>Gets or sets a value which determines if gauges should be
clipped (cut) to display only the active area.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.CorrectionWarnings">
            <summary>See Debug</summary>
            <remarks>When data is corrected for example the selected axis.scale is
not appropriate for the data included in the chart this property
will be populated with a descriptive message.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DatabaseCultureName">
            <summary>Gets or sets the culture name used when StartDate and EndDate
insert to the sql statement. This property only necessary to set if
the web server and database server having different culture
setting.</summary>
            <remarks>See the CultureInfo class for possible names of a
culture.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DataGrid">
            <summary>Gets or sets the control ID of a datagrid control that will
be populated with the charted data.</summary>
            <remarks>This property accepts a control ID for a datagrid. If set,
the data represented in the chart is populated in the datagrid of
the same name. You must also define a datagrid control with an
appropriately named ID within the same script. This property is
useful when displaying tabular chart data along with your
charts.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DataGridFormatString">
            <summary>Gets or sets the format string which determines number
formatting in the datagrid.</summary>
            <remarks>See 'Formatting Types' in your msdn documentation for a
complete list of options.



Some shortcuts are also provided for specific settings including
"C" or "currency" , "E" or "scientific" , "F" or "fixed" , "G" or
"general" and "N,2" for normal and the number after the comma
determines the number of decimal places.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DataGridSeriesHeader">
            <summary>Gets or sets the header label of the DataGrid control
specified by the DataGrid property.</summary>
            <remarks>This property controls the header label used for the datagrid
series name column. If set to "none" the series name column will be
removed. If set to "XAxisLabel", xAxis label set as the header
label of the datagrid.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DataGridTranspose">
            <summary>Gets or sets a value indicating whether the data with which
the specified DataGrid control is populated will be
transposed.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DateGrouping">
            <summary>Gets or sets a TimeInterval enumeration which determines how
the values of a given series are aggregated by date when retrieved
from a database.</summary>
            <remarks>Controls how the values of a given series are grouped by
date. In order to use this option the first column returned by the
SqlStatement must be a date/time. Options include Minutes, Hours,
Days, Weeks, Months, Quarters and Years where any StartDate and
EndDate can be used and the chart will show all values
sequentially. There are additional options for Hour/Minute,
Day/Hour, Week/Day, Month/Day, Year/Quarter and Year/Month in these
cases there are 2 special considerations 1) only a single day /
week / month / or year is charted and 2) if the date range is
greater than the period type (e.g. 1 day / 1 week / 1 month / 1
year) values are totalled over that period. There are also
shortcuts for the grouping cases of Hour (Hours/Minute), Day
(Day/Hour), Week(Week/Day), Month (Month/Day) and Year
(Year/Month). See all time interval options. This feature
automatically groups multiple data points over a given date range
into the specific date grouping you select. When DateGrouping is
enabled you must ensure that each series within a given chart
returns date/time data for the first column returned by the
SqlStatement.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DateGroupingCalculation">
            <summary>Gets or sets an enum which determines how values are grouped
to create a single element value.</summary>
            <remarks>When dategrouping is used, if an element has more than one
value, a Calculation is performed on those values.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DateGroupingSort">
            <summary>Gets or sets a value indicating whether to maintain the sort
order of the data as it is provided.</summary>
            <remarks>When dategrouping is used and StartDate or EndDate is not
set, the data is sorted by the xAxis field by default. Setting this
property to true will maintain the sort order of the data as it is
provided.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.Debug">
            <summary>Gets or sets a value that indicates whether debug messages
are displayed below the chart.</summary>
            <remarks>This property controls if error text is returned below the
generated image if a problem occurs. This is typically used for
debug purposes when initially developing charts. This is provided
as a property so that your end users are not exposed to developer
level errors. This property defaults to false</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DefaultAxis">
            <summary>Gets or sets an Axis object whose properties will trickle
down to all other axes on the chart unless otherwise
specified.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DefaultBox">
            <summary>Gets a base box object that is used as a vehicle for property
settings which will become the defaults settings of all elements on
the chart that derive from box.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DefaultChartArea">
            <summary>Gets a dotnetCHARTING.ChartArea object whose property
settings will propagate to all other dotnetCHARTING.ChartArea
objects on the chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DefaultCultureName">
            <summary>Gets or sets the default culture name which determines number
and date formatting.</summary>
            <remarks>Equivalent to Chart.DefaultAxis.CultureName. See the
CultureInfo class for possible names of a culture.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DefaultElement">
            <summary>Gets or sets an Element object whose properties will trickle
to all other elements on the chart unless otherwise specified. This
is a shortcut to the DefaultSeries.DefaultElement property.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DefaultFormatString">
            <summary>Gets or sets the default format string which determines
number and date formatting.

See Chart.DefaultAxis.FormatString.</summary>
            <remarks>Equivalent to Chart.DefaultAxis.FormatString.

See 'Formatting Types' in your msdn documentation for a complete
list of options.

Some shortcuts are also provided for specific settings including
"C" or "currency" , "E" or "scientific" , "F" or "fixed" , "G" or
"general" and "N,2" for normal and the number after the comma
determines the number of decimal places.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DefaultLegendBox">
            <summary>Gets a dotnetCHARTING.LegendBox object whose property
settings will propagate to all other dotnetCHARTING.LegendBox
objects on the chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DefaultSeries">
            <summary>Gets or sets a Series object whose properties will trickle to
all other series on the chart unless otherwise specified.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DefaultShadow">
            <summary>Gets or sets a shadow object whose properties will trickle to
all other objects with shadows.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DefaultTitleBox">
            <summary>Gets a dotnetCHARTING.Box object whose property settings will
propagate to all title boxes on the chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Depth">
            <summary>Gets or sets depth of the chart when Use3D is true.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DisableBrowserCache">
            <summary>Gets or sets a value indicating whether disable browser
cache.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DonutHoleSize">
            <summary>Gets or sets a percentage value which determines the relative
thickness of the donut ring when ChartType.Donut is used.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Dpi">
            <summary>Gets or sets the resolution, in dots per inch, of the chart
Bitmap.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.DrillDownChain">
            <summary>    Gets or sets the drill down chain which activates
    automatic time based drill down if date grouping
    used.
    If Limit or SplitByLimit used with ShowOther option,
    setting drill down chain to "Other" or "OtherAll" activates
    automatic drill down to other elements or series.
    "OtherAll" shows all other elements or series in the
    second level.
    "Other" shows the next number of elements or series has been
    set in limit or splitByLimit propertes.</summary>
            <remarks>When using automated drill down with DateGrouping, this
property controls the drill down chain, or hierarchy, that is
followed. In addition you can override names to be displayed for
the different drill down levels.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.DrillDownIntoSeries">
            <summary>When using automated drill down in conjunction with date
grouping and multiple series, this property determines if drill
down will occur into a single series or multiple series.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.EmptyElementText">
            <summary>Gets or sets the default text of empty element labels. See
Chart.DefaultSeries.DefaultElement.SmartLabel</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ErrorMessage">
            <summary>See Debug.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ExplodedSliceAmount">
            <summary>Gets or sets the relative percentage an exploded slice should
be pulled out from the pie or donut.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ExtraChartAreas">
            <summary>Gets a collection of additional dotnetCHARTING.ChartArea
objects added to the chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ExtraLegendBoxes">
            <summary>Gets a collection of additional dotnetCHARTING.LegendBox
objects added to the chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ExtraLegendEntries">
            <summary>Gets a collection of additional LegendEntry objects added to
the legend.</summary>
            <remarks>This collection allows you to add any number of custom legend
entries to the legend of your chart.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.FileManager">
            <summary>Gets or sets the chart's instance of the FileManager which
facilitates saving images.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.FileName">
            <summary>See Chart.FileManager.FileName.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.FileQuality">
            <summary>Gets or sets Jpg file quality. (Worse quality) 0 - 100 (Best
quality)</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.FunnelNozzlePercentage">
            <summary>Gets or sets a numeric value between 0 and 100 that indicates
the percentage of the full funnel height that comprises the
funnel's nozzle.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.FunnelNozzleWidthPercentage">
            <summary>Gets or sets a numeric value between 0 and 100 that indicates
the percentage of the full funnel width that comprises the funnel's
nozzle.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.FunnelSpacingPercentage">
            <summary>Gets or sets a numeric value between 0 and 100 that indicates
the percentage of the funnel's spacing.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.GanttCompleteHatchStyle">
            <summary>Gets or sets the hatch style drawn on columns and cylinders
when an element's Complete value is set.</summary>
            <remarks>Typically used with Gantt charts to indicate what percentage
of a task has been completed.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.HatchStylePalette">
            <summary>Gets or sets a hatch style palette that will trickle to all
series on the chart. The hatch patterns will not show on chart
elements if a hatch color is not specified. The default hatch color
can be specified with the
Chart.DefaultSeries.DefaultElement.HatchColor property.</summary>
            <remarks>For a complete list of hatch styles see

HatchStyle enumeration.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.HatchStylePaletteName">
            <summary>Gets or sets a predefined HatchStylePalette that defines
element and series hatch style.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Height">
            <summary>Gets or sets the height of the chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Hotspot">
            <summary>Gets or sets the dotnetCHARTING.Hotspot property of the chart
image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ImageFormat">
            <summary>Gets or sets an ImageFormat enumeration specifying the
generated image's file type.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ImageMapName">
            <summary>Returns a string for the image map name generated for the
current chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ImageMapText">
            <summary>Returns a string for the image map generated for the current
chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.LegendBox">
            <summary>Gets or sets a LegendBox object that represents the legend
box.</summary>
            <remarks>Notes

- To hide the legend box use Chart.LegendBox.Position =
LegendBoxPosition.None.

- When Chart.TitleBox.Position =
TitleBoxPosition.FullWithLegend is set the legend box will
disappear.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.LimitPrimarySeries">
            <summary>In a multiple series chart, this property controls the
primary series used for the Limit operation. Other series' elements
will be matched with the primary series elements and that order
will be maintained regardless of the values of the other series.
For example, if you limit to the top 5 values and set the
LimitPrimarySeries to the sales series other series such as dollar
amount or quantity would not affect which elements were ultimately
selected for the chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Mapping">
            <summary>This property is used only when using a map chart:
(Chart.Type = ChartType.Map).</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Margin">
            <summary>Gets or sets a string which automatically sets multiple
margins as a shortcut.</summary>
            <remarks>Controls the margins or amount of space in pixels that will
be left around the charting elements including the Legend and title
box. This property can be used in conjunction with the
Chart.Background property to easily implement attractive custom
borders or just pad the chart as you please. The property accepts
margins "Left, Top, Right, Bottom" in pixels.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.MarginBottom">
            <summary>Gets or sets the bottom margin of the chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.MarginLeft">
            <summary>Gets or sets the left margin of the chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.MarginRight">
            <summary>Gets or sets the right margin of the chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.MarginTop">
            <summary>Gets or sets the top margin of the chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.MaximumBubbleSize">
            <summary>Gets or sets a value which controls the maximum size of
bubbles when ChartType.Bubble is used.</summary>
            <remarks>When not set, the maximum size is determined
dynamically.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.MaximumBubbleSizeValue">
            <summary>Gets or sets the maximum value the bubble size will be based
on where a bubble size value of MaximumBubbleSizeValue equals a
bubble of size MaximumBubbleSize.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Mentor">
            <summary>    Gets or sets a value that indicates whether the mentor is shown
    under the chart control. 
    The mentor also requires that Chart.Debug is set to
    true.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.NoDataLabel">
            <summary>Gets or sets a label shown on the chart when no data is
available.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.NoDataText">
            <summary>See NoDataLabel.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.OverlapFooter">
            <summary>Gets or sets a value indicating whether the 'unlicensed
chart' footer overlaps the chart or moves it up.</summary>
            <remarks>If set to false, the rendered chart will exactly match that
of a production licensed chart (which does not have the footer or
branding in the top right). If set to true, the chart will be
resized slightly so that the footer does not overlap the chart. In
all cases the final rendered image will be exactly what you set for
Chart.Size or Chart.Height and Chart.Width.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.Palette">
            <summary>Gets or sets an array of colors that define element and
series colors.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.PaletteName">
            <summary>Gets or sets a predefined Palette that defines element and
series colors.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.PieLabelMode">
            <summary>See
DefaultSeries.DefaultElement.SmartLabel.PieLabelMode.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.PopulateDateGroupingSubValues">
            <summary>When using date grouping the main value in the element is
derived from the actual values in the database or data provided to
.netCHARTING. This property controls whether these subvalues used
in the calculation to determine the element value are added to
SubValues or not. By default, such values are not added to the
element subvalues.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.PriceArea">
            <summary>Gets or sets a ChartArea object which represents the price
chart area on a financial chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.PriceTimeInterval">
            <summary>Gets or sets a time interval used to blend financial data
shown in the PriceArea of a financial chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.PrinterOptimizedText">
            <summary>Gets or sets a value that indicates whether text rendered on
the chart optimized for printing.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.RadarLabelMode">
            <summary>See
DefaultSeries.DefaultElement.SmartLabel.RadarLabelMode.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ReloadPeriod">
            <summary>Gets or sets a TimeSpan object that determines how often the
page containing this chart will automatically reload.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Series">
            <summary>Gets or sets a series which is added to the chart's main
SeriesCollection when the Chart.SeriesCollection.Add() method is
invoked.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.SeriesCollection">
            <summary>Gets a SeriesCollection object which represents the data this
chart will render.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ShadingEffect">
            <summary>See ShadingEffectMode.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ShadingEffectMode">
            <summary>Gets or sets a ShadingEffectMode enumeration indicating how
elements on the chart are shaded.</summary>
            <remarks>2D Columns, and Bubbles can use mode One, Two, and Three. 3D
Columns, 2D Pies, and 2D Donuts can only use mode 'One'.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.ShowDateInTitle">
            <summary>Gets or sets a value which indicates whether specified dates
are shown in the title.</summary>
            <remarks>Applicable when Chart.DefaultSeries.Start/EndDate or
Chart.Series.Start/EndDate are set.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.Size">
            <summary>Sets a string that automatically sets the Height and Width of
the chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.SmartForecast">
            <summary>Gets or sets a TimeIntervalAdvanced object that specifies a
time span shown on the chart. The span shown is an interval which
encompasses the time the chart is rendered. A trend line is also
added for the entire span shown and uses values not shown in it's
calculation to improve accuracy.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.SmartLabelLine">
            <summary>See
Chart.DefaultSeries.DefaultElement.SmartLabel.Line.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.SmartPalette">
            <summary>Gets or sets a NameColorCollection object that specifies the
colors of elements and series with specific names.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.SmartPaletteAutoSync">
            <summary>Gets or sets a boolean which controls smart palette
synchronization.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.StartDateOfYear">
            <summary>Gets or sets a DateTime object to determine the start month
of the year when

DateGrouping is used.</summary>
            <remarks>This property determine the start month of the year. The
default is January.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.StartDayOfWeek">
            <summary>Gets or sets a DayOfWeek enumeration that indicates the
starting day of the week when DateGrouping is used.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.TempDirectory">
            <summary>Gets or sets the directory where images generated by the
control are temporarily stored.</summary>
            <remarks>This property takes either an absolute path
'c:/inetpub/wwwroot/app/tmp', a relative path ('tmp', '../tmp',) or
when started with '/' a relative path from c:/inetpub/wwwroot/
('/app/tmp).</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.Title">
            <summary>Gets or sets the chart title.

Equivalent to Chart.TitleBox.Label.Text.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.TitleBox">
            <summary>Gets or sets a Box object that represents the title
box.</summary>
            <remarks>Notes

- To hide the title box use Chart.TitleBox.Position =
TitleBoxPosition.None.

- Setting Chart.TitleBox.Icon = "...IconPath..." draws the
image inside the title box.
- When no title, or icon is provided and
TitleBoxPosition.FullWithLegend is not set, the title box is
automatically hidden.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.ToolTip">
            <summary>Gets or sets the Tooltip of the entinre chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.ToolTipTemplate">
            <summary>See Chart.DefaultSeries.DefaultElement.ToolTip.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.TotalSeries">
            <summary>Return the total number of series in the seriesCollection.
This property usually used in conjunction with
SplitByLimit.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Transpose">
            <summary>Gets or sets a value indicating whether data added to this
chart's SeriesCollection property is automatically
transposed.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Type">
            <summary>Gets or sets the ChartType of this Chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.URL">
            <summary>Gets or sets the URL of the entinre chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.URLTarget">
            <summary>Gets or sets the target of the URL link.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Use3D">
            <summary>Gets or sets a value indicating whether chart elements are
rendered in 3D.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.UseFile">
            <summary>Gets or sets a value indicating whether the generated image
is saved as a file in the TempDirectory folder or streamed directly
to the browser.</summary>
            <remarks>.netCHARTING supports streaming images in addition to
returning a reference to a generated file. There are differences in
the way the control can be used between these two image return
methods. When using a file reference, you are free to treat the
page as you normally would, including HTML and any other web
content on the page.

If you are streaming the image back, only the control call should
exist on the page because no other HTML will render. This is not a
limitation of .netCHARTING but rather specific to the HTTP
implementation which serves each request separately (as such a
request to a web site with 3 images is actually 4 unique requests
and the browser does the job of assembling those 4 items into the
web page you see.

Becauase streaming images does not allow HTML, setting url and
tooltip properties of elements on the chart will have no
effect.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.UseSession">
            <summary>    Gets or sets a value indicating whether the generated
    image is saved
    temporarily in a session variable for subsequent streaming from
    a helper aspx page. This option may only be used when UseFile =
    false.</summary>
            <remarks>    .netCHARTING supports streaming images directly to the
    browser in addition
    to returning a reference to a generated image file. There are
    differences in
    the way the control can be used between these two image return
    methods. When using a file reference, you are free to treat the
    page as you normally would, and include HTML and any other web
    content on the page.&lt;br/&gt;
    
    Since streaming turns the page you include the control on into
    the actual
    image file return, the browser will not also allow HTML within
    the same http
    request. As a result url, tooltip and drilldown options will
    not be
    enabled. Setting UseSession to true works around this issue by
    returning an
    image reference to a separate aspx page for image streaming.
    The image
    stream is temporary stored in a session variable and an aspx
    page in the
    temp directory streams the image to the browser, enabling the
    regular HTML
    and image map based features to work seamlessly with the
    control.
    NOTE: streaming of any kind (direct or through the
    session helper) has a large performance cost over the file
    based system which has build in cleanup functionlity and should
    be used in all possible environments. Streaming
    should never be used unless your environment completely
    prevents write
    access which is required for the file based system to
    operate.&lt;br/&gt;</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.VolumeArea">
            <summary>Gets or sets a ChartArea object which represents the volume
chart area on a financial chart.</summary>
            <remarks>Setting Chart.VolumeArea.Visible = false hides the
volume chart area.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.VolumeSizeRatio">
            <summary>Gets or sets the size ratio between the VolumeArea and
PriceArea of a financial chart.</summary>
            <remarks>A value of .3 makes the VolumeArea 30 while the
P:dotnetCHARTING.Chart.PriceArea is 70.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Chart.VolumeTimeInterval">
            <summary>Gets or sets a time interval used to aggregate financial
volume data shown in the VolumeArea of a financial chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.Width">
            <summary>Gets or sets the width of the chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.XAxis">
            <summary>    Gets or Sets the main XAxis which all series inherit by
    default.</summary>
        </member>
        <member name="P:dotnetCHARTING.Chart.YAxis">
            <summary>    Gets or Sets the main YAxis which all series inherit by
    default.</summary>
        </member>
        <member name="E:dotnetCHARTING.Chart.PostDataProcessing">
            <summary>Occurs when the the chart is completed the data
processing.</summary>
            <remarks>This event is very useful for customizing and displaying the
processed data specially when using SplitByLimit which generates
more than one series from a series.</remarks>
        </member>
        <member name="T:dotnetCHARTING.ChartArea">
            <summary>Represents an area on which series and elements are
plotted.</summary>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.#ctor">
            <summary>Initializes a new instance of the ChartArea class.</summary>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.#ctor">
            <summary>Initializes a new instance of the ChartArea class.</summary>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.#ctor(dotnetCHARTING.Series)">
            <summary>Initializes a new instance of the ChartArea class with a
Series.</summary>
            <param name="s">A series of data plotted in this chart area.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.#ctor(dotnetCHARTING.SeriesCollection)">
            <summary>Initializes a new instance of the ChartArea class with a
SeriesCollection.</summary>
            <param name="sc">Data plotted in this chart area.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.#ctor(System.String)">
            <summary>Initializes a new instance of the ChartArea class with a
title.</summary>
            <param name="title">Chart area's title, equivalent of using:
ChartArea.TitleBox.Text.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.#ctor(System.String,dotnetCHARTING.Series)">
            <summary>Initializes a new instance of the ChartArea class with a
title and SeriesCollection.</summary>
            <param name="title">Chart area's title, equivalent of using:
ChartArea.TitleBox.Text.</param>
            <param name="s">A series of data plotted in this chart area.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.#ctor(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Initializes a new instance of the ChartArea class with a
title and SeriesCollection.</summary>
            <param name="title">Chart area's title, equivalent of using:
ChartArea.TitleBox.Text.</param>
            <param name="sc">Data plotted in this chart area.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.ClearColors">
            <summary>Serves as a shortcut to make the ChartArea
transparent.</summary>
            <remarks>The following properties are set:

Background.Color = Color.Empty

Background.Bevel = false

Line.Color = Color.Empty

Shadow.Color = Color.Empty

InteriorLine.Color = Color.Empty

For each axis

AlternateGridBackground.Color = Color.Empty;

AlternateGridBackground.Mode = BackgroundMode.Color;

AlternateGridBackground.Bevel = false;

GridLine.Color = Color.Empty;

ZeroLine.Color = Color.Empty;</remarks>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.GetCoordinates">
            <summary>Gets the coordinates of this ChartArea after
the chart is rendered.</summary>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.GetRectangle">
            <summary>Gets a Rectangle object indicating this
ChartArea's position and size after the chart is
rendered.</summary>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.GetXZoomChartArea(dotnetCHARTING.Axis,dotnetCHARTING.ScaleRange,dotnetCHARTING.Line)">
            <summary>Gets a chart area which expands the specified x axis at the
specified scale range and allows vieweing data in greater
detail.</summary>
            <returns/>
            <param name="axis">The x axis to zoom.</param>
            <param name="sr">The scale range on the axis to expand.</param>
            <param name="line">A line object used to indicate that the resulting chart area
is zooming into the original one.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartArea.GetYZoomChartArea(dotnetCHARTING.Axis,dotnetCHARTING.ScaleRange,dotnetCHARTING.Line)">
            <summary>Gets a chart area which expands the specified y axis at the
specified scale range and allows vieweing data in greater
detail.</summary>
            <returns/>
            <param name="axis">The y axis to zoom.</param>
            <param name="sr">The scale range on the axis to expand.</param>
            <param name="line">A line object used to indicate that the resulting chart area
is zooming into the original one.</param>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.Background">
            <summary>Gets or sets a background object used to fill the interior of
this chart area.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.DateGrouping">
            <summary>Gets or sets a TimeInterval enumeration which determines how
the values of a given series are aggregated by date when retrieved
from a database.</summary>
            <remarks>Controls how the values of a given series are grouped by
date. In order to use this option the second column returned by the
SqlStatement must be a date/time. Options include Minutes, Hours,
Days, Weeks, Months, Quarters and Years where any StartDate and
EndDate can be used and the chart will show all values
sequentially. There are additional options for Hour/Minute,
Day/Hour, Week/Day, Month/Day, Year/Quarter and Year/Month in these
cases there are 2 special considerations 1) only a single day /
week / month / or year is charted and 2) if the date range is
greater than the period type (e.g. 1 day / 1 week / 1 month / 1
year) values are totalled over that period. There are also
shortcuts for the grouping cases of Hour (Hours/Minute), Day
(Day/Hour), Week(Week/Day), Month (Month/Day) and Year
(Year/Month). See all time interval options. This feature
automatically groups multiple data points over a given date range
into the specific date grouping you select. When DateGrouping is
enabled you must ensure that each series within a given chart
returns date/time data for the second column returned by the
SqlStatement.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.DateGroupingCalculation">
            <summary>Gets or sets an enum which determines how values are grouped
to create a single element value.</summary>
            <remarks>When dategrouping is used, if an element has more than one
value, a Calculation is performed on those values.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.DateGroupingSort">
            <summary>Gets or sets a value indicating whether to maintain the sort
order of the data as it is provided.</summary>
            <remarks>When dategrouping is used and StartDate or EndDate is not
set, the data is sorted by the xAxis field by default. Setting this
property to true will maintain the sort order of the data as it is
provided.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.DefaultElement">
            <summary>Gets or sets an Element object whose properties will trickle
to all other elements on the chart unless otherwise specified. This
is a shortcut to the DefaultSeries.DefaultElement property.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.DefaultSeries">
            <summary>Gets or sets a Series object whose properties will trickle to
all other series in this chart area unless otherwise
specified.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.DrillDownIntoSeries">
            <summary>When using automated drill down in conjunction with date
grouping and multiple series, this property determines if drill
down will occur into a single series or multiple series.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.GridPosition">
            <summary>Gets or sets the layout column and row position of this
ChartArea.</summary>
            <remarks>    The default (top-left) position is 0,0. To place another
    ChartArea to the right of it, the position would be 1,0.
    The format is: ( Column, Row ) or ( X , Y )</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.HeightPercentage">
            <summary>Gets or sets a value that specifies what percentage of the
full height available for ChartAreas this ChartArea will
occupy.</summary>
            <remarks>Values range from 0 to 100. This property should be used with
multiple vertical chart area charts.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.IncludeGroupingDataInSubValues">
            <summary>When using date grouping the main value in the element is
derived from the actual values in the database or data provided to
.netCHARTING. This property controls whether these subvalues used
in the calculation to determine the element value are added to
SubValues or not. By default, such values are not added to the
element subvalues.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.InteriorLine">
            <summary>Gets or sets a line object which is drawn inside the chart
area.</summary>
            <remarks>The interior line can be seen when the chart is drawn in
3D.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.Label">
            <summary>Gets or sets a label object which draws a string inside the
chart area.</summary>
            <remarks>The label will be drawn in the upper left corner of the
chart.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.LegendBox">
            <summary>Gets or sets a LegendBox object associated with this chart
area.</summary>
            <remarks>This property is null by default. By instantiating a new
LegendBox, LegendEntry objects of the series or element in this
chart area will appear in this LegendBox. Otherwise, they would
appear in the main chart area's legend box
(Chart.ChartArea.LegendBox).</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.LimitPrimarySeries">
            <summary>In a multiple series chart, this property controls the
primary series used for the Limit operation. Other series' elements
will be matched with the primary series elements and that order
will be maintained regardless of the values of the other series.
For example, if you limit to the top 5 values and set the
LimitPrimarySeries to the sales series other series such as dollar
amount or quantity would not affect which elements were ultimately
selected for the chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.Line">
            <summary>Gets or sets the Line object used to draw the outline of this
chart area.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.Padding">
            <summary>Gets or sets the padding or spacing of chart objects plotted
on this ChartArea. This applies only to radar, pie,
and gauge charts.</summary>
            <remarks>To control column and cylinder spacing see link below.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.Series">
            <summary>Gets or sets a series which is added to the chart's main
SeriesCollection when the Chart.SeriesCollection.Add() method is
invoked.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.SeriesCollection">
            <summary>Adds Series or
SeriesCollection
objects to the chart area.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.Shadow">
            <summary>Gets or sets the Shadow cast under this box.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.StartDateOfYear">
            <summary>Gets or sets a DateTime object to determine the start month
of the year when

DateGrouping is used.</summary>
            <remarks>This property determine the start month of the year. The
default is January.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.StartDayOfWeek">
            <summary>Gets or sets a DayOfWeek enumeration that indicates the
starting day of the week when DateGrouping is used.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.Title">
            <summary>Gets or sets the ChartArea's title.

Equivalent to ChartArea.TitleBox.Label.Text.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.TitleBox">
            <summary>Gets or sets a title box (dotnetCHARTING.Box) object
associated with this ChartArea.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.ValueLabel">
            <summary>Gets or sets a label that specifies the font and color of
element labels drawn on the chart.

Equivalent to:
Chart.DefaultSeries.DefaultElement.SmartLabel</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.Visible">
            <summary>Gets or sets a value that indicates whether this chart area
is visible.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.WidthPercentage">
            <summary>    Gets or sets a value that specifies what percentage of
    the full width available for ChartAreas this ChartArea will
    occupy.</summary>
            <remarks>Values range from 0 to 100. This property should be used with
multiple horizontal chart area charts.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.XAxis">
            <summary>Gets or sets the X axis of this chart area.</summary>
            <remarks>When the axis is specified, series plotted on this area will
automatically use this x axis, unless otherwise specified.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartArea.YAxis">
            <summary>Gets or sets the Y axis of this chart area.</summary>
            <remarks>When the axis is specified, series plotted on this area will
automatically use this y axis, unless otherwise specified.</remarks>
        </member>
        <member name="T:dotnetCHARTING.ChartAreaCollection">
            <summary>Contains a collection of ChartArea objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.ChartAreaCollection.#ctor(dotnetCHARTING.ChartArea[])">
            <summary>Creates a new instance of ChartAreaCollection with the
specified list of ChartArea objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.ChartAreaCollection.Add">
            <summary>Adds a specified ChartAreaCollection to this
collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.ChartAreaCollection.Add(dotnetCHARTING.ChartAreaCollection)">
            <summary>Adds a specified ChartAreaCollection to this
collection.</summary>
            <param name="chartAreaCollection">The ChartAreaCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartAreaCollection.Add(dotnetCHARTING.ChartArea[])">
            <summary>Adds the specified ChartArea objects to this
collection.</summary>
            <param name="chartAreaList">A list of ChartArea objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartAreaCollection.Contains(dotnetCHARTING.ChartArea)">
            <summary>Determines whether this collection contains a specified
ChartArea.</summary>
            <returns>true if the specified ChartArea belongs to this collection;
otherwise, false.</returns>
            <param name="chartArea">The ChartArea to find.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartAreaCollection.IndexOf(dotnetCHARTING.ChartArea)">
            <summary>Determines the index of a specified ChartArea in this
collection.</summary>
            <returns>The zero-based index of the specified ChartArea.</returns>
            <param name="chartArea">The ChartArea to find.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartAreaCollection.Insert(System.Int32,dotnetCHARTING.ChartArea)">
            <summary>Inserts a ChartArea into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the ChartArea.</param>
            <param name="chartArea">The ChartArea to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.ChartAreaCollection.Remove(dotnetCHARTING.ChartArea)">
            <summary>Removes a specified ChartArea from this collection.</summary>
            <param name="chartArea">The ChartArea to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.ChartAreaCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.ChartAreaLayout">
            <summary>Encapsulates a set of options that control the layout of
multiple chart areas in a single chart image.</summary>
        </member>
        <member name="P:dotnetCHARTING.ChartAreaLayout.AlignUnrelatedAxis">
            <summary>Gets or sets a value that indicates whether chart areas
oriented opposite to the grid layout mode's priority orientation
can be placed next to chart areas that don't share any axes.</summary>
            <remarks>This setting applies only to modes VerticalPriority and
HorizontalPriority.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ChartAreaLayout.Mode">
            <summary>Gets or sets the a ChartAreaLayoutMode.</summary>
        </member>
        <member name="T:dotnetCHARTING.DataEngine">
            <summary>Acquires and manipulates data from databases or other
sources, then creates a SeriesCollection which is consumed by the
chart control.</summary>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.#ctor">
            <summary>Initializes a new instance of the DataEngine class.</summary>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.#ctor">
            <summary>Initializes a new instance of the DataEngine class.</summary>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.#ctor(System.Object)">
            <summary>Initializes a new instance of the DataEngine class with a
data object.</summary>
            <param name="dataObj">Supported Data Objects



DataSet

DataTable

DataView

String (xml file name or xml string)</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.#ctor(System.Object,System.String)">
            <summary>Initializes a new instance of the DataEngine class with a
data object and mapped DataFields.</summary>
            <param name="dataObj">Supported Data Objects



DataSet

DataTable

DataView

String (xml file name or xml string)</param>
            <param name="dataFields">See Gettings Started &gt; Tutorials &gt; Data Fields</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.#ctor(System.String)">
            <summary>Initializes a new instance of the DataEngine class with a
connection string.</summary>
            <param name="conn">Initial connection string.</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the DataEngine class with a
ConnectionString and SqlStatement.</summary>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the DataEngine class with a
ConnectionString, SqlStatement, and DataFields.</summary>
            <param name="conn">Connection String</param>
            <param name="sqlStatement">Sql statement</param>
            <param name="dataFields">Data fields</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.#ctor(System.String,System.String,dotnetCHARTING.TimeInterval)">
            <summary>Initializes a new instance of the DataEngine class with a
ConnectionString, SqlStatement, and DateGrouping.</summary>
            <param name="conn">Connection String</param>
            <param name="sqlStatement">Sql statement</param>
            <param name="dateGrouping">DateGrouping</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)">
            <summary>Adds a stored procedure when to use in conjunction with
StoredProcedure.</summary>
            <remarks>This method is optionally used in conjunction with the
StoredProcedure property to specify any number of parameters for
the stored proc. A number of field types are supported.
de.AddParameter("MyParameter","MyValue",FieldType.Text)</remarks>
            <param name="paramName">String specifying the parameter name.</param>
            <param name="paramValue">String pecifying the parameter value.</param>
            <param name="paramType">A FieldType enumeration specifying the parameter type.</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.GetFinancialSeries">
            <summary>See String).</summary>
            <returns/>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.GetSeries">
            <summary>Gets a SeriesCollection based on a data object and mapped
DataFields.</summary>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.GetSeries(System.Object,System.String)">
            <summary>Gets a SeriesCollection based on a data object and mapped
DataFields.</summary>
            <returns/>
            <param name="dataObject">Supported Data Objects



DataSet

DataTable

DataView

String (xml file name or Xml string)</param>
            <param name="dataFields">Mapped DataFields</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.GetSeries(System.String,System.String)">
            <summary>Gets a SeriesCollection based on a connection string and SQL
query statement.</summary>
            <returns/>
            <param name="connectionString">The connection string or path and file name of an mdb
database.</param>
            <param name="sqlStatement">The SQL statement.</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.GetSeries(System.String,System.String,System.String)">
            <summary>Gets a SeriesCollection based on a connection string and SQL
query statement and mapped DataFields.</summary>
            <returns/>
            <param name="connectionString">The connection string or path and file name of an mdb
database.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="dataFields">Mapped DataFields. See Gettings Started &gt; Tutorials &gt;
Data Fields</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.GetSeries(System.String,System.String,dotnetCHARTING.TimeInterval)">
            <summary>Gets a SeriesCollection based on a connection string, SQL
query statement, and DateGrouping.</summary>
            <returns/>
            <param name="connectionString">The connection string or path and file name of an mdb
database.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="dateGrouping">Mapped DataFields. See Gettings Started &gt; Tutorials &gt;
Data Fields</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.GetSeries(System.Object)">
            <summary>Initiates data acquisition and processing based on the
specified data object.</summary>
            <returns>A SeriesCollection containting the resulting chart
data.</returns>
            <param name="dataObj">A data object.</param>
        </member>
        <member name="M:dotnetCHARTING.DataEngine.GetSeries">
            <summary>Initiates data acquisition and processing based on the
specified data engine settings.</summary>
            <remarks>When ChartType is set to Financial and DateGrouping is
specified, high, low, open, and close element values will be
calculated based on the price field. Otherwise they will not be
generated.</remarks>
            <returns>A SeriesCollection containting the resulting chart
data.</returns>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.ChartObject">
            <summary>Sets the Chart object.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.ChartType">
            <summary>Gets or sets the ChartType enumeration that sets the default
DataFields for each type.</summary>
            <remarks>See Getting Started &gt; Tutorials &gt; DataFields for more
info.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.CommandTimeout">
            <summary>Gets or sets the wait time before terminating the attempt to
execute a command and generating an error.</summary>
            <remarks>The time (in seconds) to wait for the command to execute. The
default value is 30 seconds.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.ConnectionString">
            <summary>Gets or sets the string used to open a SQL Server, Access, or
Excel database.</summary>
            <remarks>Access, Excel and SQL server are supported and automatically
detected based on the connection string specified.
See Getting Started &gt; Tutorials &gt; Connecting to
data.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.CultureName">
            <summary>Gets or sets the culture name used when element names are
populated with values such as dates.</summary>
            <remarks>See the CultureInfo class for possible names of a
culture.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.Data">
            <summary>Gets or sets a DataTable, DataSet, DataView, XML file name,
Xml string or an object that implement IEnumerable, ArrayList or
HashTable used to generate a SeriesCollection.</summary>
            <remarks>When not connecting to a database directly using
ConnectionString and SqlStatement, this property offers an
alternative method for obtaining database data.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DatabaseCultureName">
            <summary>Gets or sets the culture name used when StartDate and EndDate
insert to the sql statement. This property only necessary to set if
the web server and database server having different culture
setting.</summary>
            <remarks>See the CultureInfo class for possible names of a
culture.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DataFields">
            <summary>Gets or sets a value that specifies the 'database column' to
'element value' relationship.</summary>
            <remarks>See Getting Started &gt; Tutorials &gt; Data Fields for
more info.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DataGrid">
            <summary>Gets or sets the control object of a datagrid control that
will be populated with the charted data.</summary>
            <remarks>This property accepts a datagrid control object. If set, the
data represented in the chart is populated in the datagrid of the
same name. You must also define a datagrid control within the same
script. This property is useful when displaying tabular chart data
along with your charts.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DataGridFormatString">
            <summary>Gets or sets the format string which determines number
formatting in the datagrid.</summary>
            <remarks>See 'Formatting Types' in your msdn documentation for a
complete list of options.



Some shortcuts are also provided for specific settings including
"C" or "currency" , "E" or "scientific" , "F" or "fixed" , "G" or
"general" and "N,2" for normal and the number after the comma
determines the number of decimal places.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DataGridSeriesHeader">
            <summary>Gets or sets the header label of the DataGrid control
specified by the DataGrid property.</summary>
            <remarks>This property controls the header label used for the datagrid
series name column. If set to "none" the series name column will be
removed. If set to "XAxisLabel", xAxis label set as the header
label of the datagrid.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DataGridTranspose">
            <summary>Gets or sets a value indicating whether the data with which
the specified DataGrid control is populated will be
transposed.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DataProviderType">
            <summary>Specifies a database type. Defaults to OleDb (Access
database).</summary>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DateGrouping">
            <summary>Gets or sets the date grouping of data returned from your
database.</summary>
            <remarks>Controls how the values of a given series are grouped by
date. In order to use this option the first column returned by the
SqlStatement must be a date/time. Options include Minutes, Hours,
Days, Weeks, Months, Quarters and Years where any StartDate and
EndDate can be used and the chart will show all values
sequentially. There are additional options for Hour/Minute,
Day/Hour, Week/Day, Month/Day, Year/Quarter and Year/Month in these
cases there are 2 special considerations 1) only a single day /
week / month / or year is charted and 2) if the date range is
greater than the period type (e.g. 1 day / 1 week / 1 month / 1
year) values are totalled over that period. There are also
shortcuts for the grouping cases of Hour (Hours/Minute), Day
(Day/Hour), Week(Week/Day), Month (Month/Day) and Year
(Year/Month). See all time interval options. This feature
automatically groups multiple data points over a given date range
into the specific date grouping you select. When DateGrouping is
enabled you must ensure that each series within a given chart
returns date/time data for the first column returned by the
SqlStatement.
Controls how the values of a given series are grouped by date. In
order to use this option the first column returned by the
SqlStatement must be a date/time. Options include Minutes, Hours,
Days, Weeks, Months, Quarters and Years where any StartDate and
EndDate can be used and the chart will show all values
sequentially. There are additional options for Hour/Minute,
Day/Hour, Week/Day, Month/Day, Year/Quarter and Year/Month in these
cases there are 2 special considerations 1) only a single day /
week / month / or year is charted and 2) if the date range is
greater than the period type (e.g. 1 day / 1 week / 1 month / 1
year) values are totalled over that period. There are also
shortcuts for the grouping cases of Hour (Hours/Minute), Day
(Day/Hour), Week(Week/Day), Month (Month/Day) and Year
(Year/Month). See all time interval options. This feature
automatically groups multiple data points over a given date range
into the specific date grouping you select. When DateGrouping is
enabled you must ensure that each series within a given chart
returns date/time data for the first column returned by the
SqlStatement.



See Getting Started &gt; Tutorials &gt; Data Engine</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DateGroupingCalculation">
            <summary>Gets or sets an enum which determines how values are grouped
to create a single element value.</summary>
            <remarks>When dategrouping is used, if an element has more than one
value, a Calculation is performed on those values.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DateGroupingSort">
            <summary>Gets or sets a value indicating whether to maintain the sort
order of the data as it is provided.</summary>
            <remarks>When dategrouping is used and StartDate or EndDate is not
set, the data is sorted by the xAxis field by default. Setting this
property to true will maintain the sort order of the data as it is
provided.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.DrillDownIntoSeries">
            <summary>When using automated drill down in conjunction with date
grouping and multiple series, this property determines if drill
down will occur into a single series or multiple series.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.EndDate">
            <summary>Gets or sets the ending date used with SqlStatement to query
filtered data from a database.</summary>
            <remarks>This property is used for the SqlStatement property where the
#EndDate# token is replaced with the value set to this
property.

See: Getting Started &gt; Tutorials &gt; Data Engine</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.ErrorMessage">
            <summary>Gets an error message which will be available if this
DataEngine instance fails after a call to
GetSeries().</summary>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.FormatString">
            <summary>Gets or sets the format string used when element names are
populated with values such as dates.</summary>
            <remarks>    This property usually used with conjunction of date
    grouping. If it doesn't set, use an appropriate format for the
    date grouping. For format information see DateTimeFormatInfo or
    NumberFormatInfo</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.Limit">
            <summary>Gets or sets the limit number of elements returned for each
series when data is generated. Gets or sets the limit number of
elements returned for each series when data is generated. This
property determines the number of elements to include in the
limited return. The limit string can be a number "3" or "2x3". In
the second format, the first number determines the group position
and the second number is the limit. By setting "2x3" with top limit
mode, it only return the second "3" maximum elements.</summary>
            <remarks>    If DateGrouping is used, limit has no effect. In such a
    case, StartDate and EndDate must be used to limit the generated
    element count.
    
    
    See Getting Started &gt; Tutorials &gt; Data
    Engine.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.LimitMode">
            <summary>Determine the type of limitation. Default is Top.</summary>
            <remarks>This property works in conjunction with Limit or SplitByLimit
to determine which elements or series should be included or
excluded.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.LimitPrimarySeries">
            <summary>In a multiple series chart, this property controls the
primary series used for the Limit operation. Other series' elements
will be matched with the primary series elements and that order
will be maintained regardless of the values of the other series.
For example, if you limit to the top 5 values and set the
LimitPrimarySeries to the sales series other series such as dollar
amount or quantity would not affect which elements were ultimately
selected for the chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.OtherElementLabel">
            <summary>Gets or sets the label used for the element or series created
when using Limit or SplitByLimit and setting ShowOther to
true.</summary>
            <remarks>See Getting Started &gt; Tutorials &gt; Data Engine for more
info.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.ParameterCollection">
            <summary>Gets or sets a collection of Parameter objects used in
conjunction with the StoredProcedure property.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.PopulateDateGroupingSubValues">
            <summary>When using date grouping the main value in the element is
derived from the actual values in the database or data provided to
.netCHARTING. This property controls whether these subvalues used
in the calculation to determine the element value are added to
SubValues or not. By default, such values are not added to the
element subvalues.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.ShowOther">
            <summary>Gets or sets a value that indicates whether the additional
series not shown due to the use of SplitByLimit, or elements not
shown due to the use of Limit, are aggregated into a single series
or element.</summary>
            <remarks>See Gettings Started &gt; Tutorials &gt; Data Engine for more
info.

The default is false.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.SplitByLimit">
            <summary>Gets or sets the number of series created using
SplitBy.</summary>
            <remarks>    This property works with conjunction of
    
    LimitMode property and determines the number of series to
    include in the return. The limit string can be a number "3" or
    "2x3". In the second format, the first number determines the
    group positon and the second number is the limit. By setting
    "2x3" with top limit mode, it only return the second "3"
    maximum series.
    See Getting Started &gt; Tutorials &gt; Data
    Engine.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.SqlStatement">
            <summary>The SQL statement used to obtain the charting data.</summary>
            <remarks>    The first column returned is used for the X values, and
    the second for the Y values. The first also has special
    handling if dates are returned as the DateGrouping property can
    be used for intelligent date handling and grouping. The third
    column is optional and is used only for SplitBy. When a third
    column is set it is used automatically to create a unique
    series based on each unique value in this column.
    NOTE: All date values in your SQL statements should be
    wrapped with the pound symbol: #10/25/2002#, regardless if
    Access or SQL server is used. Also the #StartDate# and
    #EndDate# tokens can be used in which case the dates set for
    these properties will be set in place of the tokens before the
    SqlStatement is executed.
    See Getting Started &gt; Tutorials &gt; Queries for more
    info.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.StartDate">
            <summary>Gets or sets the starting date used with SqlStatement to
query filtered data from a database.</summary>
            <remarks>This property is used for the SqlStatement property where the
#StartDate# token is replaced with the value set to this
property.

See: Getting Started &gt; Tutorials &gt; Data Engine</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.StartDateOfYear">
            <summary>Gets or sets a DateTime object to determine the start month
of the year when

DateGrouping is used.</summary>
            <remarks>This property determine the start month of the year. The
default is January.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.StartDayOfWeek">
            <summary>Gets or sets a DayOfWeek enumeration that determines the day
which will be used as the starting day of the week for the
dategrouping functionality.</summary>
            <remarks>This property used with conjunction of date grouping by
weeks. The default is Sunday.</remarks>
        </member>
        <member name="P:dotnetCHARTING.DataEngine.StoredProcedure">
            <summary>This property accepts the name of a stored procedure to be
used in place of the SqlStatement property in order to obtain data
for the chart.</summary>
            <remarks>Stored Procedures also work with parameters, see the
FieldType) method.
See Getting Started &gt; Tutorials &gt; Connecting to Data for more
info.</remarks>
        </member>
        <member name="T:dotnetCHARTING.DataSource">
            <summary>Represents a single or related set of .netCHARTING data-based
objects that specify a data source used to parse tokens and
populate custom legend boxes with LegendEntry objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.DataSource.EvaluateExpression(System.String,dotnetCHARTING.ChartType,System.Boolean)">
            <summary>Evaluates a string containing tokens that relate to this
DataSource. For example, if this DataSource represents a series,
the string "Name" will return the actual name of the series. See
the token reference for more information on available
tokens.</summary>
            <remarks>All other string features such as expressions and embedded
formatting are supported by this method.</remarks>
            <param name="text">String with tokens to evaluate.</param>
            <param name="cType">Chart type used with this DataSource.</param>
            <param name="urlEncode">When true, the returned string is urlEncoded.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromAxisMarker(dotnetCHARTING.Axis,dotnetCHARTING.AxisMarker)">
            <summary>Creates an AxisMarker DataSource object from an AxisMarker
object.</summary>
            <param name="sourceAxis">Axis containing the axis marker.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElement">
            <summary>Creates a DataSource object from a SeriesColleciton, Series,
and Element.</summary>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32,dotnetCHARTING.DataSourceType)">
            <summary>Creates a DataSource object from a SeriesColleciton, Series,
and Element.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the series of the given
element.</param>
            <param name="sourceSeriesIndex">Index of the series that contains the given element.</param>
            <param name="sourceElementIndex">Index of the element in the specified series.</param>
            <param name="splitIntoType">Split into type when this DataSource is used to populate a
legend box.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.String,System.String,dotnetCHARTING.DataSourceType)">
            <summary>Creates a DataSource object from a SeriesColleciton, Series,
and Element.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the series of the given
element.</param>
            <param name="sourceSeriesName">Name of the series that contains the given element.</param>
            <param name="sourceElementName">Name of the given element.</param>
            <param name="splitIntoType">Split into type when this DataSource is used to populate a
legend box.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.Int32,System.String,dotnetCHARTING.DataSourceType)">
            <summary>Creates a DataSource object from a SeriesColleciton, Series,
and Element.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the series of the given
element.</param>
            <param name="sourceSeriesIndex">Index of the series that contains the given element.</param>
            <param name="sourceElementName">Name of the given element.</param>
            <param name="splitIntoType">Split into type when this DataSource is used to populate a
legend box.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32)">
            <summary>Creates a DataSource object class from a SeriesColleciton,
Series, and Element.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the series of the given
element.</param>
            <param name="sourceSeriesIndex">Index of the series that contains the given element.</param>
            <param name="sourceElementIndex">Index of the element in the specified series.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.String,System.String)">
            <summary>Creates a DataSource object from a SeriesColleciton, Series,
and Element.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the series of the given
element.</param>
            <param name="sourceSeriesName">Name of the series that contains the given element.</param>
            <param name="sourceElementName">Name of the given element.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.Int32,System.String)">
            <summary>Creates a DataSource object from a SeriesColleciton, Series,
and Element.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the series of the given
element.</param>
            <param name="sourceSeriesIndex">Index of the series that contains the given element.</param>
            <param name="sourceElementName">Name of the given element.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.Element)">
            <summary>Creates a DataSource object from an element Element.</summary>
            <param name="e">The element.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElementGroup">
            <summary>Creates a DataSource object from a SeriesColleciton, and
Element index.</summary>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElementGroup(dotnetCHARTING.SeriesCollection,System.Int32,dotnetCHARTING.DataSourceType)">
            <summary>Creates a DataSource object from a SeriesColleciton, and
Element index.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the given group of
elements.</param>
            <param name="sourceGroupIndex">Index of the element in each series that makes up the
group.</param>
            <param name="splitIntoType">Name of the given element.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElementGroup(dotnetCHARTING.SeriesCollection,System.String,dotnetCHARTING.DataSourceType)">
            <summary>Creates an Element Group DataSource object from a
SeriesColleciton, and Element name.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the given group of
elements.</param>
            <param name="sourceGroupName">Name of the element in each series that makes up the
group.</param>
            <param name="splitIntoType">Name of the given element.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElementGroup(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Creates an Element Group DataSource object from a
SeriesColleciton, and Element index.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the given group of
elements.</param>
            <param name="sourceGroupIndex">Index of the element in each series that makes up the
group.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromElementGroup(dotnetCHARTING.SeriesCollection,System.String)">
            <summary>Creates an Element Group DataSource object from a
SeriesColleciton, and Element name.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the given group of
elements.</param>
            <param name="sourceGroupName">Index of the element in each series that makes up the
group.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromScaleRange(dotnetCHARTING.Axis,dotnetCHARTING.ScaleRange)">
            <summary>Creates a DataSource object from an ScaleRange object.</summary>
            <param name="sourceAxis">Axis containing the scale range.</param>
            <param name="sr">Given ScaleRange object.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromSeries">
            <summary>Creates a DataSource object from a SeriesColleciton, and
Series.</summary>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromSeries(dotnetCHARTING.SeriesCollection,System.Int32,dotnetCHARTING.DataSourceType)">
            <summary>Creates a DataSource object from a SeriesColleciton, and
Series.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the given series.</param>
            <param name="sourceSeriesIndex">Index of the given series.</param>
            <param name="splitIntoType">Split into type when this DataSource is used to populate a
legend box.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromSeries(dotnetCHARTING.SeriesCollection,System.String,dotnetCHARTING.DataSourceType)">
            <summary>Creates a DataSource object from a SeriesColleciton, and
Series.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the given series.</param>
            <param name="sourceSeriesName">Name of the given series.</param>
            <param name="splitIntoType">Split into type when this DataSource is used to populate a
legend box.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromSeries(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Creates a DataSource object from a SeriesColleciton, and
Series.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the given series.</param>
            <param name="sourceSeriesIndex">Index of the given series.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromSeries(dotnetCHARTING.SeriesCollection,System.String)">
            <summary>Creates a DataSource object from a SeriesColleciton, and
Series.</summary>
            <param name="sourceSeriesCollection">SeriesCollection containing the given series.</param>
            <param name="sourceSeriesName">Name of the given series.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromSeries(dotnetCHARTING.Series)">
            <summary>Creates a DataSource object from a Series.</summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromSeriesCollection">
            <summary>Creates a DataSource object from a SeriesColleciton.</summary>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromSeriesCollection(dotnetCHARTING.SeriesCollection,dotnetCHARTING.DataSourceType)">
            <summary>Creates a DataSource object from a SeriesColleciton.</summary>
            <param name="sourceSeriesCollection">Given SeriesCollection.</param>
            <param name="splitIntoType">Split into type when this DataSource is used to populate a
legend box.</param>
        </member>
        <member name="M:dotnetCHARTING.DataSource.FromSeriesCollection(dotnetCHARTING.SeriesCollection)">
            <summary>Creates a DataSource object from a SeriesColleciton.</summary>
            <param name="sourceSeriesCollection">Given SeriesCollection.</param>
        </member>
        <member name="P:dotnetCHARTING.DataSource.op_Implicit">
            <summary>Creates a DataSource from the specified
SeriesCollection.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataSource.op_Implicit">
            <summary>Creates a DataSource from the specified
AxisMarker.</summary>
            <returns/>
            <param name="am">AxisMarker that is used as the as the DataSource.</param>
        </member>
        <member name="P:dotnetCHARTING.DataSource.op_Implicit">
            <summary>Creates a DataSource from the specified
Element.</summary>
            <returns/>
            <param name="e">Element that is used as the as the DataSource.</param>
        </member>
        <member name="P:dotnetCHARTING.DataSource.op_Implicit">
            <summary>Creates a DataSource from the specified Series.</summary>
            <returns/>
            <param name="s">Series that is used as the as the DataSource.</param>
        </member>
        <member name="P:dotnetCHARTING.DataSource.op_Implicit">
            <summary>Creates a DataSource from the specified
SeriesCollection.</summary>
            <returns/>
            <param name="sc">SeriesCollection that is used as the as the
DataSource.</param>
        </member>
        <member name="P:dotnetCHARTING.DataSource.Axis">
            <summary>Gets or sets the represented axis.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataSource.AxisMarker">
            <summary>Gets or sets the represented AxisMarker.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataSource.Element">
            <summary>Gets or sets the represented element.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataSource.GroupIndex">
            <summary>Gets or sets the index of series for the element
group.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataSource.ScaleRange">
            <summary>Gets or sets the represented ScaleRange object.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataSource.Series">
            <summary>Gets or sets the represented or parent series.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataSource.SeriesCollection">
            <summary>Gets or sets the represented or parent
SeriesCollection.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataSource.SplitInto">
            <summary>Specifies the type of DataSource to split
this data source into when it is used to populate a legend
box.</summary>
        </member>
        <member name="P:dotnetCHARTING.DataSource.Type">
            <summary>Gets or sets the DataSourceType of this DataSource.</summary>
        </member>
        <member name="T:dotnetCHARTING.Element">
            <summary>Represents a element object or data point on the
chart.</summary>
            <remarks>The Element object contains properties that
describe it's value such as YValue, YDateTime, BubbleSize etc.. It
also defines defines objects and properties that specify the
element's behavior and appearance.

Element properties that don't describe it's value can be set
simultaneously for all element in a Series by setting them with
Series.DefaultElement.___ For
example:(Chart.DefaultSeries.DefaultElement.SmartLabel.Text =
"YValue").


See also20Model.html"&gt;Data Model
Tutorial</remarks>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor">
            <summary>Initializes a new instance of the Element class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor">
            <summary>Initializes a new instance of the Element class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String)">
            <summary>Initializes a new instance of the Element class with the
specified name.</summary>
            <param name="name">Name of this element.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>Initialize a new instance of the Element class with
(YDateTimeStart, YDateTime) or (XDateTime, YDateTime) as the
initial element value types.</summary>
            <param name="name">Name of this element.</param>
            <param name="dateTime1">Sets YDateTimeStart and XDateTime</param>
            <param name="dateTime2">Sets YDateTime</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.DateTime,System.Double)">
            <summary>Initialize a new instance of the Element class with
(YDateTimeStart, YDateTime, Complete) or (XDateTime, YDateTime,
BubbleSize) as the initial element value types.</summary>
            <param name="name">Name of this element.</param>
            <param name="dateTime1">Sets YDateTimeStart and XDateTime</param>
            <param name="dateTime2">Set YDateTime</param>
            <param name="double1">Sets Complete and BubbleSize</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.Double)">
            <summary>Initialize a new instance of the Element class with
(XDateTime, YValue) or (XDateTime, Close) as the initial element
value types.</summary>
            <param name="name">Name of this element.</param>
            <param name="dateTime1">Sets XDateTime</param>
            <param name="double1">Sets YValue and Close</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.Double,System.Double)">
            <summary>Initialize a new instance of the Element class with
(XDateTime, YValue, BubbleSize) or (XDateTime, Close, Volume) as
the initial element value types.</summary>
            <param name="name">Name of this element.</param>
            <param name="dateTime1">Sets XDateTime</param>
            <param name="double1">Sets Yvalue and Close</param>
            <param name="double2">Sets BubbleSize and Volume</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.Double,System.Double,System.Double,System.Double)">
            <summary>Initialize a new instance of the Element class with
(XDateTime, High, Low, Open, Close) as the initial element value
types.</summary>
            <param name="name">Name of this element.</param>
            <param name="dateTime1">Sets XDateTime</param>
            <param name="double1">Sets High</param>
            <param name="double2">Sets Low</param>
            <param name="double3">Sets Open</param>
            <param name="double4">Sets Close</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Initialize a new instance of the Element class with
(XDateTime, High, Low, Open, Close, Volume) as the initial element
value types.</summary>
            <param name="name">Name of this element.</param>
            <param name="dateTime1">Sets XDateTime</param>
            <param name="double1">Sets High</param>
            <param name="double2">Sets Low</param>
            <param name="double3">Sets Open</param>
            <param name="double4">Sets Close</param>
            <param name="double5">Sets Volume</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Double)">
            <summary>Initialize a new instance of the Element class with (YValue)
as the initial element value type.</summary>
            <param name="name">Name of this element.</param>
            <param name="double1">Sets YValue</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Double,System.DateTime)">
            <summary>Initialize a new instance of the Element class with (XValue,
YDateTime) as the initial element value types.</summary>
            <param name="name">Name of this element.</param>
            <param name="double1">Sets XValue</param>
            <param name="dateTime1">Sets YDateTime</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Double,System.DateTime,System.Double)">
            <summary>Initialize a new instance of the Element class with (XValue,
YDateTime, BubbleSize) as the initial element value types.</summary>
            <param name="name">Name of this element.</param>
            <param name="double1">Sets XValue</param>
            <param name="dateTime1">Sets YDateTime</param>
            <param name="double2">Sets BubbleSize</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Double,System.Double)">
            <summary>Initialize a new instance of the Element class with
(YValueStart, YValue) or (XValue, YValue) as the initial element
value types.</summary>
            <param name="name">Name of this element.</param>
            <param name="double1">Sets YValueStart and XValue</param>
            <param name="double2">Sets YValue</param>
        </member>
        <member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>Initialize a new instance of the Element class with
(YValueStart, YValue, Complete) or (XValue, YValue, BubbleSize) as
the initial element value types.</summary>
            <param name="name">Name of this element.</param>
            <param name="double1">Sets YValueStart and XValue</param>
            <param name="double2">Sets YValue</param>
            <param name="double3">Sets Complete and BubbleSize</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Add">
            <summary>Adds the values of two elements.</summary>
        </member>
        <member name="M:dotnetCHARTING.Element.Add(dotnetCHARTING.Element,dotnetCHARTING.Element)">
            <summary>Adds the values of two elements.</summary>
            <remarks>All properties of lsh are copied to the resulting element,
then rhs properties are trickled to the resulting element.</remarks>
            <param name="lhs">An element.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Add(dotnetCHARTING.Element,System.Double)">
            <summary>Adds a value to all values of an element.</summary>
            <param name="lhs">An element.</param>
            <param name="rhs">A value.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Add(System.Double,dotnetCHARTING.Element)">
            <summary>Adds a value to all values of an element.</summary>
            <param name="lhs">A value.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Divide">
            <summary>Divides an element by another.</summary>
        </member>
        <member name="M:dotnetCHARTING.Element.Divide(dotnetCHARTING.Element,dotnetCHARTING.Element)">
            <summary>Divides an element by another.</summary>
            <remarks>All properties of lsh are copied to the resulting element,
then rhs properties are trickled to the resulting element.</remarks>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Divide(dotnetCHARTING.Element,System.Double)">
            <summary>Divides an element by a number.</summary>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">A numeric value.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Divide(System.Double,dotnetCHARTING.Element)">
            <summary>Divider a number by an element.</summary>
            <returns/>
            <param name="lhs">A numeric value.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.GetDataSource">
            <summary>Gets a DataSource object representing this
Element.</summary>
        </member>
        <member name="M:dotnetCHARTING.Element.GetPolygon">
            <summary>Gets the coordinates of the element after the chart is
generated. This can be used to draw on top of the element by
knowing its polygon coordinates.</summary>
            <returns>A PointF array of the element's polygon.</returns>
        </member>
        <member name="M:dotnetCHARTING.Element.Multiply">
            <summary>Multiplies two elements.</summary>
        </member>
        <member name="M:dotnetCHARTING.Element.Multiply(dotnetCHARTING.Element,dotnetCHARTING.Element)">
            <summary>Multiplies two elements.</summary>
            <remarks>All properties of lsh are copied to the resulting element,
then rhs properties are trickled to the resulting element.</remarks>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Multiply(dotnetCHARTING.Element,System.Double)">
            <summary>Multiplies an element by a specified numeric value.</summary>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">A numeric value.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Multiply(System.Double,dotnetCHARTING.Element)">
            <summary>Multiplies an element by a specified numeric value.</summary>
            <returns/>
            <param name="lhs">A numeric value.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Subtract">
            <summary>Subtracts an element from another.</summary>
        </member>
        <member name="M:dotnetCHARTING.Element.Subtract(dotnetCHARTING.Element,dotnetCHARTING.Element)">
            <summary>Subtracts an element from another.</summary>
            <remarks>All properties of lsh are copied to the resulting element,
then rhs properties are trickled to the resulting element.</remarks>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Subtract(dotnetCHARTING.Element,System.Double)">
            <summary>Subtracts a value from all values of an element.</summary>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">A value.</param>
        </member>
        <member name="M:dotnetCHARTING.Element.Subtract(System.Double,dotnetCHARTING.Element)">
            <summary>Subtracts all values of an element from specified
value.</summary>
            <param name="lhs">A value.</param>
            <param name="rhs">An element</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Addition">
            <summary>Adds the values of two elements.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Addition">
            <summary>Adds a value to all values of an element.</summary>
            <param name="lhs">A value.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Addition">
            <summary>Adds a value to all values of an element.</summary>
            <param name="lhs">An element.</param>
            <param name="rhs">A value.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Addition">
            <summary>Adds the values of two elements.</summary>
            <remarks>All properties of lsh are copied to the resulting element,
then rhs properties are trickled to the resulting element.</remarks>
            <param name="lhs">An element.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Division">
            <summary>Divides an element by another.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Division">
            <summary>Divider a number by an element.</summary>
            <returns/>
            <param name="lhs">A numeric value.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Division">
            <summary>Divides an element by a number.</summary>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">A numeric value.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Division">
            <summary>Divides an element by another.</summary>
            <remarks>All properties of lsh are copied to the resulting element,
then rhs properties are trickled to the resulting element.</remarks>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Multiply">
            <summary>Multiplies two elements.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Multiply">
            <summary>Multiplies an element by a specified numeric value.</summary>
            <returns/>
            <param name="lhs">A numeric value.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Multiply">
            <summary>Multiplies an element by a specified numeric value.</summary>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">A numeric value.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Multiply">
            <summary>Multiplies two elements.</summary>
            <remarks>All properties of lsh are copied to the resulting element,
then rhs properties are trickled to the resulting element.</remarks>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Subtraction">
            <summary>Subtracts an element from another.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Subtraction">
            <summary>Subtracts all values of an element from specified
value.</summary>
            <param name="lhs">A value.</param>
            <param name="rhs">An element</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Subtraction">
            <summary>Subtracts a value from all values of an element.</summary>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">A value.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.op_Subtraction">
            <summary>Subtracts an element from another.</summary>
            <remarks>All properties of lsh are copied to the resulting element,
then rhs properties are trickled to the resulting element.</remarks>
            <returns/>
            <param name="lhs">An element.</param>
            <param name="rhs">An element.</param>
        </member>
        <member name="P:dotnetCHARTING.Element.Annotation">
            <summary>Gets or sets this element's Annotation.</summary>
            <remarks>The annotation's position will be the same as this element's
position, usless specified. Element tokens can be used by this
annotation's text to describe the element.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.AxisMarker">
            <summary>Gets or sets this element's AxisMarker.</summary>
            <remarks>This axis marker will highlight a section of the axis on
which this element's name appears.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.BubbleSize">
            <summary>Gets or sets the bubble size of this element.</summary>
            <remarks>This Element value type is used by ChartType.Bubble
only.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Close">
            <summary>Gets or sets the financial closing price of this
element.</summary>
            <remarks>This element value type is used by ChartType.Financial
only.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Color">
            <summary>Gets or sets this element's color.</summary>
            <remarks>This color will also trickle to this element's
SmartLabel.Color property, unless specified. When this
element instance is the Series.DefaultElement of a Series, this
color will trickle to that series' Line.Color property, unless
specified.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Complete">
            <summary>Gets or sets the percent complete value of this
element.</summary>
            <remarks>This Element value type is used by ChartType.Combo,
ComboHorizontal, and ComboSideBySide with Column and Cylinder
SeriesType. Primarily used to create Gantt charts.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.CustomAttributes">
            <summary>Gets a collection of custom attributes associated with this
element.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.DefaultSubValue">
            <summary>Gets or sets a default dotnetCHARTING.SubValue object used to
propagate its property settings to all SubValue objects in the
SubValues collection.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ErrorHighValue">
            <summary>Gets of sets the high error value. When set, a single
SubValue is drawn above the element's value. When ErrorLowValue is
also set, a range SubValue is drawn between the two values.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ErrorLowValue">
            <summary>Gets of sets the low error value. When set, a single SubValue
is drawn below the element's YValue value or range. When
ErrorHighValue is also set, a range SubValue is drawn between the
two values.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ErrorMinusOffset">
            <summary>Gets of sets the negative error offset. When set, a single
SubValue is drawn below the element's value.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ErrorMinusPercent">
            <summary>Gets or sets the negative error offset based on the specified
percentage of the element's YValue value or range. When set, a
single SubValue is drawn below the element's value. When
ErrorPlusPercent is also set, a range SubValue is drawn between the
two points.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ErrorOffset">
            <summary>Gets or sets the error offset. The offset represents a range,
+/- the value of the offset with respect to the element's YValue
value or range.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ErrorPercent">
            <summary>Gets or sets the error offset based on the specified
percentage of the element's YValue value or range. The offset
represents a range, +/- the percentage of the element's YValue
value or range.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ErrorPlusOffset">
            <summary>Gets of sets the positive error offset. When set, a single
SubValue is drawn above the element's value.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ErrorPlusPercent">
            <summary>Gets or sets the positive error offset based on the specified
percentage of the element's YValue value or range. When set, a
single SubValue is drawn above the element's value. When
ErrorMinusPercent is also set, a range SubValue is drawn between
the two points.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ExplodePieSlice">
            <summary>See ExplodeSlice</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ExplodeSlice">
            <summary>Gets or sets a value indicating whether the pie slice
represented by this element is exploded.</summary>
            <remarks>When a pie slice represents a series, that series'
DefaultElement.ExplodeSlice property indicates whether the
slice is exploded.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.ForceMarker">
            <summary>Gets or sets a value indicating whether this element's
ElementMarker is drawn when the parent Series object's SeriesType
omits the ElementMarker by default.</summary>
            <remarks>Only SeriesTypes: Line (when Use3D = false), Spline, and
Marker draw ElementMarkers by default.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.HatchColor">
            <summary>Gets or sets this element's HatchStyle color.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.HatchStyle">
            <summary>Gets or sets this element's hatch style.</summary>
            <remarks>Hatch styles are filled using HatchColor. By default the
color is transparent and may need to be specified before the hatch
appears.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.High">
            <summary>Gets or sets the financial high price of this element.</summary>
            <remarks>This element value type is used by ChartType.Financial
only.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Hotspot">
            <summary>Gets or sets the Hotspot of this
Element.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.LabelTemplate">
            <summary>Gets or sets this element's SmartLabel.Text property.</summary>
            <remarks>Element tokens can be used to describe this element.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.LegendEntry">
            <summary>Gets or sets this element's LegendEntry.</summary>
            <remarks>The legend entry represents this element in the LegendBox.
Most charts types will only show legend entries of series, not
individual elements. Changing this behavior to show the element's
legend entries is done by setting the series' Palette or
PaletteName properties.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Length">
            <summary>Gets or sets a percent value representing this element's
needle length.</summary>
            <remarks>Applies to gauge charts.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Low">
            <summary>Gets or sets the financial low price of this element.</summary>
            <remarks>This element value type is used by ChartType.Financial
only.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Marker">
            <summary>Gets or sets this element's Marker.</summary>
            <remarks>Only SeriesType options: Line (when Use3D = false), Spline,
and Marker draw ElementMarkers by default. For other SeriesTypes,
ForceMarker must be true.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Name">
            <summary>Gets or sets this element's name.</summary>
            <remarks>The name property represents the element on label
axes.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Open">
            <summary>Gets or sets the financial open price of this element.</summary>
            <remarks>This element value type is used by ChartType.Financial
only.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Point">
            <summary>Gets the element's pixel coordinate on a chart image.</summary>
            <remarks>This position is only available after the chart is
rendered.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.SecondaryColor">
            <summary>Gets or sets this element's secondary color.</summary>
            <remarks>The secondary color is used with financial series types to
indicate that the closing price (dotnetCHARTING.Element.Close) is
lower than the opening price (dotnetCHARTING.Element.Open).</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.ShapeType">
            <summary>Gets or sets the shape type of this element when the series
type is SeriesType.BubbleShape.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ShowValue">
            <summary>Gets or sets a value that indicates whether this element's
SmartLabel is visible.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.SmartLabel">
            <summary>Gets or sets this element's SmartLabel.</summary>
            <remarks>By default this label is hidden unless ShowValue is
true.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.SubValues">
            <summary>Gets a collection of SubValue objects drawn on this
Element.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.TakeColorFrom">
            <summary>Gets or sets a Series or Element object from which this
element's color will be inherited.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.ToolTip">
            <summary>Gets or sets this elements tool tip. (Shortcut to:
Element.Hotspot.Tooltip)</summary>
            <remarks>Element tokens can be used to describe this element.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.Transparency">
            <summary>Gets or sets the element color's transparency.</summary>
            <remarks>A value of 0 will have no transparency and 100 will be
completely transparent.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.URL">
            <summary>Gets or sets the element's link URL. (Shortcut to:
Element.Hotspot.URL)</summary>
            <remarks>The chart will create an image map with the specified url for
this element. Element tokens can be used to describe this element
in the url.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.URLTarget">
            <summary>Gets or sets the URL target of this element's link URL.
(Shortcut to: Element.Hotspot.URLTarget)</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.Volume">
            <summary>Gets or sets the financial volume of this element.</summary>
            <remarks>This element value type is used by ChartType.Financial
only.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.XAxisTick">
            <summary>Gets or sets an
AxisTick
object that will placed on the x axis at the position of this
element's x value. If the x axis is a category axis,
AxisTick
will not have any effect.</summary>
            <remarks>This value is null by default.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.XDateTime">
            <summary>Gets or sets the X DateTime value of this element.</summary>
            <remarks>This Element value is used with value x axes.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.XDateTimeStart">
            <summary>    Gets or sets the initial X DateTime
    value of this element.</summary>
            <remarks>Not yet implemented.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.XValue">
            <summary>Gets or sets the X value of this element.</summary>
            <remarks>This Element value is used with value x axes.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.XValueStart">
            <summary>Gets or sets the initial X value of this element.</summary>
            <remarks>Not yet implemented.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.YAxisTick">
            <summary>Gets or sets an
AxisTick
object that will placed on the y axis at the position of this
element's y value. If the x axis is a category axis,
AxisTick
will not have any effect.</summary>
        </member>
        <member name="P:dotnetCHARTING.Element.YDateTime">
            <summary>    Gets or sets the Y DateTime value of
    this element.</summary>
            <remarks>Using ChartType.ComboHorizontal the YDateTime value type
corresponds to the x axis because this allows the element to be
interchangeable between the vertical and horizontal combo
chart.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.YDateTimeStart">
            <summary>    Gets or sets the initial Y DateTime
    value of this element.</summary>
            <remarks>Using ChartType.ComboHorizontal the YDateTimeStart value type
corresponds to the x axis because this allows the element to be
interchangeable between the vertical and horizontal combo
chart.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.YValue">
            <summary>Gets or sets the y value of this element.</summary>
            <remarks>YValue is the main value container for elements. It is used
at times when the element's value would not officially be
considered the y value such as: pie slice value. Using
ChartType.ComboHorizontal the YValue type value corresponds to the
x axis because this allows the element to be interchangable between
the vertical and horizontal combo chart.

This Element value type is used by all chart types except
ChartType.Financial.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Element.YValueStart">
            <summary>Gets or sets the initial Y value of this element.</summary>
            <remarks>Using ChartType.ComboHorizontal, the YValueStart type value
corresponds to the x axis because this allows the element to be
interchangable between the vertical and horizontal combo
chart.

This Element value type is used by all chart types except
ChartType.Financial.</remarks>
        </member>
        <member name="T:dotnetCHARTING.ElementCollection">
            <summary>Contains a collection of Element objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.Add">
            <summary>Adds an element to the collection based on the specified
calculation.</summary>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.Add(dotnetCHARTING.Calculation)">
            <summary>Adds an element to the collection based on the specified
calculation.</summary>
            <remarks>This method must be used through
Chart.Series.Elements.Add(...).</remarks>
            <returns>Numeric index of the added element.</returns>
            <param name="calc">Calculation to perform on the collection.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.Add(dotnetCHARTING.Calculation,System.String)">
            <summary>Adds an element to the collection based on the specified
collection with the specified name.</summary>
            <returns>Numeric index of the added element.</returns>
            <param name="calc">Calculation to perform on the elements.</param>
            <param name="text">Name of the new element.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.Add">
            <summary>Provided as a shortcut for adding element the chart
SeriesCollection.</summary>
            <returns/>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.Add(dotnetCHARTING.Element[])">
            <summary>Adds the specified Elements to this collection.</summary>
            <param name="elements">List of elements to add.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.Add(dotnetCHARTING.ElementCollection)">
            <summary>Adds a specified ElementCollection to this collection.</summary>
            <returns/>
            <param name="elementCollection">ElementCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.Add(dotnetCHARTING.Element)">
            <summary>Adds a specified Element class to this collection.</summary>
            <returns>The zero-based index of the added Element.</returns>
            <param name="element">The Element to add.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.Contains(dotnetCHARTING.Element)">
            <summary>Determines whether this collection contains a specified
Element.</summary>
            <returns>true if the specified Element belongs to this collection;
otherwise, false.</returns>
            <param name="element">The Element to find.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.IndexOf(dotnetCHARTING.Element)">
            <summary>Determines the index of a specified Element in this
collection.</summary>
            <returns>The zero-based index of the specified AxisTick.</returns>
            <param name="e">The AxisTick to find.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.Insert(System.Int32,dotnetCHARTING.Element)">
            <summary>Inserts a element into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the element.</param>
            <param name="element">The element to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementCollection.Remove(dotnetCHARTING.Element)">
            <summary>Removes a specified element from this collection.</summary>
            <param name="element">The element to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.ElementCollection.Item(System.Int32)">
            <summary>Gets or sets the Element at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.ElementMarker">
            <summary>Defines a graphical object with a specified shape, size, and
color or an image used to mark and identify Element objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.ElementMarker.#ctor">
            <summary>Initializes an instance of ElementMarker with an image and
size.</summary>
        </member>
        <member name="M:dotnetCHARTING.ElementMarker.#ctor">
            <summary>Initializes an instance of ElementMarker.</summary>
            <remarks>This element marker will be empty.</remarks>
        </member>
        <member name="M:dotnetCHARTING.ElementMarker.#ctor(dotnetCHARTING.ElementMarkerType)">
            <summary>Initializes an instance of ElementMarker with a built in icon
(ElementMarkerType).</summary>
            <param name="dType">Element marker type of this marker.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementMarker.#ctor(dotnetCHARTING.ElementMarkerType,System.Int32)">
            <summary>Initializes an instance of ElementMarker with a built in icon
(ElementMarkerType), and size.</summary>
            <param name="dType">Element marker type of this marker.</param>
            <param name="size">The size of this marker.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementMarker.#ctor(dotnetCHARTING.ElementMarkerType,System.Int32,System.Drawing.Color)">
            <summary>Initializes an instance of ElementMarker with a built in icon
(ElementMarkerType), size, and color.</summary>
            <param name="dType">Element marker type of this marker.</param>
            <param name="size">The size of this marker.</param>
            <param name="color">The color of this marker.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementMarker.#ctor(System.String)">
            <summary>Initializes an instance of ElementMarker with an
image.</summary>
            <param name="imagePath">Absolute path of an image.</param>
        </member>
        <member name="M:dotnetCHARTING.ElementMarker.#ctor(System.String,System.Int32)">
            <summary>Initializes an instance of ElementMarker with an image and
size.</summary>
            <param name="imagePath">Absolute path of an image.</param>
            <param name="maxSize">Maximum width or height of the image.</param>
        </member>
        <member name="P:dotnetCHARTING.ElementMarker.Color">
            <summary>Gets or sets the color of this element marker.</summary>
        </member>
        <member name="P:dotnetCHARTING.ElementMarker.ImagePath">
            <summary>Gets or sets the image path of this marker.</summary>
        </member>
        <member name="P:dotnetCHARTING.ElementMarker.Size">
            <summary>Gets or sets the size of this element marker.</summary>
        </member>
        <member name="P:dotnetCHARTING.ElementMarker.Type">
            <summary>Gets or sets a predefined shape for this marker.</summary>
        </member>
        <member name="P:dotnetCHARTING.ElementMarker.Visible">
            <summary>Gets or sets a value indicating whether the marker is
visible.</summary>
        </member>
        <member name="T:dotnetCHARTING.EmptyElement">
            <summary>Defines the behavior and appearance of empty elements for a
given Series.</summary>
        </member>
        <member name="M:dotnetCHARTING.EmptyElement.#ctor">
            <summary>Initializes a new instance of the EmptyElement class.</summary>
        </member>
        <member name="M:dotnetCHARTING.EmptyElement.#ctor">
            <summary>Initializes a new instance of the EmptyElement class.</summary>
        </member>
        <member name="M:dotnetCHARTING.EmptyElement.#ctor(System.String,System.Drawing.Color)">
            <summary>Initializes a new instance of the EmptyElement class with a
label string and color.</summary>
            <param name="labelText">Empty element label text.</param>
            <param name="color">Empty element color.</param>
        </member>
        <member name="M:dotnetCHARTING.EmptyElement.#ctor(System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>Initializes a new instance of the EmptyElement class with a
label string, color and marker color.</summary>
            <param name="labelText">Label text.</param>
            <param name="color">Color</param>
            <param name="markerColor">Marker color.</param>
        </member>
        <member name="M:dotnetCHARTING.EmptyElement.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,dotnetCHARTING.ElementMarkerType)">
            <summary>Initializes a new instance of the EmptyElement class with a
label string, color, marker color and type.</summary>
            <param name="labelText">Label text.</param>
            <param name="color">Color</param>
            <param name="markerColor">Marker color.</param>
            <param name="markerType">Marker type.</param>
        </member>
        <member name="M:dotnetCHARTING.EmptyElement.#ctor(System.String,System.Drawing.Color,dotnetCHARTING.ElementMarker)">
            <summary>Initializes a new instance of the EmptyElement class with a
label string, color, and marker object.</summary>
            <param name="labelText">Label text.</param>
            <param name="color">Color</param>
            <param name="marker">Marker object.</param>
        </member>
        <member name="P:dotnetCHARTING.EmptyElement.Color">
            <summary>Gets or sets the color of empty elements.</summary>
            <remarks>This property will also affect the colors of this empty
element's Line, Marker, and SmartLabel objects.</remarks>
        </member>
        <member name="P:dotnetCHARTING.EmptyElement.Hotspot">
            <summary>Gets or sets the Hotspot of this EmptyElement.</summary>
        </member>
        <member name="P:dotnetCHARTING.EmptyElement.Line">
            <summary>Gets or sets a line which substitutes a series' Line object
when empty elements are drawn.</summary>
        </member>
        <member name="P:dotnetCHARTING.EmptyElement.Marker">
            <summary>Gets or sets the marker of empty elements.</summary>
            <remarks>To active this marker the following settings are
required:

EmptyElement.Mode = EmptyElementMode.Fill

EmptyElement.Marker = ElementMarkerType.(any other than
'None')</remarks>
        </member>
        <member name="P:dotnetCHARTING.EmptyElement.Mode">
            <summary>Gets or sets the empty element mode.</summary>
        </member>
        <member name="P:dotnetCHARTING.EmptyElement.SmartLabel">
            <summary>Gets or sets the label of empty elements.</summary>
        </member>
        <member name="P:dotnetCHARTING.EmptyElement.ToolTip">
            <summary>Gets or sets the tool tip of empty elements.</summary>
        </member>
        <member name="P:dotnetCHARTING.EmptyElement.URL">
            <summary>Gets or sets the URL of empty elements.</summary>
        </member>
        <member name="P:dotnetCHARTING.EmptyElement.URLTarget">
            <summary>Gets or sets the target of URLs of empty elements.</summary>
        </member>
        <member name="T:dotnetCHARTING.FileManager">
            <summary>Facilitates saving bitmap images and cleanup.</summary>
        </member>
        <member name="M:dotnetCHARTING.FileManager.SaveImage">
            <summary>Saves a MemoryStream in the TempDirectory with the format set
in chart.ImageFormat chart control.</summary>
        </member>
        <member name="M:dotnetCHARTING.FileManager.SaveImage(System.IO.MemoryStream,System.Boolean)">
            <summary>Saves a MemoryStream in the TempDirectory with the format set
in chart.ImageFormat chart control.</summary>
            <returns>Path of the saved file.</returns>
            <param name="fileSaved">for later chart display.</param>
        </member>
        <member name="M:dotnetCHARTING.FileManager.SaveImage(System.IO.MemoryStream)">
            <summary>Saves a MemoryStream in the TempDirectory with the format set
in chart.ImageFormat chart control.</summary>
            <returns>Path of the saved file.</returns>
        </member>
        <member name="M:dotnetCHARTING.FileManager.SaveImage(System.Drawing.Bitmap,System.Boolean)">
            <summary>Saves a Bitmap in the TempDirectory and displays it in the
chart control.</summary>
            <returns>Path of the saved bitmap.</returns>
            <param name="bmp">Bitmap to save.</param>
            <param name="fileSaved">for later chart display.</param>
        </member>
        <member name="M:dotnetCHARTING.FileManager.SaveImage">
            <summary>Causes the chart to generate and returns the path of the
saved image.</summary>
            <returns>Path of the saved image.</returns>
        </member>
        <member name="M:dotnetCHARTING.FileManager.SaveImage(System.Drawing.Imaging.Metafile)">
            <summary>Saves a Metafile in the TempDirectory and displays it in the
chart control.</summary>
            <returns>Path of the saved image.</returns>
            <param name="mf">Metafile to save.</param>
        </member>
        <member name="M:dotnetCHARTING.FileManager.SaveImage(System.Drawing.Imaging.Metafile,System.Boolean)">
            <summary>Saves a Metafile in the TempDirectory and displays it in the
chart control.</summary>
            <returns>Path of the saved image.</returns>
            <param name="mf">Metafile to save.</param>
            <param name="fileSaved">for later chart display.</param>
        </member>
        <member name="M:dotnetCHARTING.FileManager.SaveImage(System.Drawing.Bitmap)">
            <summary>Saves a Bitmap in the TempDirectory and displays it in the
chart control.</summary>
            <returns>Path of the saved bitmap.</returns>
            <param name="bmp">Bitmap to save.</param>
        </member>
        <member name="P:dotnetCHARTING.FileManager.Cached">
            <summary>Gets a value indicating whether a chart will be renderd or a
cached image will be used.</summary>
            <remarks>If false no special processing is required because a cached
image will be displayed.</remarks>
        </member>
        <member name="P:dotnetCHARTING.FileManager.CachePeriod">
            <summary>Gets or sets a TimeSpan object that determines the amount of
time an image is cached and displayed on a page before a new one is
generated.</summary>
            <remarks>When set, a given chart image will be generated on the first
hit and on all subsequent hits within the cache duration period,
the same image will be returned with no rendering work by the chart
control.</remarks>
        </member>
        <member name="P:dotnetCHARTING.FileManager.CleanupMinimumAge">
            <summary>Gets or sets a TimeSpan object that determines the minimum
amount of time images are stored in the TempDirectory folder before
they are deleted.</summary>
        </member>
        <member name="P:dotnetCHARTING.FileManager.CleanupPeriod">
            <summary>Gets or sets a TimeSpan object that determines the amount of
time the TempDirectory folder would be checked for deleting old
image files.</summary>
        </member>
        <member name="P:dotnetCHARTING.FileManager.FileName">
            <summary>Sets the file name to save an image as, or gets the file name
of an image that has been saved in the TempDirectory after a chart
is generated.</summary>
            <remarks>When empty, a random name will be created. In order for the
cleanup system to include custom file names they must start with
'dnc-', the mask is: 'dnc-*.*'.</remarks>
        </member>
        <member name="P:dotnetCHARTING.FileManager.FileQuality">
            <summary>Gets or sets Jpg file quality. (Worse quality) 0 - 100 (Best
quality)</summary>
        </member>
        <member name="P:dotnetCHARTING.FileManager.ImageFormat">
            <summary>Gets or sets a ImageFormat Enumeration specifying the image
file type.</summary>
        </member>
        <member name="P:dotnetCHARTING.FileManager.TempDirectory">
            <summary>Gets or sets the directory where images generated by the
control are temporarily stored.</summary>
            <remarks>This property takes either an absolute path
'c:/inetpub/wwwroot/app/tmp', a relative path ('tmp', '../tmp',) or
when started with '/' a relative path from c:/inetpub/wwwroot/
('/app/tmp).</remarks>
        </member>
        <member name="T:dotnetCHARTING.FinancialEngine">
            <summary>Provides a set of methods that perform financial analysis of
series and series collections.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AcumulateDistributeOverPeriod">
            <summary>Evaluates the accumulation/distribution indicator for each of
the (sub)collection of periods of a given length.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AcumulateDistributeOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluates the accumulation/distribution indicator for each of
the (sub)collection of periods of a given length.</summary>
            <remarks>    The accumulation/distribution indicator illustrates the
    degree to which an asset is being accumulated or distributed by
    the market over each of these collection of periods. The
    indicator uses the closing price's proximity to the high or low
    over the period to determine if accumulation or reduction is
    taking place in the market. The proximity measure if then
    multiplied by the volume over the period in order to give more
    weight to moves with correspondingly higher volume.
    Interpretation
    A divergence between the price action and the
    AccumulationDistribution indicator can signal that a trend is
    nearing completion, a trends continuation and break-outs from
    trading ranges. The actual value of this indicator is of no
    significance, what is significant is its change in value
    relative to the previous periods which can warn of a possible
    break-out during a trading range (falling/rising indicator),
    the continuation of a trend (higher highs in uptrend, or lower
    lows in downtrend) or a change/completion of a trend
    (divergence between the price action and the direction of the
    indicator).
    Example
    Say for example we know that:
    
        Highs = {3, 4, 3, 4, 5} (i.e. 3 is the latest
        high)
        Lows = {2, 1, 2, 1, 3}(i.e. 2 is the latest
        low)
        Volume = {300, 290, 295, 285, 290}(i.e. 300 is
        the volume in the latest period.
    
    Now if the lengthOfPeriod considered is 4, then
    this method will return an array of length two where the first
    term is the accumulation\distribution indicator (evaluated
    using AccumulationDistribution(string, Series)) when:
    
        Highs = {3, 4, 3, 4} (i.e. above highs with
        last element removed)
        Lows = {2, 1, 2, 1}(i.e. above highs with last
        element removed)
        Volume = {300, 290, 295, 285}(i.e. above highs
        with last element removed)
    and the second term is the accumulation/distribution
    indicator when: 
    
        Highs = {4, 3, 4, 5} (i.e. the window moves
        one position back)
        Lows = {1, 2, 1, 3}(i.e. the window moves one
        position back)
        Volume = {290, 295, 285, 290}(i.e. the window
        moves one position back)
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series where the first term is the most recent period, the
second term is the previous period and so on.</param>
            <param name="lengthOfPeriod">An integer which represents the number of periods within each
of the (sub)collection of periods over which the indicator is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AcumulateDistributeOverPeriod(dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluates the accumulation/distribution indicator for each of
the (sub)collection of periods of a given length.</summary>
            <remarks>    The accumulation/distribution indicator illustrates the
    degree to which an asset is being accumulated or distributed by
    the market over each of these collection of periods. The
    indicator uses the closing price's proximity to the high or low
    over the period to determine if accumulation or reduction is
    taking place in the market. The proximity measure if then
    multiplied by the volume over the period in order to give more
    weight to moves with correspondingly higher volume.
    Interpretation
    A divergence between the price action and the
    AccumulationDistribution indicator can signal that a trend is
    nearing completion, a trends continuation and break-outs from
    trading ranges. The actual value of this indicator is of no
    significance, what is significant is its change in value
    relative to the previous periods which can warn of a possible
    break-out during a trading range (falling/rising indicator),
    the continuation of a trend (higher highs in uptrend, or lower
    lows in downtrend) or a change/completion of a trend
    (divergence between the price action and the direction of the
    indicator).
    Example
    Say for example we know that:
    
        Highs = {3, 4, 3, 4, 5} (i.e. 3 is the latest
        high)
        Lows = {2, 1, 2, 1, 3}(i.e. 2 is the latest
        low)
        Volume = {300, 290, 295, 285, 290}(i.e. 300 is
        the volume in the latest period.
    
    Now if the lengthOfPeriod considered is 4, then
    this method will return an array of length two where the first
    term is the accumulation\distribution indicator (evaluated
    using AccumulationDistribution) when:
    
        Highs = {3, 4, 3, 4} (i.e. above highs with
        last element removed)
        Lows = {2, 1, 2, 1}(i.e. above highs with last
        element removed)
        Volume = {300, 290, 295, 285}(i.e. above highs
        with last element removed)
    and the second term is the accumulation/distribution
    indicator when: 
    
        Highs = {4, 3, 4, 5} (i.e. the window moves
        one position back)
        Lows = {1, 2, 1, 3}(i.e. the window moves one
        position back)
        Volume = {290, 295, 285, 290}(i.e. the window
        moves one position back)
    </remarks>
            <param name="s">A series where the first term is the most recent period, the
second term is the previous period and so on.</param>
            <param name="lengthOfPeriod">An integer which represents the number of periods within each
of the (sub)collection of periods over which the indicator is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AcumulateDistributeOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Evaluates the accumulation/distribution indicator for each of
the (sub)collection of periods of a given length.</summary>
            <remarks>    The accumulation/distribution indicator illustrates the
    degree to which an asset is being accumulated or distributed by
    the market over each of these collection of periods. The
    indicator uses the closing price's proximity to the high or low
    over the period to determine if accumulation or reduction is
    taking place in the market. The proximity measure if then
    multiplied by the volume over the period in order to give more
    weight to moves with correspondingly higher volume.
    Interpretation
    A divergence between the price action and the
    AccumulationDistribution indicator can signal that a trend is
    nearing completion, a trends continuation and break-outs from
    trading ranges. The actual value of this indicator is of no
    significance, what is significant is its change in value
    relative to the previous periods which can warn of a possible
    break-out during a trading range (falling/rising indicator),
    the continuation of a trend (higher highs in uptrend, or lower
    lows in downtrend) or a change/completion of a trend
    (divergence between the price action and the direction of the
    indicator).
    Example
    Say for example we know that:
    
        Highs = {3, 4, 3, 4, 5} (i.e. 3 is the latest
        high)
        Lows = {2, 1, 2, 1, 3}(i.e. 2 is the latest
        low)
        Volume = {300, 290, 295, 285, 290}(i.e. 300 is
        the volume in the latest period.
    
    Now if the lengthOfPeriod considered is 4, then
    this method will return an array of length two where the first
    term is the accumulation\distribution indicator (evaluated
    using AccumulationDistribution) when:
    
        Highs = {3, 4, 3, 4} (i.e. above highs with
        last element removed)
        Lows = {2, 1, 2, 1}(i.e. above highs with last
        element removed)
        Volume = {300, 290, 295, 285}(i.e. above highs
        with last element removed)
    and the second term is the accumulation/distribution
    indicator when: 
    
        Highs = {4, 3, 4, 5} (i.e. the window moves
        one position back)
        Lows = {1, 2, 1, 3}(i.e. the window moves one
        position back)
        Volume = {290, 295, 285, 290}(i.e. the window
        moves one position back)
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfPeriod">An integer which represents the number of periods within each
of the (sub)collection of periods over which the indicator is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonDown">
            <summary>Calculates the Aroon Down indicator which measures the
relative time since the last lowest low for all periods for which
sufficient data is provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonDown(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the Aroon Down indicator which measures the
relative time since the last lowest low for all periods for which
sufficient data is provided.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonDown(dotnetCHARTING.Series)">
            <summary>Calculates the Aroon Down indicator which measures the
relative time since the last lowest low for all periods for which
sufficient data is provided.</summary>
            <param name="s">A financial series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonDown(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the Aroon Down indicator which measures the
relative time since the last lowest low for all periods for which
sufficient data is provided.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonDown(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the Aroon Down indicator which measures the
relative time since the last lowest low for all periods for which
sufficient data is provided.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod">
            <summary>Calculates the Aroon Down indicator which measures the
relative time since the last lowest low for all periods for which
sufficient data is provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Calculates the Aroon Down indicator which measures the
relative time since the last lowest low for all periods for which
sufficient data is provided.</summary>
            <remarks>    The indicator for each period will return a value between 0 and
    100, where a higher value indicates that the lowest low was
    achieved more recently. Persistent values between 70 and 100
    are said to indicate weakness in the asset and in conjunction
    with a low range (i.e. 0-30) in the Aroon Up indicator,
    indicates an downward trend. 
    Evaluation of the Aroon Down Indicator
    The Aroon Down indicator for each period is given
    by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series where the first term is the traded high of
the asset within the most recent trading period, the second term is
the traded high of the asset within the previous period and so
on.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod(dotnetCHARTING.Series,System.Int32)">
            <summary>Calculates the Aroon Down indicator which measures the
relative time since the last lowest low for all periods for which
sufficient data is provided.</summary>
            <remarks>    The indicator for each period will return a value between 0 and
    100, where a higher value indicates that the lowest low was
    achieved more recently. Persistent values between 70 and 100
    are said to indicate weakness in the asset and in conjunction
    with a low range (i.e. 0-30) in the Aroon Up indicator,
    indicates an downward trend. 
    Evaluation of the Aroon Down Indicator
    The Aroon Down indicator for each period is given
    by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <param name="s">A financial series where the first term is the traded high of
the asset within the most recent trading period, the second term is
the traded high of the asset within the previous period and so
on.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Calculates the Aroon Down indicator which measures the
relative time since the last lowest low for all periods for which
sufficient data is provided.</summary>
            <remarks>    The indicator for each period will return a value between 0 and
    100, where a higher value indicates that the lowest low was
    achieved more recently. Persistent values between 70 and 100
    are said to indicate weakness in the asset and in conjunction
    with a low range (i.e. 0-30) in the Aroon Up indicator,
    indicates an downward trend. 
    Evaluation of the Aroon Down Indicator
    The Aroon Down indicator for each period is given
    by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonOscillator">
            <summary>Evaluates the Aroon Oscillator over the a given
period.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonOscillator(System.String,dotnetCHARTING.Series)">
            <summary>Evaluates the Aroon Oscillator over the a given
period.</summary>
            <remarks>    Evaluation of the Aroon Oscillator
    The Aroon Oscillator over each period is evaluated using
    the following formulae:
    
    Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down
    Indicator).</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series where the first term is the traded low of the asset
within the most recent trading period, the second term is the
traded low of the asset within the previous period and so
on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonOscillator(dotnetCHARTING.Series)">
            <summary>Evaluates the Aroon Oscillator over the a given
period.</summary>
            <remarks>    Evaluation of the Aroon Oscillator
    The Aroon Oscillator over each period is evaluated using
    the following formulae:
    
    Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down
    Indicator).</remarks>
            <param name="s">A series where the first term is the traded low of the asset
within the most recent trading period, the second term is the
traded low of the asset within the previous period and so
on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonOscillator(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Aroon Oscillator over the a given
period.</summary>
            <remarks>    Evaluation of the Aroon Oscillator
    The Aroon Oscillator over each period is evaluated using
    the following formulae:
    
    Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down
    Indicator).</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonOscillator(dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Aroon Oscillator over the a given
period.</summary>
            <remarks>    Evaluation of the Aroon Oscillator
    The Aroon Oscillator over each period is evaluated using
    the following formulae:
    
    Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down
    Indicator).</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod">
            <summary>Evaluates the Aroon Oscillator over all periods where
sufficient historical data is provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluates the Aroon Oscillator over all periods where
sufficient historical data is provided.</summary>
            <remarks>    Evaluation of the Aroon Oscillator
    The Aroon Oscillator over each period is evaluated using
    the following formulae:
    
    Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down
    Indicator)
    
    where 'Aroon Up Indicator' and `Aroon Down Indicator' are
    evaluated using.
    The Aroon Up indicator is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).
    The Aroon Down indicator is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <returns>A series where the first term is the value of the Aroon
Oscillator for the most recent period, the second term is the value
of the Aroon Oscillator for the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series where the first term is the traded high of the asset
within the most recent trading period, the second term is the
traded high of the asset within the previous period and so
on.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod(dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluates the Aroon Oscillator over all periods where
sufficient historical data is provided.</summary>
            <remarks>    Evaluation of the Aroon Oscillator
    The Aroon Oscillator over each period is evaluated using
    the following formulae:
    
    Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down
    Indicator)
    
    where 'Aroon Up Indicator' and `Aroon Down Indicator' are
    evaluated using.
    The Aroon Up indicator is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).
    The Aroon Down indicator is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <returns>A series where the first term is the value of the Aroon
Oscillator for the most recent period, the second term is the value
of the Aroon Oscillator for the previous period and so on.</returns>
            <param name="s">A series where the first term is the traded high of the asset
within the most recent trading period, the second term is the
traded high of the asset within the previous period and so
on.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Evaluates the Aroon Oscillator over all periods where
sufficient historical data is provided.</summary>
            <remarks>    Evaluation of the Aroon Oscillator
    The Aroon Oscillator over each period is evaluated using
    the following formulae:
    
    Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down
    Indicator)
    
    where 'Aroon Up Indicator' and `Aroon Down Indicator' are
    evaluated using.
    The Aroon Up indicator is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).
    The Aroon Down indicator is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <returns>A series where the first term is the value of the Aroon
Oscillator for the most recent period, the second term is the value
of the Aroon Oscillator for the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonUp">
            <summary>Evaluates the Aroon Up indicator which measures the relative
time since the last highest high.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonUp(System.String,dotnetCHARTING.Series)">
            <summary>Evaluates the Aroon Up indicator which measures the relative
time since the last highest high.</summary>
            <remarks>    The indicator will return a value between 0 and 100, where a
    higher value indicates that the highest high was achieved more
    recently. Persistent values between 70 and 100 are said to
    indicate strength in the asset and in conjunction with a low
    range (i.e. 0-30) in the Aroon Down indicator, indicates an
    upward trend. 
    Evaluation of the Aroon Up Indicator
    The Aroon Up indicator is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series of the trading highs over the last n-periods where
the k-th terms of the array if the trading high on the k-th
previous period.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonUp(dotnetCHARTING.Series)">
            <summary>Evaluates the Aroon Up indicator which measures the relative
time since the last highest high.</summary>
            <remarks>    The indicator will return a value between 0 and 100, where a
    higher value indicates that the highest high was achieved more
    recently. Persistent values between 70 and 100 are said to
    indicate strength in the asset and in conjunction with a low
    range (i.e. 0-30) in the Aroon Down indicator, indicates an
    upward trend. 
    Evaluation of the Aroon Up Indicator
    The Aroon Up indicator is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <param name="s">A series of the trading highs over the last n-periods where
the k-th terms of the array if the trading high on the k-th
previous period.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonUp(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Aroon Up indicator which measures the relative
time since the last highest high.</summary>
            <remarks>    The indicator will return a value between 0 and 100, where a
    higher value indicates that the highest high was achieved more
    recently. Persistent values between 70 and 100 are said to
    indicate strength in the asset and in conjunction with a low
    range (i.e. 0-30) in the Aroon Down indicator, indicates an
    upward trend. 
    Evaluation of the Aroon Up Indicator
    The Aroon Up indicator is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonUp(dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Aroon Up indicator which measures the relative
time since the last highest high.</summary>
            <remarks>    The indicator will return a value between 0 and 100, where a
    higher value indicates that the highest high was achieved more
    recently. Persistent values between 70 and 100 are said to
    indicate strength in the asset and in conjunction with a low
    range (i.e. 0-30) in the Aroon Down indicator, indicates an
    upward trend. 
    Evaluation of the Aroon Up Indicator
    The Aroon Up indicator is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod">
            <summary>Evaluates the Aroon Up indicator which measures the relative
time since the last highest high for all periods for which
sufficient data is provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluates the Aroon Up indicator which measures the relative
time since the last highest high for all periods for which
sufficient data is provided.</summary>
            <remarks>    This indicator for each period will return a value between 0
    and 100, where a higher value indicates that the highest high
    was achieved more recently. Persistent values between 70 and
    100 are said to indicate strength in the asset and in
    conjunction with a low range(i.e. 0-30) of the Aroon Down
    indicator, indicates an upward trend. 
    Evaluation of the Aroon Up Indicator
    The Aroon Up indicator for each period is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <returns>Returnsa series where the first term is the values of the
Aroon Up indicator over the earliest set of consecutive periods and
the second term is the value of the next set of the periods (i.e.
the windows is moving one place along), and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An financial series of the trading highs over the last
n-periods where the k-th term of the array if the trading high on
the k-th previous period.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod(dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluates the Aroon Up indicator which measures the relative
time since the last highest high for all periods for which
sufficient data is provided.</summary>
            <remarks>    This indicator for each period will return a value between 0
    and 100, where a higher value indicates that the highest high
    was achieved more recently. Persistent values between 70 and
    100 are said to indicate strength in the asset and in
    conjunction with a low range(i.e. 0-30) of the Aroon Down
    indicator, indicates an upward trend. 
    Evaluation of the Aroon Up Indicator
    The Aroon Up indicator for each period is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <returns>Returnsa series where the first term is the values of the
Aroon Up indicator over the earliest set of consecutive periods and
the second term is the value of the next set of the periods (i.e.
the windows is moving one place along), and so on.</returns>
            <param name="s">An financial series of the trading highs over the last
n-periods where the k-th term of the array if the trading high on
the k-th previous period.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Evaluates the Aroon Up indicator which measures the relative
time since the last highest high for all periods for which
sufficient data is provided.</summary>
            <remarks>    This indicator for each period will return a value between 0
    and 100, where a higher value indicates that the highest high
    was achieved more recently. Persistent values between 70 and
    100 are said to indicate strength in the asset and in
    conjunction with a low range(i.e. 0-30) of the Aroon Down
    indicator, indicates an upward trend. 
    Evaluation of the Aroon Up Indicator
    The Aroon Up indicator for each period is given by:
    
    100(n - (number of days since last highest high over n
    days))/n
    
    where n is the number of days being considered (a reasonable
    default value for n is 14).</remarks>
            <returns>Returnsa series where the first term is the values of the
Aroon Up indicator over the earliest set of consecutive periods and
the second term is the value of the next set of the periods (i.e.
the windows is moving one place along), and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AveragePrice">
            <summary>Evaluates the Average Price for each periods of a collection
of periods.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AveragePrice(System.String,dotnetCHARTING.Series)">
            <summary>Evaluates the Average Price for each periods of a collection
of periods.</summary>
            <remarks>The Average price is just the average of the High, Low, Open
and Close of each of the trading periods ranges, where the period
considered will generally a day, however the Average price is
equally applicable to other time spans and hence the period
considered could be (for example) a month or year.</remarks>
            <returns>A series where the first element is the Average Price of the
asset on the most recent period considered, the second term is the
Average Price on the period before that and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series, where the first element is the traded
price on the most recent period, the second element is the traded
price of the previous periods and so on, for the asset under
consideration.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AveragePrice(dotnetCHARTING.Series)">
            <summary>Evaluates the Average Price for each periods of a collection
of periods.</summary>
            <remarks>The Average price is just the average of the High, Low, Open
and Close of each of the trading periods ranges, where the period
considered will generally a day, however the Average price is
equally applicable to other time spans and hence the period
considered could be (for example) a month or year.</remarks>
            <returns>A series where the first element is the Average Price of the
asset on the most recent period considered, the second term is the
Average Price on the period before that and so on.</returns>
            <param name="s">A financial series where the first element is the traded
price on the most recent period, the second element is the traded
price of the previous periods and so on, for the asset under
consideration.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.AveragePrice(dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Average Price for each periods of a collection
of periods.</summary>
            <remarks>The Average price is just the average of the High, Low, Open
and Close of each of the trading periods ranges, where the period
considered will generally a day, however the Average price is
equally applicable to other time spans and hence the period
considered could be (for example) a month or year.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.BalanceOfPowerOverPeriod">
            <summary>Evaluates the Balance of Power (BOP) indicator, created by
Igor Livshin; which captures the struggle between the Bulls and
Bears over a number of trading days.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.BalanceOfPowerOverPeriod(System.String,dotnetCHARTING.Series)">
            <summary>Evaluates the Balance of Power (BOP) indicator, created by
Igor Livshin; which captures the struggle between the Bulls and
Bears over a number of trading days.</summary>
            <remarks>    An array is returned where the first term corresponds to the
    BOP of the last trading day, the second term gives the BOP on
    the previous trading day and so on. 
    Interpretation
    The BOP indicator for each trading day lies within the
    range [-1,1]. When the BOP indicator is towards the high
    if its range it will signifies that the Bulls are in control,
    conversely when the indicator is towards the lows of its range
    it signifies that the bear are in control. If the indicator
    move from a high positive range to a lower positive range it
    signifies that the buying pressure is decreasing. Conversely,
    if the indicator move from a low negative range to a higher
    negative range it signifies that the selling pressure is
    decreasing.
    Evaluation
    The BOP indicator for each trading days is evaluated by
    the following formulae:
    
    BOP = (Close - Open)/(High - Low)
    
    where close is the days closing price, open is
    the days opening price, high is the highest traded price
    during the day and low is the lowest traded price during
    the day.</remarks>
            <returns>A series is returned where the first term corresponds to the
BOP of the last trading day, the second term gives the BOP on the
previous trading day and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series where the first element is the high in the last
trading period, the second term is the high in the previous period
and so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.BalanceOfPowerOverPeriod(dotnetCHARTING.Series)">
            <summary>Evaluates the Balance of Power (BOP) indicator, created by
Igor Livshin; which captures the struggle between the Bulls and
Bears over a number of trading days.</summary>
            <remarks>    An array is returned where the first term corresponds to the
    BOP of the last trading day, the second term gives the BOP on
    the previous trading day and so on. 
    Interpretation
    The BOP indicator for each trading day lies within the
    range [-1,1]. When the BOP indicator is towards the high
    if its range it will signifies that the Bulls are in control,
    conversely when the indicator is towards the lows of its range
    it signifies that the bear are in control. If the indicator
    move from a high positive range to a lower positive range it
    signifies that the buying pressure is decreasing. Conversely,
    if the indicator move from a low negative range to a higher
    negative range it signifies that the selling pressure is
    decreasing.
    Evaluation
    The BOP indicator for each trading days is evaluated by
    the following formulae:
    
    BOP = (Close - Open)/(High - Low)
    
    where close is the days closing price, open is
    the days opening price, high is the highest traded price
    during the day and low is the lowest traded price during
    the day.</remarks>
            <returns>A series is returned where the first term corresponds to the
BOP of the last trading day, the second term gives the BOP on the
previous trading day and so on.</returns>
            <param name="s">A series where the first element is the high in the last
trading period, the second term is the high in the previous period
and so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.BalanceOfPowerOverPeriod(dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Balance of Power (BOP) indicator, created by
Igor Livshin; which captures the struggle between the Bulls and
Bears over a number of trading days.</summary>
            <remarks>    An array is returned where the first term corresponds to the
    BOP of the last trading day, the second term gives the BOP on
    the previous trading day and so on. 
    Interpretation
    The BOP indicator for each trading day lies within the
    range [-1,1]. When the BOP indicator is towards the high
    if its range it will signifies that the Bulls are in control,
    conversely when the indicator is towards the lows of its range
    it signifies that the bear are in control. If the indicator
    move from a high positive range to a lower positive range it
    signifies that the buying pressure is decreasing. Conversely,
    if the indicator move from a low negative range to a higher
    negative range it signifies that the selling pressure is
    decreasing.
    Evaluation
    The BOP indicator for each trading days is evaluated by
    the following formulae:
    
    BOP = (Close - Open)/(High - Low)
    
    where close is the days closing price, open is
    the days opening price, high is the highest traded price
    during the day and low is the lowest traded price during
    the day.</remarks>
            <returns>A series is returned where the first term corresponds to the
BOP of the last trading day, the second term gives the BOP on the
previous trading day and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.BollingerBands">
            <summary>Within this class we offer procedures which evaluate the
upper and lower Bollinger Bands.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.BollingerBands(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Within this class we offer procedures which evaluate the
upper and lower Bollinger Bands.</summary>
            <remarks>    Further Details
    Bollinger Bands are a type of envelope that are plotted
    at standard deviation levels above and below the corresponding
    (simple) moving average. This produces an effect of having the
    bands widen during periods of higher volatility and contract
    during less volatile periods. Bollinger Bands indicate the
    relative supply and demand for a given asset. If the asset to
    move close to the top of the envelope then it indicates that
    there is strong demand for the asset, conversely if the asset
    hugs the bottom of the trading range then it indicates that
    there is oversupply of the asset.
    Since the Bollinger Bands will nearly always be combined
    with other indicators when forming a trading system the number
    of periods used in the evaluation of the standard deviation of
    the stocks and the moving average will vary. For those without
    design restrictions a popular choice of the number of time
    periods is around 20-23.</remarks>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="standardDeviationLevel">The (positive) number of standard deviations which the lower
band in shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.BollingerBands(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Within this class we offer procedures which evaluate the
upper and lower Bollinger Bands.</summary>
            <remarks>    Further Details
    Bollinger Bands are a type of envelope that are plotted
    at standard deviation levels above and below the corresponding
    (simple) moving average. This produces an effect of having the
    bands widen during periods of higher volatility and contract
    during less volatile periods. Bollinger Bands indicate the
    relative supply and demand for a given asset. If the asset to
    move close to the top of the envelope then it indicates that
    there is strong demand for the asset, conversely if the asset
    hugs the bottom of the trading range then it indicates that
    there is oversupply of the asset.
    Since the Bollinger Bands will nearly always be combined
    with other indicators when forming a trading system the number
    of periods used in the evaluation of the standard deviation of
    the stocks and the moving average will vary. For those without
    design restrictions a popular choice of the number of time
    periods is around 20-23.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="standardDeviationLevel">The (positive) number of standard deviations which the lower
band in shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinMoneyFlowOverPeriod">
            <summary>Iteratively evaluate the Chaikin Money Flow (CMF)indicator
over all (sub)collections of periods of a given length for all
periods for which data is provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinMoneyFlowOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Iteratively evaluate the Chaikin Money Flow (CMF)indicator
over all (sub)collections of periods of a given length for all
periods for which data is provided.</summary>
            <remarks>    In particular, this method returns an array where the 1st term
    of the CMF indicator for the latest period, the second term of
    the CMF in the previous period and so on. Please note that the
    CMF will be evaluated for all periods for which there is
    sufficient data (see example below for more details). 
    Remark: The form in which the Chaikin Money Flow
    (CMF) in provided here is particularly suitable when wishing to
    integrated this functionality within a Client side GUI Charting
    Application.
    Details of Chaikin Money Flow (CMF)
    Chaikin Money Flow (CMF) is a volume weighted average of
    Accumulation/Distribution over a specified period, which is
    usually taken to be 21 days. The CMF offers a volume weighted
    indicator on the following two principles:
    
        The nearer the close is to the high the more
        accumulation is taking place.
        The nearer the close is to the low the more
        distribution is taking place.
    
    Evaluation
    The CMF indicator is evaluated for the following
    steps:
    
        Evaluate the Volume Weighted
        Accumulation/Distribution over each of the days within the
        period considered for the calculation. The Volume Weighted
        Accumulation/Distribution on each day is given by:
        
        (((Close - Low)-(High - Close))/(High - Low)) *
        Volume
        Sum the Volume Weighted Accumulation/Distribution
        over the period and the divide the result by the sum of the
        volume over the period.
    
    Example of Application
    Within this example we illustrate the way this method
    works when we consider a given 10 period in which the length of
    period over which the CHM is evaluated is 4. In this case the
    result will be an array of 7 elements as follows:
    
        result[0]: CMF calculated over the last four
        periods
        result[1]: CMF calculated over previous four
        periods
        ...
        result[7]: CMF calculated using the periods between
        the earliest period and the fourth from earliest
        period.
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="lengthOfPeriod">An integer which represents the number of periods over which
the indicator is calculated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinMoneyFlowOverPeriod(dotnetCHARTING.Series,System.Int32)">
            <summary>Iteratively evaluate the Chaikin Money Flow (CMF)indicator
over all (sub)collections of periods of a given length for all
periods for which data is provided.</summary>
            <remarks>    In particular, this method returns an array where the 1st term
    of the CMF indicator for the latest period, the second term of
    the CMF in the previous period and so on. Please note that the
    CMF will be evaluated for all periods for which there is
    sufficient data (see example below for more details). 
    Remark: The form in which the Chaikin Money Flow
    (CMF) in provided here is particularly suitable when wishing to
    integrated this functionality within a Client side GUI Charting
    Application.
    Details of Chaikin Money Flow (CMF)
    Chaikin Money Flow (CMF) is a volume weighted average of
    Accumulation/Distribution over a specified period, which is
    usually taken to be 21 days. The CMF offers a volume weighted
    indicator on the following two principles:
    
        The nearer the close is to the high the more
        accumulation is taking place.
        The nearer the close is to the low the more
        distribution is taking place.
    
    Evaluation
    The CMF indicator is evaluated for the following
    steps:
    
        Evaluate the Volume Weighted
        Accumulation/Distribution over each of the days within the
        period considered for the calculation. The Volume Weighted
        Accumulation/Distribution on each day is given by:
        
        (((Close - Low)-(High - Close))/(High - Low)) *
        Volume
        Sum the Volume Weighted Accumulation/Distribution
        over the period and the divide the result by the sum of the
        volume over the period.
    
    Example of Application
    Within this example we illustrate the way this method
    works when we consider a given 10 period in which the length of
    period over which the CHM is evaluated is 4. In this case the
    result will be an array of 7 elements as follows:
    
        result[0]: CMF calculated over the last four
        periods
        result[1]: CMF calculated over previous four
        periods
        ...
        result[7]: CMF calculated using the periods between
        the earliest period and the fourth from earliest
        period.
    </remarks>
            <param name="s">A financial series.</param>
            <param name="lengthOfPeriod">An integer which represents the number of periods over which
the indicator is calculated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinMoneyFlowOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Iteratively evaluate the Chaikin Money Flow (CMF)indicator
over all (sub)collections of periods of a given length for all
periods for which data is provided.</summary>
            <remarks>    In particular, this method returns an array where the 1st term
    of the CMF indicator for the latest period, the second term of
    the CMF in the previous period and so on. Please note that the
    CMF will be evaluated for all periods for which there is
    sufficient data (see example below for more details). 
    Remark: The form in which the Chaikin Money Flow
    (CMF) in provided here is particularly suitable when wishing to
    integrated this functionality within a Client side GUI Charting
    Application.
    Details of Chaikin Money Flow (CMF)
    Chaikin Money Flow (CMF) is a volume weighted average of
    Accumulation/Distribution over a specified period, which is
    usually taken to be 21 days. The CMF offers a volume weighted
    indicator on the following two principles:
    
        The nearer the close is to the high the more
        accumulation is taking place.
        The nearer the close is to the low the more
        distribution is taking place.
    
    Evaluation
    The CMF indicator is evaluated for the following
    steps:
    
        Evaluate the Volume Weighted
        Accumulation/Distribution over each of the days within the
        period considered for the calculation. The Volume Weighted
        Accumulation/Distribution on each day is given by:
        
        (((Close - Low)-(High - Close))/(High - Low)) *
        Volume
        Sum the Volume Weighted Accumulation/Distribution
        over the period and the divide the result by the sum of the
        volume over the period.
    
    Example of Application
    Within this example we illustrate the way this method
    works when we consider a given 10 period in which the length of
    period over which the CHM is evaluated is 4. In this case the
    result will be an array of 7 elements as follows:
    
        result[0]: CMF calculated over the last four
        periods
        result[1]: CMF calculated over previous four
        periods
        ...
        result[7]: CMF calculated using the periods between
        the earliest period and the fourth from earliest
        period.
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfPeriod">An integer which represents the number of periods over which
the indicator is calculated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinOscillator">
            <summary>This method implements the Chaikin Oscillator (also known as
the Chaikin A/D Oscillator) and evaluates this indicator for the
latest and all previous periods for which there exists sufficient
data.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinOscillator(System.String,dotnetCHARTING.Series,System.Double)">
            <summary>This method implements the Chaikin Oscillator (also known as
the Chaikin A/D Oscillator) and evaluates this indicator for the
latest and all previous periods for which there exists sufficient
data.</summary>
            <remarks>    The Chaikin Oscillator presents the information contained
    within the A/D indicator in the convenient form of an
    oscillator. That is, the Chaikin Oscillator is simply the
    Moving Average Convergence Divergence indicator (MACD) applied
    to the Accumulation/Distribution Line. 
    Interpretation
    A sell signal is when price action develops a higher high
    into overbought zones and the Chaikin Oscillator diverges with
    a lower high and begins to fall. Conversely, a buy signal is
    generated when price action develops a lower low into oversold
    zones and the oscillator diverges with a higher low and begins
    to rise. The Chaikin Oscillator can also be used to time entry
    to existing trends by either buying the dip (when the
    oscillator turns down) or selling the rally (when the
    oscillator turns up).
    Evaluation
    The Chaiken Oscillator for a given period is given
    by:
    
    EMA_3(Accumulate/Distribution) -
    EMA_10(Accumulate/Distribution),
    where EMA_3 and EMA_10 is the exponential moving average
    over 3 and 10 days respectively; and Accumulate/Distribution is
    the corresponding indicator over those 3 or 10 days
    respectively.
    Illustration
    If we are provided within the high, low and volume over
    the last 15 periods, then we will be able to evaluate the
    Chaikin Oscillator on the previous 5 trading days. Since the
    evaluation of the oscillator on a given period requires
    knowledge of the 10 previous periods data.</remarks>
            <returns>A series where the first term is the value of the oscillator
using the last 10 days data, the previous term is the value of the
oscillator on the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="smoothingFactor">The number between 0 and 1. The lower the number the more
sensitive the indicator is.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinOscillator(dotnetCHARTING.Series,System.Double)">
            <summary>This method implements the Chaikin Oscillator (also known as
the Chaikin A/D Oscillator) and evaluates this indicator for the
latest and all previous periods for which there exists sufficient
data.</summary>
            <remarks>    The Chaikin Oscillator presents the information contained
    within the A/D indicator in the convenient form of an
    oscillator. That is, the Chaikin Oscillator is simply the
    Moving Average Convergence Divergence indicator (MACD) applied
    to the Accumulation/Distribution Line. 
    Interpretation
    A sell signal is when price action develops a higher high
    into overbought zones and the Chaikin Oscillator diverges with
    a lower high and begins to fall. Conversely, a buy signal is
    generated when price action develops a lower low into oversold
    zones and the oscillator diverges with a higher low and begins
    to rise. The Chaikin Oscillator can also be used to time entry
    to existing trends by either buying the dip (when the
    oscillator turns down) or selling the rally (when the
    oscillator turns up).
    Evaluation
    The Chaiken Oscillator for a given period is given
    by:
    
    EMA_3(Accumulate/Distribution) -
    EMA_10(Accumulate/Distribution),
    where EMA_3 and EMA_10 is the exponential moving average
    over 3 and 10 days respectively; and Accumulate/Distribution is
    the corresponding indicator over those 3 or 10 days
    respectively.
    Illustration
    If we are provided within the high, low and volume over
    the last 15 periods, then we will be able to evaluate the
    Chaikin Oscillator on the previous 5 trading days. Since the
    evaluation of the oscillator on a given period requires
    knowledge of the 10 previous periods data.</remarks>
            <returns>A series where the first term is the value of the oscillator
using the last 10 days data, the previous term is the value of the
oscillator on the previous period and so on.</returns>
            <param name="s">A financial series.</param>
            <param name="smoothingFactor">The number between 0 and 1. The lower the number the more
sensitive the indicator is.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinOscillator(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>This method implements the Chaikin Oscillator (also known as
the Chaikin A/D Oscillator) and evaluates this indicator for the
latest and all previous periods for which there exists sufficient
data.</summary>
            <remarks>    The Chaikin Oscillator presents the information contained
    within the A/D indicator in the convenient form of an
    oscillator. That is, the Chaikin Oscillator is simply the
    Moving Average Convergence Divergence indicator (MACD) applied
    to the Accumulation/Distribution Line. 
    Interpretation
    A sell signal is when price action develops a higher high
    into overbought zones and the Chaikin Oscillator diverges with
    a lower high and begins to fall. Conversely, a buy signal is
    generated when price action develops a lower low into oversold
    zones and the oscillator diverges with a higher low and begins
    to rise. The Chaikin Oscillator can also be used to time entry
    to existing trends by either buying the dip (when the
    oscillator turns down) or selling the rally (when the
    oscillator turns up).
    Evaluation
    The Chaiken Oscillator for a given period is given
    by:
    
    EMA_3(Accumulate/Distribution) -
    EMA_10(Accumulate/Distribution),
    where EMA_3 and EMA_10 is the exponential moving average
    over 3 and 10 days respectively; and Accumulate/Distribution is
    the corresponding indicator over those 3 or 10 days
    respectively.
    Illustration
    If we are provided within the high, low and volume over
    the last 15 periods, then we will be able to evaluate the
    Chaikin Oscillator on the previous 5 trading days. Since the
    evaluation of the oscillator on a given period requires
    knowledge of the 10 previous periods data.</remarks>
            <returns>A series where the first term is the value of the oscillator
using the last 10 days data, the previous term is the value of the
oscillator on the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="smoothingFactor">The number between 0 and 1. The lower the number the more
sensitive the indicator is.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinVolatility">
            <summary>Chaikin's Volatility indicator compares the spread between a
security's high and low prices.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinVolatility(System.String,dotnetCHARTING.Series,System.Int32,System.Int32)">
            <summary>Chaikin's Volatility indicator compares the spread between a
security's high and low prices.</summary>
            <remarks>    It quantifies volatility as a widening of the range between the
    high and the low price. 
    Indicator Formula
    The formula for this indicator is:
    
        chaikinVolatility = ((H-LAverage -
        H-LAverage_n_periods_ago)/H-LAverage_n_periods_ago)*100
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average for each of the periods on which it can be
evaluated.</param>
            <param name="noOfPeriods">An integer which represents the number of previous time
periods used over which the comparing moving average is
taken.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinVolatility(dotnetCHARTING.Series,System.Int32,System.Int32)">
            <summary>Chaikin's Volatility indicator compares the spread between a
security's high and low prices.</summary>
            <remarks>    It quantifies volatility as a widening of the range between the
    high and the low price. 
    Indicator Formula
    The formula for this indicator is:
    
        chaikinVolatility = ((H-LAverage -
        H-LAverage_n_periods_ago)/H-LAverage_n_periods_ago)*100
    </remarks>
            <param name="s">A financial series.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average for each of the periods on which it can be
evaluated.</param>
            <param name="noOfPeriods">An integer which represents the number of previous time
periods used over which the comparing moving average is
taken.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ChaikinVolatility(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32)">
            <summary>Chaikin's Volatility indicator compares the spread between a
security's high and low prices.</summary>
            <remarks>    It quantifies volatility as a widening of the range between the
    high and the low price. 
    Indicator Formula
    The formula for this indicator is:
    
        chaikinVolatility = ((H-LAverage -
        H-LAverage_n_periods_ago)/H-LAverage_n_periods_ago)*100
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average for each of the periods on which it can be
evaluated.</param>
            <param name="noOfPeriods">An integer which represents the number of previous time
periods used over which the comparing moving average is
taken.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CommodityChannelIdxOverPeriod">
            <summary>This indicator is a generalization of the
CommodityChannelIndex indicator and calculates the values of
the commodityChannelIndex indicator over all sub-periods of a given
length.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CommodityChannelIdxOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>This indicator is a generalization of the
CommodityChannelIndex indicator and calculates the values of
the commodityChannelIndex indicator over all sub-periods of a given
length.</summary>
            <remarks>    The CCI measures the variation of a security's price from its
    statistical mean. High values show that prices are unusually
    high compared to average prices whereas low values indicate
    that prices are unusually low. The CCI can be used effectively
    on any type of security, but clearly it is most applicable
    where the security has should a strong degree on mean
    reversion. 
    Lambert originally commended that the CCI was designed to
    capture the trade cycle (i.e. low-to-low or high-to-high) turns
    in commodity markets. The system assumes that commodities move
    in cycles and uses 1/3 of the cycle period for the evaluation
    of the CCI. We allow the uses to specify the length of the
    calculation period used but we advise that you take the
    calculation cycle to be approximately one third of your
    estimate for the length of the trade cycle.
    Calculation Period: the number of days used in the
    evaluation of the CCI. In Donald Lambert's original system this
    was taken to be one third of the estimate length of the trade
    cycle.
    Remark: Within the evaluation procedure (step 2),
    we multiply the result by the constant 0.015. The constant was
    originally used in Lambert's system and has been found to
    ensure that around 70-80 percent of all the values given by the
    CCI lie the range [-100,+100]. Hence, the constant is just used
    to calibrate the indicator with respect to the range [-100,
    +100].
    Interpretation
    Significant signals are generated when either the CCI starts to
    diverge from the price action which will signify a correlation
    in the price, or when the CCI extended (typically above 100 or
    below -100) which indicates oversold or over brought
    conditions.
    Further details concerning the CCI can be found in an
    article by Donald Lambert that appeared in the October 1980
    issue of Commodities (now known as Futures) Magazine.
    
        Evaluation Procedure
        We summaries our basic evaluation procedure by the
        following three steps:  
        
            First evaluate the simple moving average (SMA) of
            the Typical Price Indicator (see Filters) over the
            calculation period.
            Evaluate the SMA over the calculation period of the
            absolute value on each on the calculation period days
            between the Typical Price on that day and the SMA found
            in step 1 above, and multiply the result by 0.015.
            Divide todays typical price minus the SMA of the
            typical price found in step 1, by the result given by
            step 2. 
        
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series where the first element is the high in the last
trading period, the second term is the high in the previous period
and so on.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CommodityChannelIdxOverPeriod(dotnetCHARTING.Series,System.Int32)">
            <summary>This indicator is a generalization of the
CommodityChannelIndex indicator and calculates the values of
the commodityChannelIndex indicator over all sub-periods of a given
length.</summary>
            <remarks>    The CCI measures the variation of a security's price from its
    statistical mean. High values show that prices are unusually
    high compared to average prices whereas low values indicate
    that prices are unusually low. The CCI can be used effectively
    on any type of security, but clearly it is most applicable
    where the security has should a strong degree on mean
    reversion. 
    Lambert originally commended that the CCI was designed to
    capture the trade cycle (i.e. low-to-low or high-to-high) turns
    in commodity markets. The system assumes that commodities move
    in cycles and uses 1/3 of the cycle period for the evaluation
    of the CCI. We allow the uses to specify the length of the
    calculation period used but we advise that you take the
    calculation cycle to be approximately one third of your
    estimate for the length of the trade cycle.
    Calculation Period: the number of days used in the
    evaluation of the CCI. In Donald Lambert's original system this
    was taken to be one third of the estimate length of the trade
    cycle.
    Remark: Within the evaluation procedure (step 2),
    we multiply the result by the constant 0.015. The constant was
    originally used in Lambert's system and has been found to
    ensure that around 70-80 percent of all the values given by the
    CCI lie the range [-100,+100]. Hence, the constant is just used
    to calibrate the indicator with respect to the range [-100,
    +100].
    Interpretation
    Significant signals are generated when either the CCI starts to
    diverge from the price action which will signify a correlation
    in the price, or when the CCI extended (typically above 100 or
    below -100) which indicates oversold or over brought
    conditions.
    Further details concerning the CCI can be found in an
    article by Donald Lambert that appeared in the October 1980
    issue of Commodities (now known as Futures) Magazine.
    
        Evaluation Procedure
        We summaries our basic evaluation procedure by the
        following three steps:  
        
            First evaluate the simple moving average (SMA) of
            the Typical Price Indicator (see Filters) over the
            calculation period.
            Evaluate the SMA over the calculation period of the
            absolute value on each on the calculation period days
            between the Typical Price on that day and the SMA found
            in step 1 above, and multiply the result by 0.015.
            Divide todays typical price minus the SMA of the
            typical price found in step 1, by the result given by
            step 2. 
        
    </remarks>
            <param name="s">A series where the first element is the high in the last
trading period, the second term is the high in the previous period
and so on.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CommodityChannelIdxOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>This indicator is a generalization of the
CommodityChannelIndex indicator and calculates the values of
the commodityChannelIndex indicator over all sub-periods of a given
length.</summary>
            <remarks>    The CCI measures the variation of a security's price from its
    statistical mean. High values show that prices are unusually
    high compared to average prices whereas low values indicate
    that prices are unusually low. The CCI can be used effectively
    on any type of security, but clearly it is most applicable
    where the security has should a strong degree on mean
    reversion. 
    Lambert originally commended that the CCI was designed to
    capture the trade cycle (i.e. low-to-low or high-to-high) turns
    in commodity markets. The system assumes that commodities move
    in cycles and uses 1/3 of the cycle period for the evaluation
    of the CCI. We allow the uses to specify the length of the
    calculation period used but we advise that you take the
    calculation cycle to be approximately one third of your
    estimate for the length of the trade cycle.
    Calculation Period: the number of days used in the
    evaluation of the CCI. In Donald Lambert's original system this
    was taken to be one third of the estimate length of the trade
    cycle.
    Remark: Within the evaluation procedure (step 2),
    we multiply the result by the constant 0.015. The constant was
    originally used in Lambert's system and has been found to
    ensure that around 70-80 percent of all the values given by the
    CCI lie the range [-100,+100]. Hence, the constant is just used
    to calibrate the indicator with respect to the range [-100,
    +100].
    Interpretation
    Significant signals are generated when either the CCI starts to
    diverge from the price action which will signify a correlation
    in the price, or when the CCI extended (typically above 100 or
    below -100) which indicates oversold or over brought
    conditions.
    Further details concerning the CCI can be found in an
    article by Donald Lambert that appeared in the October 1980
    issue of Commodities (now known as Futures) Magazine.
    
        Evaluation Procedure
        We summaries our basic evaluation procedure by the
        following three steps:  
        
            First evaluate the simple moving average (SMA) of
            the Typical Price Indicator (see Filters) over the
            calculation period.
            Evaluate the SMA over the calculation period of the
            absolute value on each on the calculation period days
            between the Typical Price on that day and the SMA found
            in step 1 above, and multiply the result by 0.015.
            Divide todays typical price minus the SMA of the
            typical price found in step 1, by the result given by
            step 2. 
        
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CrossingExtremeSignal">
            <summary>This trading system combines the features of the crossing and
extremum value trading systems by requiring that a signal will only
be generated if the fast K Stochastic crosses the slow D Stochastic
either above or below the extremal values.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CrossingExtremeSignal(System.String,dotnetCHARTING.Series,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>This trading system combines the features of the crossing and
extremum value trading systems by requiring that a signal will only
be generated if the fast K Stochastic crosses the slow D Stochastic
either above or below the extremal values.</summary>
            <remarks>    Trading System Rules
    This system generates buy and sell signals respectively
    when one of the following is triggered:
    
        Buy Signal: When the fast K Stochastic crosses above
        the slow D Stochastic and this crossing takes place at a
        value lower than the extremumLow, then a buy signal
        is generated.
        Sell Signal: When the fast K Stochastic crosses above
        the slow D Stochastic and this crossing takes place at a
        value higher than the extremumHigh, then a sell
        signal in generated.
    </remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="extremeLow">This is the level at which the Stochastic is believed to
indicate an oversold level. The Stochastic always lies between 0
and 100, and a suggested extreme low value to take is 20.</param>
            <param name="extremeHigh">This is the level at which the Stochastic is believed to
indicate an over brought level. The Stochastic always lies between
0 and 100, and a suggested extreme high value is 80.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32)..</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CrossingExtremeSignal(dotnetCHARTING.Series,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>This trading system combines the features of the crossing and
extremum value trading systems by requiring that a signal will only
be generated if the fast K Stochastic crosses the slow D Stochastic
either above or below the extremal values.</summary>
            <remarks>    Trading System Rules
    This system generates buy and sell signals respectively
    when one of the following is triggered:
    
        Buy Signal: When the fast K Stochastic crosses above
        the slow D Stochastic and this crossing takes place at a
        value lower than the extremumLow, then a buy signal
        is generated.
        Sell Signal: When the fast K Stochastic crosses above
        the slow D Stochastic and this crossing takes place at a
        value higher than the extremumHigh, then a sell
        signal in generated.
    </remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="s">An financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="extremeLow">This is the level at which the Stochastic is believed to
indicate an oversold level. The Stochastic always lies between 0
and 100, and a suggested extreme low value to take is 20.</param>
            <param name="extremeHigh">This is the level at which the Stochastic is believed to
indicate an over brought level. The Stochastic always lies between
0 and 100, and a suggested extreme high value is 80.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32)..</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CrossingExtremeSignal(dotnetCHARTING.SeriesCollection,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>This trading system combines the features of the crossing and
extremum value trading systems by requiring that a signal will only
be generated if the fast K Stochastic crosses the slow D Stochastic
either above or below the extremal values.</summary>
            <remarks>    Trading System Rules
    This system generates buy and sell signals respectively
    when one of the following is triggered:
    
        Buy Signal: When the fast K Stochastic crosses above
        the slow D Stochastic and this crossing takes place at a
        value lower than the extremumLow, then a buy signal
        is generated.
        Sell Signal: When the fast K Stochastic crosses above
        the slow D Stochastic and this crossing takes place at a
        value higher than the extremumHigh, then a sell
        signal in generated.
    </remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="extremeLow">This is the level at which the Stochastic is believed to
indicate an oversold level. The Stochastic always lies between 0
and 100, and a suggested extreme low value to take is 20.</param>
            <param name="extremeHigh">This is the level at which the Stochastic is believed to
indicate an over brought level. The Stochastic always lies between
0 and 100, and a suggested extreme high value is 80.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32)..</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CrossingSignal">
            <summary>Implements a general framework for producing trading signals
based on the crossing of two Stochastics.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CrossingSignal(System.String,dotnetCHARTING.Series,System.Int32,System.Int32,System.Int32)">
            <summary>Implements a general framework for producing trading signals
based on the crossing of two Stochastics.</summary>
            <remarks>    Methodology
    Buy when the Stochastic K, crosses above the MA D and
    sell when the Stochastic K falls below the MA of Stochastic D.
    Since this approach is prone to being whip-sawed we use two
    (general) Stochastics so that a MA of the K Stochastic of the
    first Stochastic and an even more smoothed second Stochastic.
    In this case a sell signal is generated if the first (more
    sensitive) Stochastic cross below the second (smoothed)
    Stochastic, and a buy signal is generated if the first
    Stochastic crosses above the second Stochastic.</remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    </param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CrossingSignal(dotnetCHARTING.Series,System.Int32,System.Int32,System.Int32)">
            <summary>Implements a general framework for producing trading signals
based on the crossing of two Stochastics.</summary>
            <remarks>    Methodology
    Buy when the Stochastic K, crosses above the MA D and
    sell when the Stochastic K falls below the MA of Stochastic D.
    Since this approach is prone to being whip-sawed we use two
    (general) Stochastics so that a MA of the K Stochastic of the
    first Stochastic and an even more smoothed second Stochastic.
    In this case a sell signal is generated if the first (more
    sensitive) Stochastic cross below the second (smoothed)
    Stochastic, and a buy signal is generated if the first
    Stochastic crosses above the second Stochastic.</remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    </param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.CrossingSignal(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32,System.Int32)">
            <summary>Implements a general framework for producing trading signals
based on the crossing of two Stochastics.</summary>
            <remarks>    Methodology
    Buy when the Stochastic K, crosses above the MA D and
    sell when the Stochastic K falls below the MA of Stochastic D.
    Since this approach is prone to being whip-sawed we use two
    (general) Stochastics so that a MA of the K Stochastic of the
    first Stochastic and an even more smoothed second Stochastic.
    In this case a sell signal is generated if the first (more
    sensitive) Stochastic cross below the second (smoothed)
    Stochastic, and a buy signal is generated if the first
    Stochastic crosses above the second Stochastic.</remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    </param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DirectionalMotion">
            <summary>Calculates the Directional Indicator which forms the main
part of the Directional Movement System developed by Wellas
Wilder.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DirectionalMotion(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the Directional Indicator which forms the main
part of the Directional Movement System developed by Wellas
Wilder.</summary>
            <remarks>    This indicator is generally evaluated using 14 periods and is
    used with the PlusDirectionalMovement and
    MinusDirectionalMovement indicators. 
    Evaluation
    The Directional Movement Indicator can be summarized by
    the following formula:
    Directional Movement Indicator = 100 * ( (PDM - MDM) /
    (PDM + MDM) ),
    where PDM is the Plus Directional Movement (PDM)
    indicator over the last two trading periods which can be
    evaluated using PlusDirectionalMovement and MDM
    is the Minus Directional Movement (MDM) indicator over the last
    two trading periods which can be evaluated using
    MinusDirectionalMovement.
    Interpretation
    The directional indicator has a range of [0,100],
    where to higher the value returned the stronger the trend is
    said to be. If a trend is reliable then the smoothed
    directional lines (PDM and MDM) will diverge and the indicator
    will increase. If on the other hand a trend starts to fail and
    price whip-saws (for example with price is within a trading
    range) the difference between the smoothed direction lines will
    decrease and the overall index will decrease.</remarks>
            <returns>A series with the k-th term corresponds to the DM of the k-th
Bar. That is, where the PDM and MDM parameters where both evaluated
with respect to the last two trading periods.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series where the first element contain the prices
of last trading period, the second element represents the prices of
the previous periods and so on. Please note that in order to
calculate this indicator the elements of the financial series must
contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DirectionalMotion(dotnetCHARTING.Series)">
            <summary>Calculates the Directional Indicator which forms the main
part of the Directional Movement System developed by Wellas
Wilder.</summary>
            <remarks>    This indicator is generally evaluated using 14 periods and is
    used with the PlusDirectionalMovement and
    MinusDirectionalMovement indicators. 
    Evaluation
    The Directional Movement Indicator can be summarized by
    the following formula:
    Directional Movement Indicator = 100 * ( (PDM - MDM) /
    (PDM + MDM) ),
    where PDM is the Plus Directional Movement (PDM)
    indicator over the last two trading periods which can be
    evaluated using PlusDirectionalMovement and MDM
    is the Minus Directional Movement (MDM) indicator over the last
    two trading periods which can be evaluated using
    MinusDirectionalMovement.
    Interpretation
    The directional indicator has a range of [0,100],
    where to higher the value returned the stronger the trend is
    said to be. If a trend is reliable then the smoothed
    directional lines (PDM and MDM) will diverge and the indicator
    will increase. If on the other hand a trend starts to fail and
    price whip-saws (for example with price is within a trading
    range) the difference between the smoothed direction lines will
    decrease and the overall index will decrease.</remarks>
            <returns>A series with the k-th term corresponds to the DM of the k-th
Bar. That is, where the PDM and MDM parameters where both evaluated
with respect to the last two trading periods.</returns>
            <param name="s">A financial series where the first element contain the prices
of last trading period, the second element represents the prices of
the previous periods and so on. Please note that in order to
calculate this indicator the elements of the financial series must
contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DirectionalMotion(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the Directional Indicator which forms the main
part of the Directional Movement System developed by Wellas
Wilder.</summary>
            <remarks>    This indicator is generally evaluated using 14 periods and is
    used with the PlusDirectionalMovement and
    MinusDirectionalMovement indicators. 
    Evaluation
    The Directional Movement Indicator can be summarized by
    the following formula:
    Directional Movement Indicator = 100 * ( (PDM - MDM) /
    (PDM + MDM) ),
    where PDM is the Plus Directional Movement (PDM)
    indicator over the last two trading periods which can be
    evaluated using PlusDirectionalMovement and MDM
    is the Minus Directional Movement (MDM) indicator over the last
    two trading periods which can be evaluated using
    MinusDirectionalMovement.
    Interpretation
    The directional indicator has a range of [0,100],
    where to higher the value returned the stronger the trend is
    said to be. If a trend is reliable then the smoothed
    directional lines (PDM and MDM) will diverge and the indicator
    will increase. If on the other hand a trend starts to fail and
    price whip-saws (for example with price is within a trading
    range) the difference between the smoothed direction lines will
    decrease and the overall index will decrease.</remarks>
            <returns>A collections of series. Each series has the k-th term
corresponds to the DM of the k-th Bar. That is, where the PDM and
MDM parameters where both evaluated with respect to the last two
trading periods.</returns>
            <param name="sc">A collection of financial series objects. For example, to
evaluate this indicator for two series you will need to pass a
series collection containing this two series.Please note that in
order to calculate this indicator the elements of the financial
series must contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DMISignal">
            <summary>Evaluates what is know as the Directional Motion Indicator
(MDI) Trading Signal.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DMISignal(System.String,dotnetCHARTING.Series,System.Int32,System.Int32)">
            <summary>Evaluates what is know as the Directional Motion Indicator
(MDI) Trading Signal.</summary>
            <remarks>    This signal determines whether a given asset or index should be
    sold, brought or no action should be taken for a given asset
    under consideration. This trading signal forms the basis of the
    DMI Trading System which was developed by Welles Wilder. 
    At its simplest level to DMI system states that when the
    PDI crosses above the MDI a buy signal is generated and when
    the MDI crosses above the PMI then a sell signal is generated.
    This however may generate an excessive number of signals and
    hence we offer the possibility to smooth out these indicators
    according to a moving average which will help to reduce to
    sensitivity of the trading system.
    Advantages to this Approach
    This trading approach will reveal a trend before it is
    detected by most market participants. Once the trend becomes
    more widely recognized other market participants will tend to
    buy the tend and hence re-enforcing the trend dynamics. Hence
    the DMI system offers a good risk/reward trend following
    system.</remarks>
            <returns>Returns -1, 0, or 1 respectively
according to whether a sell, no action or buy signal is
generated.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series where the first element contain the prices
of last trading period, the second element represents the prices of
the previous periods and so on. Please note that in order to
calculate this indicator the elements of the financial series must
contain High, Low and Close values.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32).</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DMISignal(dotnetCHARTING.Series,System.Int32,System.Int32)">
            <summary>Evaluates what is know as the Directional Motion Indicator
(MDI) Trading Signal.</summary>
            <remarks>    This signal determines whether a given asset or index should be
    sold, brought or no action should be taken for a given asset
    under consideration. This trading signal forms the basis of the
    DMI Trading System which was developed by Welles Wilder. 
    At its simplest level to DMI system states that when the
    PDI crosses above the MDI a buy signal is generated and when
    the MDI crosses above the PMI then a sell signal is generated.
    This however may generate an excessive number of signals and
    hence we offer the possibility to smooth out these indicators
    according to a moving average which will help to reduce to
    sensitivity of the trading system.
    Advantages to this Approach
    This trading approach will reveal a trend before it is
    detected by most market participants. Once the trend becomes
    more widely recognized other market participants will tend to
    buy the tend and hence re-enforcing the trend dynamics. Hence
    the DMI system offers a good risk/reward trend following
    system.</remarks>
            <returns>Returns -1, 0, or 1 respectively
according to whether a sell, no action or buy signal is
generated.</returns>
            <param name="s">A financial series where the first element contain the prices
of last trading period, the second element represents the prices of
the previous periods and so on. Please note that in order to
calculate this indicator the elements of the financial series must
contain High, Low and Close values.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32).</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DMISignal(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32)">
            <summary>Evaluates what is know as the Directional Motion Indicator
(MDI) Trading Signal.</summary>
            <remarks>    This signal determines whether a given asset or index should be
    sold, brought or no action should be taken for a given asset
    under consideration. This trading signal forms the basis of the
    DMI Trading System which was developed by Welles Wilder. 
    At its simplest level to DMI system states that when the
    PDI crosses above the MDI a buy signal is generated and when
    the MDI crosses above the PMI then a sell signal is generated.
    This however may generate an excessive number of signals and
    hence we offer the possibility to smooth out these indicators
    according to a moving average which will help to reduce to
    sensitivity of the trading system.
    Advantages to this Approach
    This trading approach will reveal a trend before it is
    detected by most market participants. Once the trend becomes
    more widely recognized other market participants will tend to
    buy the tend and hence re-enforcing the trend dynamics. Hence
    the DMI system offers a good risk/reward trend following
    system.</remarks>
            <returns>Returns -1, 0, or 1 respectively
according to whether a sell, no action or buy signal is
generated.</returns>
            <param name="sc">A collection of financial series objects. For example, to
evaluate this indicator for two series you will need to pass a
series collection containing this two series.Please note that in
order to calculate this indicator the elements of the financial
series must contain High, Low and Close values.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32).</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DStochastic">
            <summary>Evaluate the (general) D Stochastic.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DStochastic(System.String,dotnetCHARTING.Series,System.Int32,System.Int32,System.Int32)">
            <summary>Evaluate the (general) D Stochastic.</summary>
            <remarks>    This is just the moving average of the (fast) K Stochastic.
    When the simple moving average is used and the moving average
    is take over three days, the resulting indicator to referred to
    as the (slow) K Stochastic. 
    As one would expect the Moving Average D of the K
    Stochastic depends on:
    
        D Periods - The number of periods over which
        the moving average is evaluated.
        MA Method - This is the method by which the
        moving average of the Stochastic K is evaluated. We offer a
        range of methods for the evaluation of the moving average,
        these include: simple, exponential, geometric, weighted,
        linearly weighted and exponentially weighted.
    
    Remark When the simple moving average is used and
    it is evaluated over 3-days, then the D Stochastic reduces to
    what is known as the slow K Stochastic.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32).</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DStochastic(dotnetCHARTING.Series,System.Int32,System.Int32,System.Int32)">
            <summary>Evaluate the (general) D Stochastic.</summary>
            <remarks>    This is just the moving average of the (fast) K Stochastic.
    When the simple moving average is used and the moving average
    is take over three days, the resulting indicator to referred to
    as the (slow) K Stochastic. 
    As one would expect the Moving Average D of the K
    Stochastic depends on:
    
        D Periods - The number of periods over which
        the moving average is evaluated.
        MA Method - This is the method by which the
        moving average of the Stochastic K is evaluated. We offer a
        range of methods for the evaluation of the moving average,
        these include: simple, exponential, geometric, weighted,
        linearly weighted and exponentially weighted.
    
    Remark When the simple moving average is used and
    it is evaluated over 3-days, then the D Stochastic reduces to
    what is known as the slow K Stochastic.</remarks>
            <param name="s">An financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32).</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.DStochastic(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32,System.Int32)">
            <summary>Evaluate the (general) D Stochastic.</summary>
            <remarks>    This is just the moving average of the (fast) K Stochastic.
    When the simple moving average is used and the moving average
    is take over three days, the resulting indicator to referred to
    as the (slow) K Stochastic. 
    As one would expect the Moving Average D of the K
    Stochastic depends on:
    
        D Periods - The number of periods over which
        the moving average is evaluated.
        MA Method - This is the method by which the
        moving average of the Stochastic K is evaluated. We offer a
        range of methods for the evaluation of the moving average,
        these include: simple, exponential, geometric, weighted,
        linearly weighted and exponentially weighted.
    
    Remark When the simple moving average is used and
    it is evaluated over 3-days, then the D Stochastic reduces to
    what is known as the slow K Stochastic.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32).</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExponentiallyWeightedMovingAverage">
            <summary>Evaluates the (x-day) Exponentially Weighted Moving
Average(EWMA) of a time series provided where x is the
length of the time series array which is provided as a parameter,
for all periods for which sufficient data is provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExponentiallyWeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Evaluates the (x-day) Exponentially Weighted Moving
Average(EWMA) of a time series provided where x is the
length of the time series array which is provided as a parameter,
for all periods for which sufficient data is provided.</summary>
            <returns>A series where the first term is the EWMA for the most recent
period, the second term is the EWMA for the previous period and so
on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series where the first value corresponds to the value of
the asset in the tth period, and the second value
corresponds to the value of the asset in the t-1-th period
and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing
factor. The closer the value is to zero the more influence more
resent measurements will have on the EWMA.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExponentiallyWeightedMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Evaluates the (x-day) Exponentially Weighted Moving
Average(EWMA) of a time series provided where x is the
length of the time series array which is provided as a parameter,
for all periods for which sufficient data is provided.</summary>
            <returns>A series where the first term is the EWMA for the most recent
period, the second term is the EWMA for the previous period and so
on.</returns>
            <param name="s">A series where the first value corresponds to the value of
the asset in the tth period, and the second value
corresponds to the value of the asset in the t-1-th period
and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing
factor. The closer the value is to zero the more influence more
resent measurements will have on the EWMA.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExponentiallyWeightedMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Evaluates the (x-day) Exponentially Weighted Moving
Average(EWMA) of a time series provided where x is the
length of the time series array which is provided as a parameter,
for all periods for which sufficient data is provided.</summary>
            <returns>A series where the first term is the EWMA for the most recent
period, the second term is the EWMA for the previous period and so
on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing
factor. The closer the value is to zero the more influence more
resent measurements will have on the EWMA.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueDSignal">
            <summary>Implements a general framework for producing extreme value
trading signals using Stochastic indicators.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueDSignal(System.String,dotnetCHARTING.Series,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>Implements a general framework for producing extreme value
trading signals using Stochastic indicators.</summary>
            <remarks>    Note, that the general ides of this approach is to seek points
    which are oversold or over brought levels which are turning. 
    Methodology
    Buy when the Oscillator the Stochastic D falls below a
    specific level (e.g. 20) and then rises above that level. Sell
    when the Oscillator rises above a specific level (e.g. 80) and
    then falls below that level. This approach is the preferred
    method of the Stochastics original creator George Lane.</remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="extremeLow">This is the level at which the Stochastic is believed to
indicate an oversold level. The Stochastic always lies between 0
and 100, and a suggested extreme low value to take is 20.</param>
            <param name="extremeHigh">This is the level at which the Stochastic is believed to
indicate an over brought level. The Stochastic always lies between
0 and 100, and a suggested extreme high value is 80.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32).</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueDSignal(dotnetCHARTING.Series,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>Implements a general framework for producing extreme value
trading signals using Stochastic indicators.</summary>
            <remarks>    Note, that the general ides of this approach is to seek points
    which are oversold or over brought levels which are turning. 
    Methodology
    Buy when the Oscillator the Stochastic D falls below a
    specific level (e.g. 20) and then rises above that level. Sell
    when the Oscillator rises above a specific level (e.g. 80) and
    then falls below that level. This approach is the preferred
    method of the Stochastics original creator George Lane.</remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="s">A financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="extremeLow">This is the level at which the Stochastic is believed to
indicate an oversold level. The Stochastic always lies between 0
and 100, and a suggested extreme low value to take is 20.</param>
            <param name="extremeHigh">This is the level at which the Stochastic is believed to
indicate an over brought level. The Stochastic always lies between
0 and 100, and a suggested extreme high value is 80.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32).</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueDSignal(dotnetCHARTING.SeriesCollection,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>Implements a general framework for producing extreme value
trading signals using Stochastic indicators.</summary>
            <remarks>    Note, that the general ides of this approach is to seek points
    which are oversold or over brought levels which are turning. 
    Methodology
    Buy when the Oscillator the Stochastic D falls below a
    specific level (e.g. 20) and then rises above that level. Sell
    when the Oscillator rises above a specific level (e.g. 80) and
    then falls below that level. This approach is the preferred
    method of the Stochastics original creator George Lane.</remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="extremeLow">This is the level at which the Stochastic is believed to
indicate an oversold level. The Stochastic always lies between 0
and 100, and a suggested extreme low value to take is 20.</param>
            <param name="extremeHigh">This is the level at which the Stochastic is believed to
indicate an over brought level. The Stochastic always lies between
0 and 100, and a suggested extreme high value is 80.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
            <param name="method">    Determines the methods used for the evaluation of the moving
    average in accordance with the following key: 
    
        1 = Simple moving average
        2 = Geometric moving average
        3 = Linearly weighted moving average
        4 = Exponentially Weighted Moving average within
        smoothing fact set to be 0.5.
    
    For further details concerning the definition of these
    moving averages please see the accompanying PDF documentation
    or the API documentation for Int32).</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueKSignal">
            <summary>Implements a general framework for producing extreme value
trading signals using Stochastic indicators.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueKSignal(System.String,dotnetCHARTING.Series,System.Double,System.Double,System.Int32)">
            <summary>Implements a general framework for producing extreme value
trading signals using Stochastic indicators.</summary>
            <remarks>    Note, that the general ideea of this approach is to seek points
    which are oversold or over brought levels which are turning. 
    Methodology
    Buy when the the Stochastic K falls below a specific
    level (e.g. 20) and then rises above that level. Sell when the
    Oscillator rises above a specific level (e.g. 80) and then
    falls below that level. This approach is the preferred method
    of the Stochastics original creator George Lane.</remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="extremeLow">This is the level at which the Stochastic is believed to
indicate an oversold level. The Stochastic always lies between 0
and 100, and a suggested extreme low value to take is 20.</param>
            <param name="extremeHigh">This is the level at which the Stochastic is believed to
indicate an over brought level. The Stochastic always lies between
0 and 100, and a suggested extreme high value is 80.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueKSignal(dotnetCHARTING.Series,System.Double,System.Double,System.Int32)">
            <summary>Implements a general framework for producing extreme value
trading signals using Stochastic indicators.</summary>
            <remarks>    Note, that the general ideea of this approach is to seek points
    which are oversold or over brought levels which are turning. 
    Methodology
    Buy when the the Stochastic K falls below a specific
    level (e.g. 20) and then rises above that level. Sell when the
    Oscillator rises above a specific level (e.g. 80) and then
    falls below that level. This approach is the preferred method
    of the Stochastics original creator George Lane.</remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="s">A financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="extremeLow">This is the level at which the Stochastic is believed to
indicate an oversold level. The Stochastic always lies between 0
and 100, and a suggested extreme low value to take is 20.</param>
            <param name="extremeHigh">This is the level at which the Stochastic is believed to
indicate an over brought level. The Stochastic always lies between
0 and 100, and a suggested extreme high value is 80.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueKSignal(dotnetCHARTING.SeriesCollection,System.Double,System.Double,System.Int32)">
            <summary>Implements a general framework for producing extreme value
trading signals using Stochastic indicators.</summary>
            <remarks>    Note, that the general ideea of this approach is to seek points
    which are oversold or over brought levels which are turning. 
    Methodology
    Buy when the the Stochastic K falls below a specific
    level (e.g. 20) and then rises above that level. Sell when the
    Oscillator rises above a specific level (e.g. 80) and then
    falls below that level. This approach is the preferred method
    of the Stochastics original creator George Lane.</remarks>
            <returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate
that either a sell, no action or buy signal was generated.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="extremeLow">This is the level at which the Stochastic is believed to
indicate an oversold level. The Stochastic always lies between 0
and 100, and a suggested extreme low value to take is 20.</param>
            <param name="extremeHigh">This is the level at which the Stochastic is believed to
indicate an over brought level. The Stochastic always lies between
0 and 100, and a suggested extreme high value is 80.</param>
            <param name="noOfPeriods">An integer which represents the number of periods used over
which the closing price is compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.FiniteImpulseResponse">
            <summary>Calculates a Finite Impulse Response Filter.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.FiniteImpulseResponse(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double[])">
            <summary>Calculates a Finite Impulse Response Filter.</summary>
            <remarks>    This is a type of smoothing filter that assigns different
    weights to prices from the past. 
    Evaluation
    The FIR indicator is evaluated by the following
    formula:
    FIR = ((historicalValues[i]*weights[0]) +
    historicalValues[i-1]*wights[1] + ...)/(Sum of
    weights)</remarks>
            <returns>A series where the first element is the FIR of the asset on
the most recent period considered, the second term is the FIR on
the period before that and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">The financial series where the first element is the traded
price on the most recent period, the second element is the traded
price of the previous periods and so on, for the asset under
consideration.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="weights">A double array which represent the different weights
associated with the given prices.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.FiniteImpulseResponse(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double[])">
            <summary>Calculates a Finite Impulse Response Filter.</summary>
            <remarks>    This is a type of smoothing filter that assigns different
    weights to prices from the past. 
    Evaluation
    The FIR indicator is evaluated by the following
    formula:
    FIR = ((historicalValues[i]*weights[0]) +
    historicalValues[i-1]*wights[1] + ...)/(Sum of
    weights)</remarks>
            <returns>A series where the first element is the FIR of the asset on
the most recent period considered, the second term is the FIR on
the period before that and so on.</returns>
            <param name="s">The financial series where the first element is the traded
price on the most recent period, the second element is the traded
price of the previous periods and so on, for the asset under
consideration.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="weights">A double array which represent the different weights
associated with the given prices.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.FiniteImpulseResponse(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double[])">
            <summary>Calculates a Finite Impulse Response Filter.</summary>
            <remarks>    This is a type of smoothing filter that assigns different
    weights to prices from the past. 
    Evaluation
    The FIR indicator is evaluated by the following
    formula:
    FIR = ((historicalValues[i]*weights[0]) +
    historicalValues[i-1]*wights[1] + ...)/(Sum of
    weights)</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="weights">A double array which represent the different weights
associated with the given prices.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.GeometricMean">
            <summary>Calculates the geometric mean of the series's elements
values.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.GeometricMean(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the geometric mean of the series's elements
values.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.GeometricMean(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the geometric mean of the series's elements
values.</summary>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.GeometricMean(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the geometric mean of the series's elements
values.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.GeometricMean(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the geometric mean of the series's elements
values.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.GeometricMovingAverage">
            <summary>Calculates the Geometric Moving Average(GMA) for a given
period for all possible data points (i.e. periods) for which there
is sufficient historical data provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.GeometricMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Calculates the Geometric Moving Average(GMA) for a given
period for all possible data points (i.e. periods) for which there
is sufficient historical data provided.</summary>
            <remarks>    Illustration
    If we are considering a traded asset and the periods
    considered are days then by passing an array containing the
    closing daily prices of a given asset, and by choosing to use
    the 5-day Geometric Moving Average (i.e. passing the length of
    the GMA of 5), then this method will evaluate the
    Geometric Moving Average (GMA) for all days for which the
    closing price on that day and the four previous days is
    known.</remarks>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series containing the values of the time series being
considered. Where the first element gives the last historical
value, the second term the previous periods value and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average of each of the periods on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.GeometricMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Calculates the Geometric Moving Average(GMA) for a given
period for all possible data points (i.e. periods) for which there
is sufficient historical data provided.</summary>
            <remarks>    Illustration
    If we are considering a traded asset and the periods
    considered are days then by passing an array containing the
    closing daily prices of a given asset, and by choosing to use
    the 5-day Geometric Moving Average (i.e. passing the length of
    the GMA of 5), then this method will evaluate the
    Geometric Moving Average (GMA) for all days for which the
    closing price on that day and the four previous days is
    known.</remarks>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="s">A series containing the values of the time series being
considered. Where the first element gives the last historical
value, the second term the previous periods value and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average of each of the periods on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.GeometricMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Calculates the Geometric Moving Average(GMA) for a given
period for all possible data points (i.e. periods) for which there
is sufficient historical data provided.</summary>
            <remarks>    Illustration
    If we are considering a traded asset and the periods
    considered are days then by passing an array containing the
    closing daily prices of a given asset, and by choosing to use
    the 5-day Geometric Moving Average (i.e. passing the length of
    the GMA of 5), then this method will evaluate the
    Geometric Moving Average (GMA) for all days for which the
    closing price on that day and the four previous days is
    known.</remarks>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average of each of the periods on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.HighestPeriod">
            <summary>Returns the highest value of prices over all values given.
Returns a series which contains the higher highs values of prices
array within a given period considering a look back period of n
days.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.HighestPeriod(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Returns the highest value of prices over all values given.
Returns a series which contains the higher highs values of prices
array within a given period considering a look back period of n
days.</summary>
            <returns>a series where the first term is the high calculated for the
most recent trading period, the second term is the high for the
previous trading period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series of length equal or greater to the number of periods
considered in the indicator evaluation where the first element is
the closing price in the last trading period, the second term is
the closing price in the previous trading period and so on.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.HighestPeriod(dotnetCHARTING.Series,System.Int32)">
            <summary>Returns the highest value of prices over all values given.
Returns a series which contains the higher highs values of prices
array within a given period considering a look back period of n
days.</summary>
            <returns>a series where the first term is the high calculated for the
most recent trading period, the second term is the high for the
previous trading period and so on.</returns>
            <param name="s">An series of length equal or greater to the number of periods
considered in the indicator evaluation where the first element is
the closing price in the last trading period, the second term is
the closing price in the previous trading period and so on.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.HighestPeriod(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Returns the highest value of prices over all values given.
Returns a series which contains the higher highs values of prices
array within a given period considering a look back period of n
days.</summary>
            <returns>a series where the first term is the high calculated for the
most recent trading period, the second term is the high for the
previous trading period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.InterQuartileRange">
            <summary>Calculates the Inter-Quartile Range(IQR) of the currently
registered data set.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.InterQuartileRange(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the Inter-Quartile Range(IQR) of the currently
registered data set.</summary>
            <remarks>Recall that the IQR is the difference between the 1-st
quartile (i.e. 25-th percentile) and the 2-nd
quartile (i.e. the 75-th percentile).</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.InterQuartileRange(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the Inter-Quartile Range(IQR) of the currently
registered data set.</summary>
            <remarks>Recall that the IQR is the difference between the 1-st
quartile (i.e. 25-th percentile) and the 2-nd
quartile (i.e. the 75-th percentile).</remarks>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.InterQuartileRange(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the Inter-Quartile Range(IQR) of the currently
registered data set.</summary>
            <remarks>Recall that the IQR is the difference between the 1-st
quartile (i.e. 25-th percentile) and the 2-nd
quartile (i.e. the 75-th percentile).</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.InterQuartileRange(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the Inter-Quartile Range(IQR) of the currently
registered data set.</summary>
            <remarks>Recall that the IQR is the difference between the 1-st
quartile (i.e. 25-th percentile) and the 2-nd
quartile (i.e. the 75-th percentile).</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Kairi">
            <summary>Calculates the Kairi Indicator measure as a percentage of the
price, the divergence between the a moving average (generally the
simple moving average) of the price and the price itself for each
period for which there is sufficient historical values.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Kairi(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series)">
            <summary>Calculates the Kairi Indicator measure as a percentage of the
price, the divergence between the a moving average (generally the
simple moving average) of the price and the price itself for each
period for which there is sufficient historical values.</summary>
            <remarks>    Remark: The Kairi Indicator is often used with
    conjunction with other moving averages within trading
    systems.
    Evaluation
    The formulae for the Kairi Indicator is as follows:
    
    Kairi Indicator = (MA - price) / price
    
    where MA is the moving average being considered and price is
    the present price of the underlying asset.
    Application
    The Kairi Indicator can be used in order to take
    advantage of an over extended trending market. For example, in
    an upwardly trending market when the price gets say more than
    10 above the simple moving average, the asset could be sold
    and repurchased when the next hits the simple moving average
    again.
    The Kairi Indicator could also be used in order to detect
    market tops and bottom. The idea being that market tops and
    bottoms often occur when the price is at an extreme value in
    relation to its moving average. That is, the Kairi Indicator
    should take an extreme value at market tops and bottoms.</remarks>
            <returns>An series where the first term returns the Kairi indicator
expressed as decimal format (i.e. 0.01 = 1 percent) for the most
recent period, the second term returns the Kairi indicator for the
previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first term corresponds to the present
price of the underlying asset for the most recent period, the
second term corresponds to the present price of the underlying
asset for the previous period and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="movingAverageSeries">An series where the first term corresponds to the most recent
value of the moving average (generally the simple moving average)
of the underlying asset, the second term to the previous value and
so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Kairi(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series)">
            <summary>Calculates the Kairi Indicator measure as a percentage of the
price, the divergence between the a moving average (generally the
simple moving average) of the price and the price itself for each
period for which there is sufficient historical values.</summary>
            <remarks>    Remark: The Kairi Indicator is often used with
    conjunction with other moving averages within trading
    systems.
    Evaluation
    The formulae for the Kairi Indicator is as follows:
    
    Kairi Indicator = (MA - price) / price
    
    where MA is the moving average being considered and price is
    the present price of the underlying asset.
    Application
    The Kairi Indicator can be used in order to take
    advantage of an over extended trending market. For example, in
    an upwardly trending market when the price gets say more than
    10 above the simple moving average, the asset could be sold
    and repurchased when the next hits the simple moving average
    again.
    The Kairi Indicator could also be used in order to detect
    market tops and bottom. The idea being that market tops and
    bottoms often occur when the price is at an extreme value in
    relation to its moving average. That is, the Kairi Indicator
    should take an extreme value at market tops and bottoms.</remarks>
            <returns>An series where the first term returns the Kairi indicator
expressed as decimal format (i.e. 0.01 = 1 percent) for the most
recent period, the second term returns the Kairi indicator for the
previous period and so on.</returns>
            <param name="s">An series where the first term corresponds to the present
price of the underlying asset for the most recent period, the
second term corresponds to the present price of the underlying
asset for the previous period and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="movingAverageSeries">An series where the first term corresponds to the most recent
value of the moving average (generally the simple moving average)
of the underlying asset, the second term to the previous value and
so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Kairi(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the Kairi Indicator measure as a percentage of the
price, the divergence between the a moving average (generally the
simple moving average) of the price and the price itself for each
period for which there is sufficient historical values.</summary>
            <remarks>    Remark: The Kairi Indicator is often used with
    conjunction with other moving averages within trading
    systems.
    Evaluation
    The formulae for the Kairi Indicator is as follows:
    
    Kairi Indicator = (MA - price) / price
    
    where MA is the moving average being considered and price is
    the present price of the underlying asset.
    Application
    The Kairi Indicator can be used in order to take
    advantage of an over extended trending market. For example, in
    an upwardly trending market when the price gets say more than
    10 above the simple moving average, the asset could be sold
    and repurchased when the next hits the simple moving average
    again.
    The Kairi Indicator could also be used in order to detect
    market tops and bottom. The idea being that market tops and
    bottoms often occur when the price is at an extreme value in
    relation to its moving average. That is, the Kairi Indicator
    should take an extreme value at market tops and bottoms.</remarks>
            <returns>An series where the first term returns the Kairi indicator
expressed as decimal format (i.e. 0.01 = 1 percent) for the most
recent period, the second term returns the Kairi indicator for the
previous period and so on.</returns>
            <param name="s">An series where the first term corresponds to the present
price of the underlying asset for the most recent period, the
second term corresponds to the present price of the underlying
asset for the previous period and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="movingAverages">An series where the first term corresponds to the most recent
value of the moving average (generally the simple moving average)
of the underlying asset, the second term to the previous value and
so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.KFastStochastic">
            <summary>    Evaluation of the Fast K Stochastic when the number of previous
    time periods used over which the closing price is compared is
    given. 
    Indicator variables
    The Stochastic K depends on the following
    variable:
    
        Periods - the number of previous time periods
        used over which the closing price is compared.
    
    Now the formulae for the Stochastic K over a
    is:
     100 x (Last Close - Lowest low)/(Highest high - Lowest
    low)
    where the "lowest low" (respec. "highest high") is the
    highest (respec. lowest) close of the asset over the period
    under consideration. Since the "Last close", will lie between
    the highest high and lowest low this indicator will lie between
    0 and 100.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.KFastStochastic(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>    Evaluation of the Fast K Stochastic when the number of previous
    time periods used over which the closing price is compared is
    given. 
    Indicator variables
    The Stochastic K depends on the following
    variable:
    
        Periods - the number of previous time periods
        used over which the closing price is compared.
    
    Now the formulae for the Stochastic K over a
    is:
     100 x (Last Close - Lowest low)/(Highest high - Lowest
    low)
    where the "lowest low" (respec. "highest high") is the
    highest (respec. lowest) close of the asset over the period
    under consideration. Since the "Last close", will lie between
    the highest high and lowest low this indicator will lie between
    0 and 100.</summary>
            <returns>A series where the first term is the KFastStochastic
calculated for the most recent period, the second term is the
KFastStochastic calculated for the previous period and so
on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="noOfPeriods">An integer which represents the number of previous time
periods used over which the closing price is compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.KFastStochastic(dotnetCHARTING.Series,System.Int32)">
            <summary>    Evaluation of the Fast K Stochastic when the number of previous
    time periods used over which the closing price is compared is
    given. 
    Indicator variables
    The Stochastic K depends on the following
    variable:
    
        Periods - the number of previous time periods
        used over which the closing price is compared.
    
    Now the formulae for the Stochastic K over a
    is:
    
    100 x (Last Close - Lowest low)/(Highest high - Lowest
    low)
    where the "lowest low" (respec. "highest high") is the
    highest (respec. lowest) close of the asset over the period
    under consideration. Since the "Last close", will lie between
    the highest high and lowest low this indicator will lie between
    0 and 100.</summary>
            <returns>A series where the first term is the KFastStochastic
calculated for the most recent period, the second term is the
KFastStochastic calculated for the previous period and so
on.</returns>
            <param name="s">An financial series where the first element is the closing
price in the last trading period, the second term is the closing
price in the previous trading period and so on.</param>
            <param name="noOfPeriods">An integer which represents the number of previous time
periods used over which the closing price is compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.KFastStochastic(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>    Evaluation of the Fast K Stochastic when the number of previous
    time periods used over which the closing price is compared is
    given. 
    Indicator variables
    The Stochastic K depends on the following
    variable:
    
        Periods - the number of previous time periods
        used over which the closing price is compared.
    
    Now the formulae for the Stochastic K over a
    is:
    
    100 x (Last Close - Lowest low)/(Highest high - Lowest
    low)
    
    where the "lowest low" (respec. "highest high") is the
    highest (respec. lowest) close of the asset over the period
    under consideration. Since the "Last close", will lie between
    the highest high and lowest low this indicator will lie between
    0 and 100.</summary>
            <returns>A series where the first term is the KFastStochastic
calculated for the most recent period, the second term is the
KFastStochastic calculated for the previous period and so
on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="noOfPeriods">An integer which represents the number of previous time
periods used over which the closing price is compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Kurtosis">
            <summary>Calculates the kurtosis of the currently registered data
set.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Kurtosis(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the kurtosis of the currently registered data
set.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Kurtosis(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the kurtosis of the currently registered data
set.</summary>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Kurtosis(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the kurtosis of the currently registered data
set.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Kurtosis(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the kurtosis of the currently registered data
set.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LinearMovingAverage">
            <summary>Returns the value of the Linearly Weighted Moving
Average(LWMA) for all periods for which sufficient historical data
is provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LinearMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Returns the value of the Linearly Weighted Moving
Average(LWMA) for all periods for which sufficient historical data
is provided.</summary>
            <remarks>The Linearly Weighted Moving Average(LWMA) weights the time
series by assigning a weight of 1, to the oldest price and a weight
of 2, to the second oldest price and so on... Until the weight of
the most recent value is assigned to be the parameter
lengthOfMA, after which the LWMA is given by the sum of the
weighted prices divided by the sum of the weights. This indicator
then shifts the window (one place back) over which the MA is
evaluated and the indicator is then re-evaluated.</remarks>
            <returns>A series where the first term is the LWMA of length
lengthOfMA for the latest period, the second term is the
LWMA of length lengthOfMA for the previous period and so
on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series where the first element is the price on the earliest
period, the second element is the price on the next earliest period
and on so.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the FinancialEngine time series) which will
be considered within this indicator evaluation. In particular, if
you wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LinearMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Returns the value of the Linearly Weighted Moving
Average(LWMA) for all periods for which sufficient historical data
is provided.</summary>
            <remarks>The Linearly Weighted Moving Average(LWMA) weights the time
series by assigning a weight of 1, to the oldest price and a weight
of 2, to the second oldest price and so on... Until the weight of
the most recent value is assigned to be the parameter
lengthOfMA, after which the LWMA is given by the sum of the
weighted prices divided by the sum of the weights. This indicator
then shifts the window (one place back) over which the MA is
evaluated and the indicator is then re-evaluated.</remarks>
            <returns>A series where the first term is the LWMA of length
lengthOfMA for the latest period, the second term is the
LWMA of length lengthOfMA for the previous period and so
on.</returns>
            <param name="s">A series where the first element is the price on the earliest
period, the second element is the price on the next earliest period
and on so.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LinearMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Returns the value of the Linearly Weighted Moving
Average(LWMA) for all periods for which sufficient historical data
is provided.</summary>
            <remarks>The Linearly Weighted Moving Average(LWMA) weights the time
series by assigning a weight of 1, to the oldest price and a weight
of 2, to the second oldest price and so on... Until the weight of
the most recent value is assigned to be the parameter
lengthOfMA, after which the LWMA is given by the sum of the
weighted prices divided by the sum of the weights. This indicator
then shifts the window (one place back) over which the MA is
evaluated and the indicator is then re-evaluated.</remarks>
            <returns>A series where the first term is the LWMA of length
lengthOfMA for the latest period, the second term is the
LWMA of length lengthOfMA for the previous period and so
on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average of each of the days on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LowerBollingerBands">
            <summary>Evaluates the position of the Lower Bollinger Band for a
given standard deviation level.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LowerBollingerBands(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Evaluates the position of the Lower Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Lower Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series where the first term correspond the latest periods
price and the previous element is the value of the element before
that and so on... The length of this series is equal to the number
of periods used in the evaluation of the standard deviation and the
moving average.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="standardDeviationLevel">The number of standard deviation which the lower band in
shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LowerBollingerBands(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Evaluates the position of the Lower Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Lower Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="s">A series where the first term correspond the latest periods
price and the previous element is the value of the element before
that and so on... The length of this series is equal to the number
of periods used in the evaluation of the standard deviation and the
moving average.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="standardDeviationLevel">The number of standard deviation which the lower band in
shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LowerBollingerBands(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Evaluates the position of the Lower Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Lower Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="standardDeviationLevel">The number of standard deviation which the lower band in
shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LowestPeriod">
            <summary>Returns an array which contains the lower lows values of
prices array within a given period considering a look back period
of n days.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LowestPeriod(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Returns an array which contains the lower lows values of
prices array within a given period considering a look back period
of n days.</summary>
            <returns>A series where the first term is the low calculated for the
most recent trading period, the second term is the low for the
previous trading period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LowestPeriod(dotnetCHARTING.Series,System.Int32)">
            <summary>Returns an array which contains the lower lows values of
prices array within a given period considering a look back period
of n days.</summary>
            <returns>A series where the first term is the low calculated for the
most recent trading period, the second term is the low for the
previous trading period and so on.</returns>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.LowestPeriod(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Returns an array which contains the lower lows values of
prices array within a given period considering a look back period
of n days.</summary>
            <returns>A series where the first term is the low calculated for the
most recent trading period, the second term is the low for the
previous trading period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MarketFacilitationIndex">
            <summary>Market Facilitation Index was developed by Dr. Bill Williams
and take into consideration the price and volume.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MarketFacilitationIndex(System.String,dotnetCHARTING.Series)">
            <summary>Market Facilitation Index was developed by Dr. Bill Williams
and take into consideration the price and volume.</summary>
            <remarks>    Evaluation
    The formula for the calculation of MFI is:
    MFI = (high - low)/volume
    where high is the highest traded price during the
    period, low is the lowest traded price during the period
    and, volume is the overall volume traded on that
    period.
    Interpretation
    There are four types of trading sessions called:
    
        Fakes - volume is low but MFI is rising
        Fades - both volume and MFI is down (the price might
        move in the opposite direction)
        Squats - the volume is up, MFI is down
        Greens - when the MFI and volume are up which
        represent a strong signal to follow the trendline
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">The financial series where the first element is the traded
price on the most recent period, the second element is the traded
price of the previous periods and so on, for the asset under
consideration.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MarketFacilitationIndex(dotnetCHARTING.Series)">
            <summary>Market Facilitation Index was developed by Dr. Bill Williams
and take into consideration the price and volume.</summary>
            <remarks>    Evaluation
    The formula for the calculation of MFI is:
    MFI = (high - low)/volume
    where high is the highest traded price during the
    period, low is the lowest traded price during the period
    and, volume is the overall volume traded on that
    period.
    Interpretation
    There are four types of trading sessions called:
    
        Fakes - volume is low but MFI is rising
        Fades - both volume and MFI is down (the price might
        move in the opposite direction)
        Squats - the volume is up, MFI is down
        Greens - when the MFI and volume are up which
        represent a strong signal to follow the trendline
    </remarks>
            <param name="s">The financial series where the first element is the traded
price on the most recent period, the second element is the traded
price of the previous periods and so on, for the asset under
consideration.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MarketFacilitationIndex(dotnetCHARTING.SeriesCollection)">
            <summary>Market Facilitation Index was developed by Dr. Bill Williams
and take into consideration the price and volume.</summary>
            <remarks>    Evaluation
    The formula for the calculation of MFI is:
    MFI = (high - low)/volume
    where high is the highest traded price during the
    period, low is the lowest traded price during the period
    and, volume is the overall volume traded on that
    period.
    Interpretation
    There are four types of trading sessions called:
    
        Fakes - volume is low but MFI is rising
        Fades - both volume and MFI is down (the price might
        move in the opposite direction)
        Squats - the volume is up, MFI is down
        Greens - when the MFI and volume are up which
        represent a strong signal to follow the trendline
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Mean">
            <summary>Calculates the arithmetic mean of the elements values of the
series.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Mean(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the arithmetic mean of the elements values of the
series.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High . In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Mean(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the arithmetic mean of the elements values of the
series.</summary>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Mean(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the arithmetic mean of the elements values of the
series.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Mean(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the arithmetic mean of the elements values of the
series.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MeanDeviation">
            <summary>Calculates the mean deviation of the series's element
values.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MeanDeviation(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the mean deviation of the series's element
values.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MeanDeviation(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the mean deviation of the series's element
values.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MeanDeviation(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the mean deviation of the series's element
values.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MeanDeviation(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the mean deviation of the series's element
values.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Median">
            <summary>Calculates the mean deviation of the series's element
YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the mean deviation of the series's element
YValues.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Median(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the mean deviation of the series's element
YValues.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the mean deviation of the series's element
YValues.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Median(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the mean deviation of the series's element
YValues.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MedianMovingAverage">
            <summary>Returns the Median Moving Average of a given period of the
data series provided for all possible periods for the data
given.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MedianMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Returns the Median Moving Average of a given period of the
data series provided for all possible periods for the data
given.</summary>
            <remarks>    For example, if we are considering a trading asset and the
    periods considered are days then by passing an series
    containing the closing daily prices of a given asset, and by
    choosing to use the 5-day median moving average (i.e. passing a
    length of the MA of 5), then we will evaluate the Median
    Moving Average(GMA) for all days for which the closing price on
    that day and the four previous days is known. 
    Remark: This indicator is particularly appropriate
    for traded assets where the opening and closing prices are
    unreliable. Such an instance are FTSE stocks which in the first
    hour of trading experience relatively low volumes and the
    closing prices are settled through an auction process. Hence
    for the FTSE market the quoted market price at the beginning
    and end of the market may not be indicative of where a given
    stock is trading within a given period. In such markets it may
    be more appropriate to use the Median Moving Average which will
    smooth out the effect of uncharacteristic shifts at the ends of
    the trading day.</remarks>
            <returns>A series where the first term is the value of the Median
Moving Average for the most recent period, the second term is the
value of the Median Moving Average for the previous period and so
on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="highSeries">An array where the first element corresponds to the highest
market price during the last trading period, the second element
corresponds to the highest market price in the previous period, and
so on.</param>
            <param name="highSeriesElementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lowSeries">An array where the first element corresponds to the lowest
market price during the last trading period, the second term
corresponds to the lowest market price in the previous period, and
so on.</param>
            <param name="lowSeriesElementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average of each of the days on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MedianMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Returns the Median Moving Average of a given period of the
data series provided for all possible periods for the data
given.</summary>
            <remarks>    For example, if we are considering a trading asset and the
    periods considered are days then by passing an series
    containing the closing daily prices of a given asset, and by
    choosing to use the 5-day median moving average (i.e. passing a
    length of the MA of 5), then we will evaluate the Median
    Moving Average(GMA) for all days for which the closing price on
    that day and the four previous days is known. 
    Remark: This indicator is particularly appropriate
    for traded assets where the opening and closing prices are
    unreliable. Such an instance are FTSE stocks which in the first
    hour of trading experience relatively low volumes and the
    closing prices are settled through an auction process. Hence
    for the FTSE market the quoted market price at the beginning
    and end of the market may not be indicative of where a given
    stock is trading within a given period. In such markets it may
    be more appropriate to use the Median Moving Average which will
    smooth out the effect of uncharacteristic shifts at the ends of
    the trading day.</remarks>
            <returns>A series where the first term is the value of the Median
Moving Average for the most recent period, the second term is the
value of the Median Moving Average for the previous period and so
on.</returns>
            <param name="highSeries">An array where the first element corresponds to the highest
market price during the last trading period, the second element
corresponds to the highest market price in the previous period, and
so on.</param>
            <param name="highSeriesElementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lowSeries">An array where the first element corresponds to the lowest
market price during the last trading period, the second term
corresponds to the lowest market price in the previous period, and
so on.</param>
            <param name="lowSeriesElementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average of each of the days on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MedianMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Returns the Median Moving Average of a given period of the
data series provided for all possible periods for the data
given.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="highSeriesElementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lowSeriesElementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average of each of the days on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MedianPrice">
            <summary>Evaluates the Median Price of an asset for a given trading
period.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MedianPrice(System.String,dotnetCHARTING.Series)">
            <summary>Evaluates the Median Price of an asset for a given trading
period.</summary>
            <remarks>The Median price is just the midpoint of the trading periods
range, where the period considered is generally a day, however the
Median price is equally applicable to other time spans and hence
the period considered could be (for example) a month or
year.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">The financial series under consideration.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MedianPrice(dotnetCHARTING.Series)">
            <summary>Evaluates the Median Price of an asset for a given trading
period.</summary>
            <remarks>The Median price is just the midpoint of the trading periods
range, where the period considered is generally a day, however the
Median price is equally applicable to other time spans and hence
the period considered could be (for example) a month or
year.</remarks>
            <param name="s">The financial series under consideration.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MedianPrice(dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Median Price of an asset for a given trading
period.</summary>
            <remarks>The Median price is just the midpoint of the trading periods
range, where the period considered is generally a day, however the
Median price is equally applicable to other time spans and hence
the period considered could be (for example) a month or
year.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MinusDirectionalMovement">
            <summary>Evaluates the Minus Directional Movement Indicator (MDMI)
over a number of periods using price data only.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MinusDirectionalMovement(System.String,dotnetCHARTING.Series)">
            <summary>Evaluates the Minus Directional Movement Indicator (MDMI)
over a number of periods using price data only.</summary>
            <returns>A series with the k-th term corresponds to the MDMI of the
k-th Bar. Please note that if the asset price is constant over any
period considered then the Minus Directional Movement Indicator for
that period is taken to be zero.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series where the first element contain the prices
of last trading period, the second element represents the prices of
the previous periods and so on. Please note that in order to
calculate this indicator the elements of the financial series must
contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MinusDirectionalMovement(dotnetCHARTING.Series)">
            <summary>Evaluates the Minus Directional Movement Indicator (MDMI)
over a number of periods using price data only.</summary>
            <returns>A series with the k-th term corresponds to the MDMI of the
k-th Bar. Please note that if the asset price is constant over any
period considered then the Directional Movement Indicator for that
period is taken to be zero.</returns>
            <param name="s">A financial series where the first element contain the prices
of last trading period, the second element represents the prices of
the previous periods and so on. Please note that in order to
calculate this indicator the elements of the financial series must
contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MinusDirectionalMovement(dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Minus Directional Movement Indicator (MDMI)
over a number of periods using price data only.</summary>
            <returns>A collections of series. Each series has the k-th term
corresponds to the MDMI of the k-th Bar. Please note that if the
asset price is constant over any period considered then the Minus
Directional Movement Indicator for that period is taken to be
zero.</returns>
            <param name="sc">A collection of financial series objects. For example, to
evaluate this indicator for two series you will need to pass a
series collection containing this two series.Please note that in
order to calculate this indicator the elements of the financial
series must contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Momentum">
            <summary>We evaluate the n-day momentum which is simply the difference
between today's closing price and the close price n days ago, for
all days for which sufficient historical data is given.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Momentum(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>We evaluate the n-day momentum which is simply the difference
between today's closing price and the close price n days ago, for
all days for which sufficient historical data is given.</summary>
            <remarks>    The Momentum indicator as the name suggests is the velocity
    with which the price is rising or falling, and hence will
    reflect how aggressively the asset is being purchased or sold. 
    Remark: Extended values and/or turning points of
    the momentum are good indicators of oversold or over brought
    conditions(respectively).</remarks>
            <returns>A series where the first term is the momentum for the most
recent trading period, the second term is the momentum for the
previous trading period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series of length greate or equal to the number of periods
considered in the indicator evaluation where the first element is
the closing price in the last trading period, the second term is
the closing price in the previous trading period and so on.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Momentum(dotnetCHARTING.Series,System.Int32)">
            <summary>We evaluate the n-day momentum which is simply the difference
between today's closing price and the close price n days ago, for
all days for which sufficient historical data is given.</summary>
            <remarks>    The Momentum indicator as the name suggests is the velocity
    with which the price is rising or falling, and hence will
    reflect how aggressively the asset is being purchased or sold. 
    Remark: Extended values and/or turning points of
    the momentum are good indicators of oversold or over brought
    conditions(respectively).</remarks>
            <returns>A series where the first term is the momentum for the most
recent trading period, the second term is the momentum for the
previous trading period and so on.</returns>
            <param name="s">An series of length greate or equal to the number of periods
considered in the indicator evaluation where the first element is
the closing price in the last trading period, the second term is
the closing price in the previous trading period and so on.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Momentum(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>We evaluate the n-day momentum which is simply the difference
between today's closing price and the close price n days ago, for
all days for which sufficient historical data is given.</summary>
            <remarks>    The Momentum indicator as the name suggests is the velocity
    with which the price is rising or falling, and hence will
    reflect how aggressively the asset is being purchased or sold. 
    Remark: Extended values and/or turning points of
    the momentum are good indicators of oversold or over brought
    conditions(respectively).</remarks>
            <returns>A series where the first term is the momentum for the most
recent trading period, the second term is the momentum for the
previous trading period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MomentumPercent">
            <summary>We calculate the momentum pergentage over a given
period.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MomentumPercent(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>We calculate the momentum pergentage over a given
period.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series of length equal or greater to the number of periods
considered in the indicator evaluation where the first element is
the closing price in the last trading period, the second term is
the closing price in the previous trading period and so on.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MomentumPercent(dotnetCHARTING.Series,System.Int32)">
            <summary>We calculate the momentum pergentage over a given
period.</summary>
            <param name="s">An series of length equal or greater to the number of periods
considered in the indicator evaluation where the first element is
the closing price in the last trading period, the second term is
the closing price in the previous trading period and so on.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MomentumPercent(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>We calculate the momentum pergentage over a given
period.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="noOfDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MoneyFlowIdxOverPeriod">
            <summary>Evaluates the Money Flow Index (MFI) which measures the
strength of money flowing in and out of a security over all periods
for which sufficient data is provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MoneyFlowIdxOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluates the Money Flow Index (MFI) which measures the
strength of money flowing in and out of a security over all periods
for which sufficient data is provided.</summary>
            <remarks>    The MFI is related to the Directional Movement Indicator of
    Wellas Wilder, but the MFI system also takes into account the
    volume as well as the price action. 
    Interpretation
    Divergence of the indicator within a continuing trend
    indicates that a reversal is imminent. The MFI also is a good
    means to signal market tops and bottoms. A reasonable rule is a
    market top is given more significance when the MFI is above
    80 and a market bottom is given more significance when
    the MFI is below 20.
    Evaluation
    
        The Money Flow Index (MFI) is evaluated over a given user
        defined number of trading periods. The evaluation of the
        MFI follows the below steps:  
        
            Evaluates the Money Flow on each day. The Money
            Flow is the product of the Typical Value Indicator (see
            Filters) for that day and the volume.
            Each day is either classified as either a Positive
            Money Flow day, Negative Money Flow day or no Flow day.
            If the typical price increases then the day is a said
            to be a Positive Money Day, if it decreasing then it is
            said to be a negative money day and if it stays then
            same then it is said the be a no flow day.
            The Positive Money and Negative Money Flow's are
            calculated by summing the Money Flow over the Positive
            Money Flow Days or the Negative Money Flow days
            respectively.
            The Money Flow Index (MFI) is evaluated by dividing
            the Positive Money Flow by the Negative Money Flow.
            
        
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first element is the high in the last
trading period, the second term is the high in the previous period
and so on.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MoneyFlowIdxOverPeriod(dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluates the Money Flow Index (MFI) which measures the
strength of money flowing in and out of a security over all periods
for which sufficient data is provided.</summary>
            <remarks>    The MFI is related to the Directional Movement Indicator of
    Wellas Wilder, but the MFI system also takes into account the
    volume as well as the price action. 
    Interpretation
    Divergence of the indicator within a continuing trend
    indicates that a reversal is imminent. The MFI also is a good
    means to signal market tops and bottoms. A reasonable rule is a
    market top is given more significance when the MFI is above
    80 and a market bottom is given more significance when
    the MFI is below 20.
    Evaluation
    
        The Money Flow Index (MFI) is evaluated over a given user
        defined number of trading periods. The evaluation of the
        MFI follows the below steps:  
        
            Evaluates the Money Flow on each day. The Money
            Flow is the product of the Typical Value Indicator (see
            Filters) for that day and the volume.
            Each day is either classified as either a Positive
            Money Flow day, Negative Money Flow day or no Flow day.
            If the typical price increases then the day is a said
            to be a Positive Money Day, if it decreasing then it is
            said to be a negative money day and if it stays then
            same then it is said the be a no flow day.
            The Positive Money and Negative Money Flow's are
            calculated by summing the Money Flow over the Positive
            Money Flow Days or the Negative Money Flow days
            respectively.
            The Money Flow Index (MFI) is evaluated by dividing
            the Positive Money Flow by the Negative Money Flow.
            
        
    </remarks>
            <param name="s">An series where the first element is the high in the last
trading period, the second term is the high in the previous period
and so on.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.MoneyFlowIdxOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Evaluates the Money Flow Index (MFI) which measures the
strength of money flowing in and out of a security over all periods
for which sufficient data is provided.</summary>
            <remarks>    The MFI is related to the Directional Movement Indicator of
    Wellas Wilder, but the MFI system also takes into account the
    volume as well as the price action. 
    Interpretation
    Divergence of the indicator within a continuing trend
    indicates that a reversal is imminent. The MFI also is a good
    means to signal market tops and bottoms. A reasonable rule is a
    market top is given more significance when the MFI is above
    80 and a market bottom is given more significance when
    the MFI is below 20.
    Evaluation
    
        The Money Flow Index (MFI) is evaluated over a given user
        defined number of trading periods. The evaluation of the
        MFI follows the below steps:  
        
            Evaluates the Money Flow on each day. The Money
            Flow is the product of the Typical Value Indicator (see
            Filters) for that day and the volume.
            Each day is either classified as either a Positive
            Money Flow day, Negative Money Flow day or no Flow day.
            If the typical price increases then the day is a said
            to be a Positive Money Day, if it decreasing then it is
            said to be a negative money day and if it stays then
            same then it is said the be a no flow day.
            The Positive Money and Negative Money Flow's are
            calculated by summing the Money Flow over the Positive
            Money Flow Days or the Negative Money Flow days
            respectively.
            The Money Flow Index (MFI) is evaluated by dividing
            the Positive Money Flow by the Negative Money Flow.
            
        
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.NegativeVolumeIndex">
            <summary>We evaluate the Negative Volume Index(NVI) wich take in the
consideration the days where volume decrease from the prevoius
day.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.NegativeVolumeIndex(System.String,dotnetCHARTING.Series)">
            <summary>We evaluate the Negative Volume Index(NVI) wich take in the
consideration the days where volume decrease from the prevoius
day.</summary>
            <remarks>    Indicator Formula
    The formula for this indicator is:
     If the volume is less then the yesterday volume then: NVI =
    Yesterday's NVI + (((Close - Yesterday's Close)/Yesterday's
    Close) *Yesterday's NVI)
    If today's volume is greater than or equal to yesterday's
    volume then:
    NVI = Yesterday's NVI
    Allways the first element of an financial array will be a value
    of the most recent period considered.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.NegativeVolumeIndex(dotnetCHARTING.Series)">
            <summary>We evaluate the Negative Volume Index(NVI) wich take in the
consideration the days where volume decrease from the prevoius
day.</summary>
            <remarks>    Indicator Formula
    The formula for this indicator is:
     If the volume is less then the yesterday volume then: NVI =
    Yesterday's NVI + (((Close - Yesterday's Close)/Yesterday's
    Close) *Yesterday's NVI)
    If today's volume is greater than or equal to yesterday's
    volume then:
    NVI = Yesterday's NVI
    Allways the first element of an financial array will be a value
    of the most recent period considered.</remarks>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.NegativeVolumeIndex(dotnetCHARTING.SeriesCollection)">
            <summary>We evaluate the Negative Volume Index(NVI) wich take in the
consideration the days where volume decrease from the prevoius
day.</summary>
            <remarks>    Indicator Formula
    The formula for this indicator is:
     If the volume is less then the yesterday volume then: NVI =
    Yesterday's NVI + (((Close - Yesterday's Close)/Yesterday's
    Close) *Yesterday's NVI)
    If today's volume is greater than or equal to yesterday's
    volume then:
    NVI = Yesterday's NVI
    Allways the first element of an financial array will be a value
    of the most recent period considered.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.OnBalanceVolume">
            <summary>On Balance Volume ("OBV") is a momentum indicator developed
by Joe Granville that relates volume to price change.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.OnBalanceVolume(System.String,dotnetCHARTING.Series)">
            <summary>On Balance Volume ("OBV") is a momentum indicator developed
by Joe Granville that relates volume to price change.</summary>
            <remarks>    Indicator Formula
    The formula for this indicator is:
    If today's close is greater than yesterday's close then:
    OBV = Yesterday's OBV + Today's Volume
    If today's close is less than yesterday's close then:
    OBV = Yesterday's OBV - Today's Volume
    If today's close is equal to yesterday's close then:
    OBV = Yesterday's OBV</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.OnBalanceVolume(dotnetCHARTING.Series)">
            <summary>On Balance Volume ("OBV") is a momentum indicator developed
by Joe Granville that relates volume to price change.</summary>
            <remarks>    Indicator Formula
    The formula for this indicator is:
    If today's close is greater than yesterday's close then:
    OBV = Yesterday's OBV + Today's Volume
    If today's close is less than yesterday's close then:
    OBV = Yesterday's OBV - Today's Volume
    If today's close is equal to yesterday's close then:
    OBV = Yesterday's OBV</remarks>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.OnBalanceVolume(dotnetCHARTING.SeriesCollection)">
            <summary>On Balance Volume ("OBV") is a momentum indicator developed
by Joe Granville that relates volume to price change.</summary>
            <remarks>    Indicator Formula
    The formula for this indicator is:
    If today's close is greater than yesterday's close then:
    OBV = Yesterday's OBV + Today's Volume
    If today's close is less than yesterday's close then:
    OBV = Yesterday's OBV - Today's Volume
    If today's close is equal to yesterday's close then:
    OBV = Yesterday's OBV</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile">
            <summary>Calculates the n-th percentile of the series.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Calculates the n-th percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="percentile">A value between 1 and 100 which reprezent the percentile of
the series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Calculates the n-th percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="s">A FinancialEngine series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the FinancialEngine time series) which will
be considered within this indicator evaluation. In particular, if
you wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="percentile">A value between 1 and 100 which reprezent the percentile of
the series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Calculates the n-th percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="percentile">A value between 1 and 100 which reprezent the percentile of
the series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Calculates the n-th percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="percentile">A value between 1 and 100 which reprezent the percentile of
the series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile25">
            <summary>Calculates the first percentile of the series.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile25(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the first percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile25(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the first percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile25(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the first percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile25(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the first percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile50">
            <summary>Calculates the second percentile of the series.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile50(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the second percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile50(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the second percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile50(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the second percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile50(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the second percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile75">
            <summary>Calculates the third percentile of the series.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile75(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the third percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile75(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the third percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="s">A FinancialEngine series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the FinancialEngine time series) which will
be considered within this indicator evaluation. In particular, if
you wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile75(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the third percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Percentile75(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the third percentile of the series.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PlusDirectionalMovement">
            <summary>Evaluates the Plus Directional Movement Indicator (PDMI) over
a number of periods using price data only.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PlusDirectionalMovement(System.String,dotnetCHARTING.Series)">
            <summary>Evaluates the Plus Directional Movement Indicator (PDMI) over
a number of periods using price data only.</summary>
            <returns>A series with the k-th term corresponds to the PDMI of the
k-th Bar. Please note that if the asset price is constant over any
period considered then the Plus Directional Movement Indicator for
that period is taken to be zero.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series where the first element contain the prices
of last trading period, the second element represents the prices of
the previous periods and so on. Please note that in order to
calculate this indicator the elements of the financial series must
contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PlusDirectionalMovement(dotnetCHARTING.Series)">
            <summary>Evaluates the Plus Directional Movement Indicator (PDMI) over
a number of periods using price data only.</summary>
            <returns>A series with the k-th term corresponds to the PDMI of the
k-th Bar. Please note that if the asset price is constant over any
period considered then the Plus Directional Movement Indicator for
that period is taken to be zero.</returns>
            <param name="s">A financial series where the first element contain the prices
of last trading period, the second element represents the prices of
the previous periods and so on. Please note that in order to
calculate this indicator the elements of the financial series must
contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PlusDirectionalMovement(dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Plus Directional Movement Indicator (PDMI) over
a number of periods using price data only.</summary>
            <returns>A collections of series. Each series has the k-th term
corresponds to the PDMI of the k-th Bar. Please note that if the
asset price is constant over any period considered then the Plus
Directional Movement Indicator for that period is taken to be
zero.</returns>
            <param name="sc">A collection of financial series objects. For example, to
evaluate this indicator for two series you will need to pass a
series collection containing this two series.Please note that in
order to calculate this indicator the elements of the financial
series must contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PositiveVolumeIndex">
            <summary>We evaluate the Positive Volume Index(PVI) wich take in the
consideration the days where volume increase from the previous
day.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PositiveVolumeIndex(System.String,dotnetCHARTING.Series)">
            <summary>We evaluate the Positive Volume Index(PVI) wich take in the
consideration the days where volume increase from the previous
day.</summary>
            <remarks>    Indicator Formula
    The formula for this indicator is:
    If the volume is greater then the yesterday volume then:
    PVI = Yesterday's PVI + (((Close - Yesterday's
    Close)/Yesterday's Close) *Yesterday's PVI)
    If today's volume is less than or equal to yesterday's volume
    then:
    PVI = Yesterday's PVI
    Allways the first element of an financial array will be a value
    of the most recent period considered.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PositiveVolumeIndex(dotnetCHARTING.Series)">
            <summary>We evaluate the Positive Volume Index(PVI) wich take in the
consideration the days where volume increase from the previous
day.</summary>
            <remarks>    Indicator Formula
    The formula for this indicator is:
    If the volume is greater then the yesterday volume then:
    PVI = Yesterday's PVI + (((Close - Yesterday's
    Close)/Yesterday's Close) *Yesterday's PVI)
    If today's volume is less than or equal to yesterday's volume
    then:
    PVI = Yesterday's PVI
    Allways the first element of an financial array will be a value
    of the most recent period considered.</remarks>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PositiveVolumeIndex(dotnetCHARTING.SeriesCollection)">
            <summary>We evaluate the Positive Volume Index(PVI) wich take in the
consideration the days where volume increase from the previous
day.</summary>
            <remarks>    Indicator Formula
    The formula for this indicator is:
    If the volume is greater then the yesterday volume then:
    PVI = Yesterday's PVI + (((Close - Yesterday's
    Close)/Yesterday's Close) *Yesterday's PVI)
    If today's volume is less than or equal to yesterday's volume
    then:
    PVI = Yesterday's PVI
    Allways the first element of an financial array will be a value
    of the most recent period considered.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PriceActionIndicator">
            <summary>Evaluates the Price Action Indicator (PAIN) of an asset for a
given trading period.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PriceActionIndicator(System.String,dotnetCHARTING.Series)">
            <summary>Evaluates the Price Action Indicator (PAIN) of an asset for a
given trading period.</summary>
            <remarks>    Evaluation
    The PAIN indicator is evaluated by the following
    formula:
    PAIN = ((Close-Open)+(Close-High)+(Close-Low))/2
    where:
    
        (Close-Open) defines Intra-Day Momentum
        (Close-Low) defines Late Selling Pressure
        (LSP)
        (Close-High) defines Late Buying Pressure
        (LBP)
    Close is the period closing price, Open is
    the period opening price, High is the highest traded
    price during the period and Low is the lowest traded
    price during the period. 
    Interpretation
    When the close is near the low, the assets's price is
    under selling pressure. If the close is near the high the
    asset's price is price is under buying pressure</remarks>
            <returns>A series where the first element is the PAIN of the asset on
the most recent period considered, the second term is the PAIN on
the period before that and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series where the first element is the traded
price on the most recent period, the second element is the traded
price of the previous periods and so on, for the asset under
consideration.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PriceActionIndicator(dotnetCHARTING.Series)">
            <summary>Evaluates the Price Action Indicator (PAIN) of an asset for a
given trading period.</summary>
            <remarks>    Evaluation
    The PAIN indicator is evaluated by the following
    formula:
    PAIN = ((Close-Open)+(Close-High)+(Close-Low))/2
    where:
    
        (Close-Open) defines Intra-Day Momentum
        (Close-Low) defines Late Selling Pressure
        (LSP)
        (Close-High) defines Late Buying Pressure
        (LBP)
    Close is the period closing price, Open is
    the period opening price, High is the highest traded
    price during the period and Low is the lowest traded
    price during the period. 
    Interpretation
    When the close is near the low, the assets's price is
    under selling pressure. If the close is near the high the
    asset's price is price is under buying pressure</remarks>
            <returns>A series where the first element is the PAIN of the asset on
the most recent period considered, the second term is the PAIN on
the period before that and so on.</returns>
            <param name="s">A financial series, where the first element is the traded
price on the most recent period, the second element is the traded
price of the previous periods and so on, for the asset under
consideration.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.PriceActionIndicator(dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Price Action Indicator (PAIN) of an asset for a
given trading period.</summary>
            <remarks>    Evaluation
    The PAIN indicator is evaluated by the following
    formula:
    PAIN = ((Close-Open)+(Close-High)+(Close-Low))/2
    where:
    
        (Close-Open) defines Intra-Day Momentum
        (Close-Low) defines Late Selling Pressure
        (LSP)
        (Close-High) defines Late Buying Pressure
        (LBP)
    Close is the period closing price, Open is
    the period opening price, High is the highest traded
    price during the period and Low is the lowest traded
    price during the period. 
    Interpretation
    When the close is near the low, the assets's price is
    under selling pressure. If the close is near the high the
    asset's price is price is under buying pressure</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Range">
            <summary>Calculates the range of the series's elements values.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Range(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the range of the series's elements values.</summary>
            <remarks>The range is the difference of a discrete data set is the
difference between the largest and smallest members of the data set
considered.</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Range(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the range of the series's elements values.</summary>
            <remarks>The range is the difference of a discrete data set is the
difference between the largest and smallest members of the data set
considered.</remarks>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Range(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the range of the series's elements values.</summary>
            <remarks>The range is the difference of a discrete data set is the
difference between the largest and smallest members of the data set
considered.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Range(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the range of the series's elements values.</summary>
            <remarks>The range is the difference of a discrete data set is the
difference between the largest and smallest members of the data set
considered.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.RateOfChange">
            <summary>Calculate the n-day rate of change (ROC) for all periods for
which there is sufficient data.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.RateOfChange(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Calculate the n-day rate of change (ROC) for all periods for
which there is sufficient data.</summary>
            <remarks>    The (n-day) rate of change (ROC) is just the last closing price
    divided by the closing price n-days ago. 
    As with the case with the momentum indicator the rate of
    change (ROC) indicator on extended values and/or turning points
    indicates oversold or over brought conditions
    (respectively).</remarks>
            <returns>A series where the first term is the rate of change for the
most recent period, the second term is the rate of change for the
previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
            <param name="numberDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.RateOfChange(dotnetCHARTING.Series,System.Int32)">
            <summary>Calculate the n-day rate of change (ROC) for all periods for
which there is sufficient data.</summary>
            <remarks>    The (n-day) rate of change (ROC) is just the last closing price
    divided by the closing price n-days ago. 
    As with the case with the momentum indicator the rate of
    change (ROC) indicator on extended values and/or turning points
    indicates oversold or over brought conditions
    (respectively).</remarks>
            <returns>A series where the first term is the rate of change for the
most recent period, the second term is the rate of change for the
previous period and so on.</returns>
            <param name="s">An series where the first element is the closing price in the
last trading period, the second term is the closing price in the
previous trading period and so on.</param>
            <param name="numberDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.RateOfChange(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Calculate the n-day rate of change (ROC) for all periods for
which there is sufficient data.</summary>
            <remarks>    The (n-day) rate of change (ROC) is just the last closing price
    divided by the closing price n-days ago. 
    As with the case with the momentum indicator the rate of
    change (ROC) indicator on extended values and/or turning points
    indicates oversold or over brought conditions
    (respectively).</remarks>
            <returns>A series where the first term is the rate of change for the
most recent period, the second term is the rate of change for the
previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="numberDays">The number of days before to which the closing price is
compared.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.RelativeStrengthIndex">
            <summary>Implements the Relative Strength Indicator (RSI), developed
by J. Welles Wilder in 1978; which measures the relative internal
strength of a market. Please note that this indicator is not
measured against another market or index. RSI measures the relative
changes between higher and lower closing prices.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.RelativeStrengthIndex(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Implements the Relative Strength Indicator (RSI), developed
by J. Welles Wilder in 1978; which measures the relative internal
strength of a market. Please note that this indicator is not
measured against another market or index. RSI measures the relative
changes between higher and lower closing prices.</summary>
            <remarks>    Evaluation
    The RSI indicator is calculated by the following
    formula:
    
    RSI = 100 - 100/(1+RS),
    
    where:
    
    RS = (Average of noOfPeriods days up closes) / (Average of
    noOfPeriods days' down closes),
    Interpretation
    An RSI above 70 is considered overbought and below 30 is
    considered oversold.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first element is the high in the last
trading period, the second term is the high in the previous period
and so on.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.RelativeStrengthIndex(dotnetCHARTING.Series,System.Int32)">
            <summary>Implements the Relative Strength Indicator (RSI), developed
by J. Welles Wilder in 1978; which measures the relative internal
strength of a market. Please note that this indicator is not
measured against another market or index. RSI measures the relative
changes between higher and lower closing prices.</summary>
            <remarks>    Evaluation
    The RSI indicator is calculated by the following
    formula:
    
    RSI = 100 - 100/(1+RS),
    
    where:
    
    RS = (Average of noOfPeriods days up closes) / (Average of
    noOfPeriods days' down closes),
    Interpretation
    An RSI above 70 is considered overbought and below 30 is
    considered oversold.</remarks>
            <param name="s">An series where the first element is the high in the last
trading period, the second term is the high in the previous period
and so on.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.RelativeStrengthIndex(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Implements the Relative Strength Indicator (RSI), developed
by J. Welles Wilder in 1978; which measures the relative internal
strength of a market. Please note that this indicator is not
measured against another market or index. RSI measures the relative
changes between higher and lower closing prices.</summary>
            <remarks>    Evaluation
    The RSI indicator is calculated by the following
    formula:
    
    RSI = 100 - 100/(1+RS),
    
    where:
    
    RS = (Average of noOfPeriods days up closes) / (Average of
    noOfPeriods days' down closes),
    Interpretation
    An RSI above 70 is considered overbought and below 30 is
    considered oversold.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfPeriod">An integer which represents the length of the period over
which the indicator will be iteratively evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage">
            <summary>Calculates the arithmetic(or simple) Moving Average(MA) of a
given period for all possible data points (i.e. periods) for which
there is sufficient historical data provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Calculates the arithmetic(or simple) Moving Average(MA) of a
given period for all possible data points (i.e. periods) for which
there is sufficient historical data provided.</summary>
            <remarks>    Illustration
    If we are considering a traded asset and the periods
    considered are days then by passing an array containing the
    closing daily prices of a given asset, and by choosing to use
    the 5-day moving average (i.e. passing a length of the MA of
    5), then this method will evaluate the Moving Average
    (MA) for all days for which the closing price on that day and
    the four previous days is known.</remarks>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series where the first term is the most recent historical
price, the second term is the previous historical price and so
on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average for each of the periods on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Calculates the arithmetic(or simple) Moving Average(MA) of a
given period for all possible data points (i.e. periods) for which
there is sufficient historical data provided.</summary>
            <remarks>    Illustration
    If we are considering a traded asset and the periods
    considered are days then by passing an array containing the
    closing daily prices of a given asset, and by choosing to use
    the 5-day moving average (i.e. passing a length of the MA of
    5), then this method will evaluate the Moving Average
    (MA) for all days for which the closing price on that day and
    the four previous days is known.</remarks>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="s">A series where the first term is the most recent historical
price, the second term is the previous historical price and so
on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average for each of the periods on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Calculates the arithmetic(or simple) Moving Average(MA) of a
given period for all possible data points (i.e. periods) for which
there is sufficient historical data provided.</summary>
            <remarks>    Illustration
    If we are considering a traded asset and the periods
    considered are days then by passing an array containing the
    closing daily prices of a given asset, and by choosing to use
    the 5-day moving average (i.e. passing a length of the MA of
    5), then this method will evaluate the Moving Average
    (MA) for all days for which the closing price on that day and
    the four previous days is known.</remarks>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average for each of the periods on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Skewness">
            <summary>Calculates the skewness of the currently registered data
set.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Skewness(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the skewness of the currently registered data
set.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Skewness(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the skewness of the currently registered data
set.</summary>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Skewness(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the skewness of the currently registered data
set.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Skewness(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the skewness of the currently registered data
set.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.StandardDeviation">
            <summary>Calculates the sample standard variance of the series's
elements values.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.StandardDeviation(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the sample standard variance of the series's
elements values.</summary>
            <remarks>    Remark: The units of the Sample Standard Deviation
    will correspond to the units used by the observations (i.e. the
    units of the members of the data set). In many instances it is
    convenient that the units used for the observations corresponds
    to the units used for a measure of the sets deviations. This
    differs from the ElementValue) in which the deviation is
    measured in units which are the squares of the units of the
    observations.

ԇြįŸŸs
    the period opening price, High is the highest traded
    price during the period and Low is the lowest traded
    price during the period. 
    Interpretation
    When the close is near the low, the assets's price is
    under selling pressure. If the close is near the high the
    asset's price is price is under buying pressure</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.StandardDeviation(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the sample standard variance of the series's
elements values.</summary>
            <remarks>    Remark: The units of the Sample Standard Deviation
    will correspond to the units used by the observations (i.e. the
    units of the members of the data set). In many instances it is
    convenient that the units used for the observations corresponds
    to the units used for a measure of the sets deviations. This
    differs from the ElementValue) in which the deviation is
    measured in units which are the squares of the units of the
    observations.

ԇြįŸŸs
    the period opening price, High is the highest traded
    price during the period and Low is the lowest traded
    price during the period. 
    Interpretation
    When the close is near the low, the assets's price is
    under selling pressure. If the close is near the high the
    asset's price is price is under buying pressure</remarks>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.StandardDeviation(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the sample standard variance of the series's
elements values.</summary>
            <remarks>    Remark: The units of the Sample Standard Deviation
    will correspond to the units used by the observations (i.e. the
    units of the members of the data set). In many instances it is
    convenient that the units used for the observations corresponds
    to the units used for a measure of the sets deviations. This
    differs from the ElementValue) in which the deviation is
    measured in units which are the squares of the units of the
    observations.

ԇြįŸŸs
    the period opening price, High is the highest traded
    price during the period and Low is the lowest traded
    price during the period. 
    Interpretation
    When the close is near the low, the assets's price is
    under selling pressure. If the close is near the high the
    asset's price is price is under buying pressure</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the FinancialEngine time series) which will
be considered within this indicator evaluation. In particular, if
you wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.StandardDeviation(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the sample standard variance of the series's
elements values.</summary>
            <remarks>    Remark: The units of the Sample Standard Deviation
    will correspond to the units used by the observations (i.e. the
    units of the members of the data set). In many instances it is
    convenient that the units used for the observations corresponds
    to the units used for a measure of the sets deviations. This
    differs from the ElementValue) in which the deviation is
    measured in units which are the squares of the units of the
    observations.

ԇြįŸŸs
    the period opening price, High is the highest traded
    price during the period and Low is the lowest traded
    price during the period. 
    Interpretation
    When the close is near the low, the assets's price is
    under selling pressure. If the close is near the high the
    asset's price is price is under buying pressure</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TriangularMovingAverage">
            <summary>Evaluates the x-period Triangular Moving Average(TMA)
where x corresponds to the length of the time series array
given as a parameter, for all periods for which sufficient data is
provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TriangularMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Evaluates the x-period Triangular Moving Average(TMA)
where x corresponds to the length of the time series array
given as a parameter, for all periods for which sufficient data is
provided.</summary>
            <remarks>    Further Explanation
    The TMA is a special case of the
    WeightedMovingAverage, where the term triangular is
    motivated by the way in which the weights are chosen for the
    elements of the time series array. For example, for a
    7-period TMA, that is when the time series has length
    7, the corresponding weights of the time series elements
    are: 1, 2, 3, 4, 3,
    2, 1. In the case of the 6 period TMA the
    weights would be 1, 2, 3, 3,
    2, 1.</remarks>
            <returns>A series where the first term is the value of the MA
corresponding to the most recent period, the second term is the
value of the MA on the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first term corresponds to value of the
market variable (for example, closing price) in the last period,
the second term corresponds to the value of the market variable in
the previous period and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TriangularMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Evaluates the x-period Triangular Moving Average(TMA)
where x corresponds to the length of the time series array
given as a parameter, for all periods for which sufficient data is
provided.</summary>
            <remarks>    Further Explanation
    The TMA is a special case of the
    WeightedMovingAverage, where the term triangular is
    motivated by the way in which the weights are chosen for the
    elements of the time series array. For example, for a
    7-period TMA, that is when the time series has length
    7, the corresponding weights of the time series elements
    are: 1, 2, 3, 4, 3,
    2, 1. In the case of the 6 period TMA the
    weights would be 1, 2, 3, 3,
    2, 1.</remarks>
            <returns>A series where the first term is the value of the MA
corresponding to the most recent period, the second term is the
value of the MA on the previous period and so on.</returns>
            <param name="s">An series where the first term corresponds to value of the
market variable (for example, closing price) in the last period,
the second term corresponds to the value of the market variable in
the previous period and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the FinancialEngine time series) which will
be considered within this indicator evaluation. In particular, if
you wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TriangularMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Evaluates the x-period Triangular Moving Average(TMA)
where x corresponds to the length of the time series array
given as a parameter, for all periods for which sufficient data is
provided.</summary>
            <remarks>    Further Explanation
    The TMA is a special case of the
    WeightedMovingAverage, where the term triangular is
    motivated by the way in which the weights are chosen for the
    elements of the time series array. For example, for a
    7-period TMA, that is when the time series has length
    7, the corresponding weights of the time series elements
    are: 1, 2, 3, 4, 3,
    2, 1. In the case of the 6 period TMA the
    weights would be 1, 2, 3, 3,
    2, 1.</remarks>
            <returns>A series where the first term is the value of the MA
corresponding to the most recent period, the second term is the
value of the MA on the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the FinancialEngine time series) which will
be considered within this indicator evaluation. In particular, if
you wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TrueRange">
            <summary>True Range (TR) of a traded asset over a number of
periods.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TrueRange(System.String,dotnetCHARTING.Series)">
            <summary>True Range (TR) of a traded asset over a number of
periods.</summary>
            <returns>An array where the k-term corresponds to the True Range (TR)
on the k-th previous period.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series where the first element contain the prices
of last trading period, the second element represents the prices of
the previous periods and so on. Please note that in order to
calculate this indicator the elements of the financial series must
contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TrueRange(dotnetCHARTING.Series)">
            <summary>True Range (TR) of a traded asset over a number of
periods.</summary>
            <returns>An array where the k-term corresponds to the True Range (TR)
on the k-th previous period.</returns>
            <param name="s">A financial series where the first element contain the prices
of last trading period, the second element represents the prices of
the previous periods and so on. Please note that in order to
calculate this indicator the elements of the financial series must
contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TrueRange(dotnetCHARTING.SeriesCollection)">
            <summary>True Range (TR) of a traded asset over a number of
periods.</summary>
            <returns>A collections of series. Each series has the k-th term
corresponds to the True Range (TR) on the k-th previous
period.</returns>
            <param name="sc">A collection of financial series objects. For example, to
evaluate this indicator for two series you will need to pass a
series collection containing this two series.Please note that in
order to calculate this indicator the elements of the financial
series must contain High, Low and Close values.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TypicalPrice">
            <summary>Evaluates the Typical Price of an asset within a given
trading period.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TypicalPrice(System.String,dotnetCHARTING.Series)">
            <summary>Evaluates the Typical Price of an asset within a given
trading period.</summary>
            <remarks>    The typical price is just the arithmetic average of the high,
    low and closing price for the trading period considered.
    Generally speaking the period considered will be a single
    trading day, however the typical price is equally applicable to
    other time spans and hence the period considered could be (for
    example) a month or year. 
    Applications
    The Typical Price is often used in place of the closing
    price in the development of trading systems in which either
    another intra-day system is used from the intra-period timing
    of trades, or when the trading party is given discretion on
    intra-period trading decisions.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">The financial series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TypicalPrice(dotnetCHARTING.Series)">
            <summary>Evaluates the Typical Price of an asset within a given
trading period.</summary>
            <remarks>    The typical price is just the arithmetic average of the high,
    low and closing price for the trading period considered.
    Generally speaking the period considered will be a single
    trading day, however the typical price is equally applicable to
    other time spans and hence the period considered could be (for
    example) a month or year. 
    Applications
    The Typical Price is often used in place of the closing
    price in the development of trading systems in which either
    another intra-day system is used from the intra-period timing
    of trades, or when the trading party is given discretion on
    intra-period trading decisions.</remarks>
            <param name="s">The financial series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.TypicalPrice(dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the Typical Price of an asset within a given
trading period.</summary>
            <remarks>    The typical price is just the arithmetic average of the high,
    low and closing price for the trading period considered.
    Generally speaking the period considered will be a single
    trading day, however the typical price is equally applicable to
    other time spans and hence the period considered could be (for
    example) a month or year. 
    Applications
    The Typical Price is often used in place of the closing
    price in the development of trading systems in which either
    another intra-day system is used from the intra-period timing
    of trades, or when the trading party is given discretion on
    intra-period trading decisions.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.UpperBollingerBands">
            <summary>Evaluates the position of the Upper Bollinger Band for a
given standard deviation level.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.UpperBollingerBands(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Evaluates the position of the Upper Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Higher Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first term correspond the latest periods
price and the previous element is the value of the element before
that and so on... The length of this series is equal to the number
of periods used in the evaluation of the standard deviation.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="standardDeviationLevel">The (positive) number of standard deviations which the lower
band in shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.UpperBollingerBands(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Evaluates the position of the Upper Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Higher Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="s">An series where the first term correspond the latest periods
price and the previous element is the value of the element before
that and so on... The length of this series is equal to the number
of periods used in the evaluation of the standard deviation.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="standardDeviationLevel">The (positive) number of standard deviations which the lower
band in shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.UpperBollingerBands(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double,System.Int32)">
            <summary>Evaluates the position of the Upper Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Higher Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="standardDeviationLevel">The (positive) number of standard deviations which the lower
band in shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Variance">
            <summary>Calculates the sample variance of the series's elements
values.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Variance(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the sample variance of the series's elements
values.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Variance(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Calculates the sample variance of the series's elements
values.</summary>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Variance(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the sample variance of the series's elements
values.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.Variance(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Calculates the sample variance of the series's elements
values.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage">
            <summary>Evaluate the Weighted Moving Average(WMA) where the weights
associated to all the elements of the historical values are given
and the WMA is evaluated for all periods for which there is
sufficient historical data.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluate the Weighted Moving Average(WMA) where the weights
associated to all the elements of the historical values are given
and the WMA is evaluated for all periods for which there is
sufficient historical data.</summary>
            <remarks>    That is, the weights are fixed for all given historical values
    and the window of length lengthOfMA over which the GMA
    is evaluated is shifted along the series. 
    Application
    Generally speaking the WMA where the weights are all set
    and the window over which GMA is evaluated is shifted is used
    when you wish to give emphasis to particular dates.
    Note: The length of the weights array must
    equal or be greater than the length of the
    historicalPrices series. If it's greater than we ignore
    the supplementary values.</remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series of historical values, where the first element
corresponds to the market on the last period, the second term to
the value on previous period and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="weightSeries">Array of doubles which assigns weights to the k-th previous
historical values for the given period on which the moving average
is being evaluated. Here k is just the length of the weights array
given.</param>
            <param name="lengthOfMA">The number of periods over which the weighted moving average
is evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)">
            <summary>Evaluate the Weighted Moving Average(WMA) where the weights
associated to all the elements of the historical values are given
and the WMA is evaluated for all periods for which there is
sufficient historical data.</summary>
            <remarks>    That is, the weights are fixed for all given historical values
    and the window of length lengthOfMA over which the GMA
    is evaluated is shifted along the series. 
    Application
    Generally speaking the WMA where the weights are all set
    and the window over which GMA is evaluated is shifted is used
    when you wish to give emphasis to particular dates.
    Note: The length of the weights array must
    equal or be greater than the length of the
    historicalPrices series. If it's greater than we ignore
    the supplementary values.</remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="s">An series of historical values, where the first element
corresponds to the market on the last period, the second term to
the value on previous period and so on.</param>
            <param name="weightSeries">A series which assigns weights to the k-th previous
historical values for the given period on which the moving average
is being evaluated. Here k is just the length of the weights array
given.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="lengthOfMA">The number of periods over which the weighted moving average
is evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluate the Weighted Moving Average(WMA) where the weights
associated to all the elements of the historical values are given
and the WMA is evaluated for all periods for which there is
sufficient historical data.</summary>
            <remarks>    That is, the weights are fixed for all given historical values
    and the window of length lengthOfMA over which the GMA
    is evaluated is shifted along the series. 
    Application
    Generally speaking the WMA where the weights are all set
    and the window over which GMA is evaluated is shifted is used
    when you wish to give emphasis to particular dates.
    Note: The length of the weights array must
    equal or be greater than the length of the
    historicalPrices series. If it's greater than we ignore
    the supplementary values.</remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="weightSeries">A series which assigns weights to the k-th previous
historical values for the given period on which the moving average
is being evaluated. Here k is just the length of the weights array
given.</param>
            <param name="lengthOfMA">The number of periods over which the weighted moving average
is evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double[])">
            <summary>Here we evaluate the Weighted Moving Average(WMA) where for
each period for which the WMA is evaluated the historical terms are
weighted in accordance with the same set of weights.</summary>
            <remarks>    I.e. The weights shift with the window of the historical
    values. 
    Application
    
        Generally speaking the WMA is used in order to allow more
        weight to be assigned to more resent price dynamics. Here
        the length of the weights array is used as the length of
        the period over which the moving average is calculated. If
        you wish to control the number of periods used within the
        moving average then we refer you to 
        

(historicalPrices,
            weights, lengthOfMovingAverage)

        .
    </remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series of historical values, where the first element
corresponds to the market on the last period, the second term to
the value on previous period and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="weights">Array of doubles which assigns weights to the k-th previous
historical values for the given period on which the moving average
is being evaluated. Here k is just the length of the weights array
given.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double[])">
            <summary>Here we evaluate the Weighted Moving Average(WMA) where for
each period for which the WMA is evaluated the historical terms are
weighted in accordance with the same set of weights.</summary>
            <remarks>    I.e. The weights shift with the window of the historical
    values. 
    Application
    Generally speaking the WMA is used in order to allow more
    weight to be assigned to more resent price dynamics. Here the
    length of the weights array is used as the length of the period
    over which the moving average is calculated. If you wish to
    control the number of periods used within the moving average
    then we refer you to FinancialWeightedMovingAverage</remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="s">An series of historical values, where the first element
corresponds to the market on the last period, the second term to
the value on previous period and so on.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="weights">Array of doubles which assigns weights to the k-th previous
historical values for the given period on which the moving average
is being evaluated. Here k is just the length of the weights array
given.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double[])">
            <summary>Here we evaluate the Weighted Moving Average(WMA) where for
each period for which the WMA is evaluated the historical terms are
weighted in accordance with the same set of weights.</summary>
            <remarks>    I.e. The weights shift with the window of the historical
    values. 
    Application
    Generally speaking the WMA is used in order to allow more
    weight to be assigned to more resent price dynamics. Here the
    length of the weights array is used as the length of the period
    over which the moving average is calculated. If you wish to
    control the number of periods used within the moving average
    then we refer you to Double[])</remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
            <param name="weights">Array of doubles which assigns weights to the k-th previous
historical values for the given period on which the moving average
is being evaluated. Here k is just the length of the weights array
given.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ZScore">
            <summary>Evaluates the z-score (often referred to as the standardized
value) of an element series's element values.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ZScore(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Evaluates the z-score (often referred to as the standardized
value) of an element series's element values.</summary>
            <remarks>The z-score denotes the number of standard deviations of a
given element of the data set is from the mean of the data
set.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ZScore(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">
            <summary>Evaluates the z-score (often referred to as the standardized
value) of an element series's element values.</summary>
            <remarks>The z-score denotes the number of standard deviations of a
given element of the data set is from the mean of the data
set.</remarks>
            <param name="s">A financial series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine.ZScore(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">
            <summary>Evaluates the z-score (often referred to as the standardized
value) of an element series's element values.</summary>
            <remarks>The z-score denotes the number of standard deviations of a
given element of the data set is from the mean of the data
set.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="elementValue">Specifies the particular element value (for example High,
Low, Close or Open of the financial time series) which will be
considered within this indicator evaluation. In particular, if you
wish to use the element value high then you should pass the
parameter High. In a similarly fashion if you wish to use the low,
close or open, then you should pass the parameter Low, Close, Open,
respectively.</param>
        </member>
        <member name="T:dotnetCHARTING.FinancialEngine+Options">
            <summary>Defines a set of static options used with FinancialEngine
calculations.</summary>
        </member>
        <member name="M:dotnetCHARTING.FinancialEngine+Options.Reset">
            <summary>Resets the options to default settings.</summary>
        </member>
        <member name="P:dotnetCHARTING.FinancialEngine+Options.MatchColors">
            <summary>Gets or sets a value that indicates whether calculated
elements will use the same colors that are assigned to original
series. Both, the original and derived data objects must be placed
on the same chart to enable this feature.</summary>
        </member>
        <member name="P:dotnetCHARTING.FinancialEngine+Options.PopulateSubValues">
            <summary>Gets or sets a static value that determines whether elements
derived from series will contain values of the original elements as
dotnetCHARTING.SubValue objects.</summary>
        </member>
        <member name="T:dotnetCHARTING.ForecastEngine">
            <summary>Provides a set of methods that find the best fit curve of a
data set.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLine">
            <summary>Given a set of data points x[0..ndata-1],y[0..ndata-1] with
individual standard deviations sig[0..ndata-1], fit them to a
straight line y = a + bx by minimizing ¥ö2. Returned are a,b and
their respective probable uncertainties siga and sigb, the
chi-square chi2, and the goodness-of-fit probability q (that the
fit would have ¥ö2 this large or larger). If mwt=0 on input, then
the standard deviations are assumed to be unavailable: q is
returned as 1.0 and the normalization of chi2 is to unit standard
deviation on all points.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLine(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)">
            <summary>Given a set of data points x[0..ndata-1],y[0..ndata-1] with
individual standard deviations sig[0..ndata-1], fit them to a
straight line y = a + bx by minimizing ¥ö2. Returned are a,b and
their respective probable uncertainties siga and sigb, the
chi-square chi2, and the goodness-of-fit probability q (that the
fit would have ¥ö2 this large or larger). If mwt=0 on input, then
the standard deviations are assumed to be unavailable: q is
returned as 1.0 and the normalization of chi2 is to unit standard
deviation on all points.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="deviations">A series wich contains the standard deviations of the given
data point.</param>
            <param name="mwt">When this parameter is 0 the standard deviation will not be
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLine(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)">
            <summary>Given a set of data points x[0..ndata-1],y[0..ndata-1] with
individual standard deviations sig[0..ndata-1], fit them to a
straight line y = a + bx by minimizing ¥ö2. Returned are a,b and
their respective probable uncertainties siga and sigb, the
chi-square chi2, and the goodness-of-fit probability q (that the
fit would have ¥ö2 this large or larger). If mwt=0 on input, then
the standard deviations are assumed to be unavailable: q is
returned as 1.0 and the normalization of chi2 is to unit standard
deviation on all points.</summary>
            <param name="s">A statistical series.</param>
            <param name="deviations">A series wich contains the standard deviations of the given
data point.</param>
            <param name="mwt">When this parameter is 0 the standard deviation will not be
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLine(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series,System.Int32)">
            <summary>Given a set of data points x[0..ndata-1],y[0..ndata-1] with
individual standard deviations sig[0..ndata-1], fit them to a
straight line y = a + bx by minimizing ¥ö2. Returned are a,b and
their respective probable uncertainties siga and sigb, the
chi-square chi2, and the goodness-of-fit probability q (that the
fit would have ¥ö2 this large or larger). If mwt=0 on input, then
the standard deviations are assumed to be unavailable: q is
returned as 1.0 and the normalization of chi2 is to unit standard
deviation on all points.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="deviations">A series wich contains the standard deviations of the given
data point.</param>
            <param name="mwt">When this parameter is 0 the standard deviation will not be
considered.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential">
            <summary>Find the best fit for the function f(x) = A * pow(e, B*x )
where B = b and A = exp( a).</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(System.String,dotnetCHARTING.Series)">
            <summary>Find the best fit for the function f(x) = A * pow(e, B*x )
where B = b and A = exp( a).</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(dotnetCHARTING.Series)">
            <summary>Find the best fit for the function f(x) = A * pow(e, B*x )
where B = b and A = exp( a).</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(dotnetCHARTING.SeriesCollection)">
            <summary>Find the best fit for the function f(x) = A * pow(e, B*x )
where B = b and A = exp( a).</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(System.String,dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)">
            <summary>Find the best fit for the function f(x) = A * pow(e, B*x )
where B = b and A = exp( a).</summary>
            <returns>A series where the k-th element of the array represents of
k-th point (i.e. { x_k, y_k }) of the total set over which the
fitted function is evaluated. The total set over which the fitted
function is evaluated consists of the `backward' points, original
data set points and the `forward' points.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)">
            <summary>Find the best fit for the function f(x) = A * pow(e, B*x )
where B = b and A = exp( a).</summary>
            <returns>A series where the k-th element of the array represents of
k-th point (i.e. { x_k, y_k }) of the total set over which the
fitted function is evaluated. The total set over which the fitted
function is evaluated consists of the `backward' points, original
data set points and the `forward' points.</returns>
            <param name="s">A statistical series.</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(dotnetCHARTING.SeriesCollection,System.Double,System.Int32,System.Int32)">
            <summary>Find the best fit for the function f(x) = A * pow(e, B*x )
where B = b and A = exp( a).</summary>
            <returns>A series where the k-th element of the array represents of
k-th point (i.e. { x_k, y_k }) of the total set over which the
fitted function is evaluated. The total set over which the fitted
function is evaluated consists of the `backward' points, original
data set points and the `forward' points.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic">
            <summary>Find the best fit for the function f(x) = a + b *
ln(x).</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(System.String,dotnetCHARTING.Series)">
            <summary>Find the best fit for the function f(x) = a + b *
ln(x).</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(dotnetCHARTING.Series)">
            <summary>Find the best fit for the function f(x) = a + b *
ln(x).</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(dotnetCHARTING.SeriesCollection)">
            <summary>Find the best fit for the function f(x) = a + b *
ln(x).</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(System.String,dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)">
            <summary>Find the best fit for the function f(x) = a + b *
ln(x).</summary>
            <returns>    A series where the k-th element of the array represents of k-th
    point (i.e. { x_k, y_k }) of the total set over which the
    fitted function is evaluated. The total set over which the
    fitted function is evaluated consists of the `backward' points,
    original data set points and the `forward' points. 
    Remark: This methods corresponds in functionality
    to the method of the same name within Microsoft Excel.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)">
            <summary>Find the best fit for the function f(x) = a + b *
ln(x).</summary>
            <returns>    A series where the k-th element of the array represents of k-th
    point (i.e. { x_k, y_k }) of the total set over which the
    fitted function is evaluated. The total set over which the
    fitted function is evaluated consists of the `backward' points,
    original data set points and the `forward' points. 
    Remark: This methods corresponds in functionality
    to the method of the same name within Microsoft Excel.</returns>
            <param name="s">A statistical series.</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(dotnetCHARTING.SeriesCollection,System.Double,System.Int32,System.Int32)">
            <summary>Find the best fit for the function f(x) = a + b *
ln(x).</summary>
            <returns>    A series where the k-th element of the array represents of k-th
    point (i.e. { x_k, y_k }) of the total set over which the
    fitted function is evaluated. The total set over which the
    fitted function is evaluated consists of the `backward' points,
    original data set points and the `forward' points. 
    Remark: This methods corresponds in functionality
    to the method of the same name within Microsoft Excel.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial">
            <summary>Fits a polynomial of a given degree to a data set in
accordance with the least squares approach and returned the values
of the fitted function over the same range of the x-coordinate as
the given data set.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Fits a polynomial of a given degree to a data set in
accordance with the least squares approach and returned the values
of the fitted function over the same range of the x-coordinate as
the given data set.</summary>
            <remarks>For example, if we fit a polynomial of degree 2, then we fit
the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
similarly if we fit a polynomial of degree 3, then we fit the cubic
polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="degree">The degree of the polynomial which is fitted to the data set
given (i.e. if degree is 2, then a quadratic is fitted).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(dotnetCHARTING.Series,System.Int32)">
            <summary>Fits a polynomial of a given degree to a data set in
accordance with the least squares approach and returned the values
of the fitted function over the same range of the x-coordinate as
the given data set.</summary>
            <remarks>For example, if we fit a polynomial of degree 2, then we fit
the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
similarly if we fit a polynomial of degree 3, then we fit the cubic
polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).</remarks>
            <param name="s">A statistical series.</param>
            <param name="degree">The degree of the polynomial which is fitted to the data set
given (i.e. if degree is 2, then a quadratic is fitted).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Fits a polynomial of a given degree to a data set in
accordance with the least squares approach and returned the values
of the fitted function over the same range of the x-coordinate as
the given data set.</summary>
            <remarks>For example, if we fit a polynomial of degree 2, then we fit
the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
similarly if we fit a polynomial of degree 3, then we fit the cubic
polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="degree">The degree of the polynomial which is fitted to the data set
given (i.e. if degree is 2, then a quadratic is fitted).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>Fits a polynomial of a given degree to a data set in
accordance with the least squares approach and returns the value of
the fitted function over an extended (i.e. above, below or both)
range of the x-coordinate values of the given data set.</summary>
            <remarks>    For example, if we fit a polynomial of degree 2, then we fit
    the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
    similarly if we fit a polynomial of degree 3, then we fit the
    cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
    
    Remark: The difference between this method and
    Int32), is that it allows the values of the fitted function to
    be evaluated over an extended range. That is, a range in the
    x-coordinate greater than the original given data set.
    Where the extended values are evaluated?
    The parameters step, forward,
    backward allows the position and number of additional
    points above and/or below the range of the values in the
    x-coordinate of the original data set to be given. The
    forward parameter specifies the number of the additional
    evaluation points of the fitted function which are greater than
    the values of the x-coordinates of the original data set.
    Similarly, the backward parameter specifies the number
    of the additional evaluation points of the fitted function
    which are lower than the values of the x-coordinates of the
    original data set. The step specifies the distance in
    the x-coordinate between each of the additional data points,
    where the first additional data point either above or below is
    exactly a distance of step from the points of the
    original data set which the highest and lowest values in the
    x-coordinate.
    For example, consider the data set x = 1, 2, 3;
    y = 1, 2, 3. Now if step = 1, forward = 2,
    and backward = 3, then this method when applied will
    return a two dimensional array. This two dimensional array will
    have the following structure: { { -2, f(-2) } { -1, f(-1) }
    { 0, f(0) }{ 1, 1 } { 2, 2 }{ 3, 3 } { 4, f(4) } { 5, f(5) }
    }, where f(-2), f(-1), f(0), f(4), f(5) correspond
    to the value of the fitted functions at the points x = -2,
    -1, 0, 4, 5, respectively.</remarks>
            <returns>    A series where the k-th element of the array represents of k-th
    point (i.e. { x_k, y_k }) of the total set over which the
    fitted function is evaluated. The total set over which the
    fitted function is evaluated consists of the `backward' points,
    original data set points and the `forward' points. 
    Remark: This methods corresponds in functionality
    to the method of the same name within Microsoft Excel.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="degree">The degree of the polynomial which is fitted to the data set
given (i.e. if degree is 2, then a quadratic is fitted).</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(dotnetCHARTING.Series,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>Fits a polynomial of a given degree to a data set in
accordance with the least squares approach and returns the value of
the fitted function over an extended (i.e. above, below or both)
range of the x-coordinate values of the given data set.</summary>
            <remarks>    For example, if we fit a polynomial of degree 2, then we fit
    the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
    similarly if we fit a polynomial of degree 3, then we fit the
    cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
    
    Remark: The difference between this method and
    Int32), is that it allows the values of the fitted function to
    be evaluated over an extended range. That is, a range in the
    x-coordinate greater than the original given data set.
    Where the extended values are evaluated?
    The parameters step, forward,
    backward allows the position and number of additional
    points above and/or below the range of the values in the
    x-coordinate of the original data set to be given. The
    forward parameter specifies the number of the additional
    evaluation points of the fitted function which are greater than
    the values of the x-coordinates of the original data set.
    Similarly, the backward parameter specifies the number
    of the additional evaluation points of the fitted function
    which are lower than the values of the x-coordinates of the
    original data set. The step specifies the distance in
    the x-coordinate between each of the additional data points,
    where the first additional data point either above or below is
    exactly a distance of step from the points of the
    original data set which the highest and lowest values in the
    x-coordinate.
    For example, consider the data set x = 1, 2, 3;
    y = 1, 2, 3. Now if step = 1, forward = 2,
    and backward = 3, then this method when applied will
    return a two dimensional array. This two dimensional array will
    have the following structure: { { -2, f(-2) } { -1, f(-1) }
    { 0, f(0) }{ 1, 1 } { 2, 2 }{ 3, 3 } { 4, f(4) } { 5, f(5) }
    }, where f(-2), f(-1), f(0), f(4), f(5) correspond
    to the value of the fitted functions at the points x = -2,
    -1, 0, 4, 5, respectively.</remarks>
            <returns>    A series where the k-th element of the array represents of k-th
    point (i.e. { x_k, y_k }) of the total set over which the
    fitted function is evaluated. The total set over which the
    fitted function is evaluated consists of the `backward' points,
    original data set points and the `forward' points. 
    Remark: This methods corresponds in functionality
    to the method of the same name within Microsoft Excel.</returns>
            <param name="s">A statistical series.</param>
            <param name="degree">The degree of the polynomial which is fitted to the data set
given (i.e. if degree is 2, then a quadratic is fitted).</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(dotnetCHARTING.SeriesCollection,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>Fits a polynomial of a given degree to a data set in
accordance with the least squares approach and returns the value of
the fitted function over an extended (i.e. above, below or both)
range of the x-coordinate values of the given data set.</summary>
            <remarks>    For example, if we fit a polynomial of degree 2, then we fit
    the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
    similarly if we fit a polynomial of degree 3, then we fit the
    cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
    
    Remark: The difference between this method and
    Int32), is that it allows the values of the fitted function to
    be evaluated over an extended range. That is, a range in the
    x-coordinate greater than the original given data set.
    Where the extended values are evaluated?
    The parameters step, forward,
    backward allows the position and number of additional
    points above and/or below the range of the values in the
    x-coordinate of the original data set to be given. The
    forward parameter specifies the number of the additional
    evaluation points of the fitted function which are greater than
    the values of the x-coordinates of the original data set.
    Similarly, the backward parameter specifies the number
    of the additional evaluation points of the fitted function
    which are lower than the values of the x-coordinates of the
    original data set. The step specifies the distance in
    the x-coordinate between each of the additional data points,
    where the first additional data point either above or below is
    exactly a distance of step from the points of the
    original data set which the highest and lowest values in the
    x-coordinate.
    For example, consider the data set x = 1, 2, 3;
    y = 1, 2, 3. Now if step = 1, forward = 2,
    and backward = 3, then this method when applied will
    return a two dimensional array. This two dimensional array will
    have the following structure: { { -2, f(-2) } { -1, f(-1) }
    { 0, f(0) }{ 1, 1 } { 2, 2 }{ 3, 3 } { 4, f(4) } { 5, f(5) }
    }, where f(-2), f(-1), f(0), f(4), f(5) correspond
    to the value of the fitted functions at the points x = -2,
    -1, 0, 4, 5, respectively.</remarks>
            <returns>    A series where the k-th element of the array represents of k-th
    point (i.e. { x_k, y_k }) of the total set over which the
    fitted function is evaluated. The total set over which the
    fitted function is evaluated consists of the `backward' points,
    original data set points and the `forward' points. 
    Remark: This methods corresponds in functionality
    to the method of the same name within Microsoft Excel.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="degree">The degree of the polynomial which is fitted to the data set
given (i.e. if degree is 2, then a quadratic is fitted).</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32,System.DateTime,System.DateTime)">
            <summary>Fits a polynomial of a given degree to a data set in
accordance with the least squares approach and returns the value of
the fitted function over an extended (i.e. above, below or both)
range of the x-coordinate values of the given data set.</summary>
            <remarks>    For example, if we fit a polynomial of degree 2, then we fit
    the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
    similarly if we fit a polynomial of degree 3, then we fit the
    cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
    
    Remark: The difference between this method and
    Int32), is that it allows the values of the fitted function to
    be evaluated over an extended range. That is, a range in the
    x-coordinate greater than the original given data set.
    Where the extended values are evaluated?
    The parameters step, forward,
    backward allows the position and number of additional
    points above and/or below the range of the values in the
    x-coordinate of the original data set to be given. The
    forward parameter specifies the number of the additional
    evaluation points of the fitted function which are greater than
    the values of the x-coordinates of the original data set.
    Similarly, the backward parameter specifies the number
    of the additional evaluation points of the fitted function
    which are lower than the values of the x-coordinates of the
    original data set. The step specifies the distance in
    the x-coordinate between each of the additional data points,
    where the first additional data point either above or below is
    exactly a distance of step from the points of the
    original data set which the highest and lowest values in the
    x-coordinate.
    For example, consider the data set x = 1, 2, 3;
    y = 1, 2, 3. Now if step = 1, forward = 2,
    and backward = 3, then this method when applied will
    return a two dimensional array. This two dimensional array will
    have the following structure: { { -2, f(-2) } { -1, f(-1) }
    { 0, f(0) }{ 1, 1 } { 2, 2 }{ 3, 3 } { 4, f(4) } { 5, f(5) }
    }, where f(-2), f(-1), f(0), f(4), f(5) correspond
    to the value of the fitted functions at the points x = -2,
    -1, 0, 4, 5, respectively.</remarks>
            <returns>    A series where the k-th element of the array represents of k-th
    point (i.e. { x_k, y_k }) of the total set over which the
    fitted function is evaluated. The total set over which the
    fitted function is evaluated consists of the `backward' points,
    original data set points and the `forward' points. 
    Remark: This methods corresponds in functionality
    to the method of the same name within Microsoft Excel.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="degree">The degree of the polynomial which is fitted to the data set
given (i.e. if degree is 2, then a quadratic is fitted).</param>
            <param name="startDate">The start date of the trend line</param>
            <param name="endDate">The end date of the trend line</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(dotnetCHARTING.Series,System.Int32,System.DateTime,System.DateTime)">
            <summary>Fits a polynomial of a given degree to a data set in
accordance with the least squares approach and returns the value of
the fitted function over an extended (i.e. above, below or both)
range of the x-coordinate values of the given data set.</summary>
            <remarks>    For example, if we fit a polynomial of degree 2, then we fit
    the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
    similarly if we fit a polynomial of degree 3, then we fit the
    cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
    
    Remark: The difference between this method and
    Int32), is that it allows the values of the fitted function to
    be evaluated over an extended range. That is, a range in the
    x-coordinate greater than the original given data set.
    Where the extended values are evaluated?
    The parameters step, forward,
    backward allows the position and number of additional
    points above and/or below the range of the values in the
    x-coordinate of the original data set to be given. The
    forward parameter specifies the number of the additional
    evaluation points of the fitted function which are greater than
    the values of the x-coordinates of the original data set.
    Similarly, the backward parameter specifies the number
    of the additional evaluation points of the fitted function
    which are lower than the values of the x-coordinates of the
    original data set. The step specifies the distance in
    the x-coordinate between each of the additional data points,
    where the first additional data point either above or below is
    exactly a distance of step from the points of the
    original data set which the highest and lowest values in the
    x-coordinate.
    For example, consider the data set x = 1, 2, 3;
    y = 1, 2, 3. Now if step = 1, forward = 2,
    and backward = 3, then this method when applied will
    return a two dimensional array. This two dimensional array will
    have the following structure: { { -2, f(-2) } { -1, f(-1) }
    { 0, f(0) }{ 1, 1 } { 2, 2 }{ 3, 3 } { 4, f(4) } { 5, f(5) }
    }, where f(-2), f(-1), f(0), f(4), f(5) correspond
    to the value of the fitted functions at the points x = -2,
    -1, 0, 4, 5, respectively.</remarks>
            <returns>    A series where the k-th element of the array represents of k-th
    point (i.e. { x_k, y_k }) of the total set over which the
    fitted function is evaluated. The total set over which the
    fitted function is evaluated consists of the `backward' points,
    original data set points and the `forward' points. 
    Remark: This methods corresponds in functionality
    to the method of the same name within Microsoft Excel.</returns>
            <param name="s">A statistical series.</param>
            <param name="degree">The degree of the polynomial which is fitted to the data set
given (i.e. if degree is 2, then a quadratic is fitted).</param>
            <param name="startDate">The start date of the trend line</param>
            <param name="endDate">The end date of the trend line</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(dotnetCHARTING.SeriesCollection,System.Int32,System.DateTime,System.DateTime)">
            <summary>Fits a polynomial of a given degree to a data set in
accordance with the least squares approach and returns the value of
the fitted function over an extended (i.e. above, below or both)
range of the x-coordinate values of the given data set.</summary>
            <remarks>    For example, if we fit a polynomial of degree 2, then we fit
    the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
    similarly if we fit a polynomial of degree 3, then we fit the
    cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
    
    Remark: The difference between this method and
    Int32), is that it allows the values of the fitted function to
    be evaluated over an extended range. That is, a range in the
    x-coordinate greater than the original given data set.
    Where the extended values are evaluated?
    The parameters step, forward,
    backward allows the position and number of additional
    points above and/or below the range of the values in the
    x-coordinate of the original data set to be given. The
    forward parameter specifies the number of the additional
    evaluation points of the fitted function which are greater than
    the values of the x-coordinates of the original data set.
    Similarly, the backward parameter specifies the number
    of the additional evaluation points of the fitted function
    which are lower than the values of the x-coordinates of the
    original data set. The step specifies the distance in
    the x-coordinate between each of the additional data points,
    where the first additional data point either above or below is
    exactly a distance of step from the points of the
    original data set which the highest and lowest values in the
    x-coordinate.
    For example, consider the data set x = 1, 2, 3;
    y = 1, 2, 3. Now if step = 1, forward = 2,
    and backward = 3, then this method when applied will
    return a two dimensional array. This two dimensional array will
    have the following structure: { { -2, f(-2) } { -1, f(-1) }
    { 0, f(0) }{ 1, 1 } { 2, 2 }{ 3, 3 } { 4, f(4) } { 5, f(5) }
    }, where f(-2), f(-1), f(0), f(4), f(5) correspond
    to the value of the fitted functions at the points x = -2,
    -1, 0, 4, 5, respectively.</remarks>
            <returns>    A series where the k-th element of the array represents of k-th
    point (i.e. { x_k, y_k }) of the total set over which the
    fitted function is evaluated. The total set over which the
    fitted function is evaluated consists of the `backward' points,
    original data set points and the `forward' points. 
    Remark: This methods corresponds in functionality
    to the method of the same name within Microsoft Excel.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="degree">The degree of the polynomial which is fitted to the data set
given (i.e. if degree is 2, then a quadratic is fitted).</param>
            <param name="startDate">The start date of the trend line</param>
            <param name="endDate">The end date of the trend line</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower">
            <summary>Find the best fit for the function f(x) = A * pow (x, B )
where B = b and A = pow(e, a).</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(System.String,dotnetCHARTING.Series)">
            <summary>Find the best fit for the function f(x) = A * pow (x, B )
where B = b and A = pow(e, a).</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(dotnetCHARTING.Series)">
            <summary>Find the best fit for the function f(x) = A * pow (x, B )
where B = b and A = pow(e, a).</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(dotnetCHARTING.SeriesCollection)">
            <summary>Find the best fit for the function f(x) = A * pow (x, B )
where B = b and A = pow(e, a).</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(System.String,dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)">
            <summary>Find the best fit for the function f(x) = A * pow (x, B )
where B = b and A = pow(e, a).</summary>
            <returns>A series where the k-th element of the array represents of
k-th point (i.e. { x_k, y_k }) of the total set over which the
fitted function is evaluated. The total set over which the fitted
function is evaluated consists of the `backward' points, original
data set points and the `forward' points.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)">
            <summary>Find the best fit for the function f(x) = A * pow (x, B )
where B = b and A = pow(e, a).</summary>
            <returns>A series where the k-th element of the array represents of
k-th point (i.e. { x_k, y_k }) of the total set over which the
fitted function is evaluated. The total set over which the fitted
function is evaluated consists of the `backward' points, original
data set points and the `forward' points.</returns>
            <param name="s">A statistical series.</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(dotnetCHARTING.SeriesCollection,System.Double,System.Int32,System.Int32)">
            <summary>Find the best fit for the function f(x) = A * pow (x, B )
where B = b and A = pow(e, a).</summary>
            <returns>A series where the k-th element of the array represents of
k-th point (i.e. { x_k, y_k }) of the total set over which the
fitted function is evaluated. The total set over which the fitted
function is evaluated consists of the `backward' points, original
data set points and the `forward' points.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="step">The distance in the x-coordinate between two adjacent
extended points. Please note that this also corresponds to the
distance in the x-coordinate between the highest and lowest
original data point and the first (above or below) additional
evaluation point.</param>
            <param name="forward">The number of additional evaluation points which are
evaluated above the x-coordinates of the original given data
set.</param>
            <param name="backward">The number of additional evaluation points which are
evaluated below the x-coordinates of the original given data
set.</param>
        </member>
        <member name="T:dotnetCHARTING.ForecastEngine+Advanced">
            <summary>This class contains advanced methods for calculating the best
fitting curve of a data set. It allows the user to construct his
own function.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselI">
            <summary>Calcuates the modified Bessel function
Ix(x) for any real x and n ≥
2.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselI(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Calcuates the modified Bessel function
Ix(x) for any real x and n ≥
2.</summary>
            <remarks>In(x) ≅ (1/√2πx)exp(x)</remarks>
            <returns>Returns the modified Bessel function Ix(x)
for any real x and n ≥ 2.</returns>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselI(dotnetCHARTING.Series,System.Int32)">
            <summary>Calcuates the modified Bessel function
Ix(x) for any real x and n ≥
2.</summary>
            <remarks>In(x) ≅ (1/√2πx)exp(x)</remarks>
            <param name="s">A statistical series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselI(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Calcuates the modified Bessel function
Ix(x) for any real x and n ≥
2.</summary>
            <remarks>In(x) ≅ (1/√2πx)exp(x)</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselJ">
            <summary>Calcuates the modified Bessel function
Jx(x) for any real x and n ≥
2.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselJ(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Calcuates the modified Bessel function
Jx(x) for any real x and n ≥
2.</summary>
            <remarks>Jn(x) = √
(1/2πx)[Pn(8/x)cos(Xn) -
Qn(8/x)sin(Xn)] where P,Q are polynomials
and Xn ࣕ x - (2n+1)π/4.</remarks>
            <returns>Returns the modified Bessel function Ix(x)
for any real x and n ≥ 2.</returns>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselJ(dotnetCHARTING.Series,System.Int32)">
            <summary>Calcuates the modified Bessel function
Jx(x) for any real x and n ≥
2.</summary>
            <remarks>Jn(x) = √
(1/2πx)[Pn(8/x)cos(Xn) -
Qn(8/x)sin(Xn)]
 where P,Q are polynomials and Xn ࣕ x -
(2n+1)π/4.</remarks>
            <param name="s">A statistical series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselJ(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Calcuates the modified Bessel function
Jx(x) for any real x and n ≥
2.</summary>
            <remarks>Jn(x) = √
(1/2πx)[Pn(8/x)cos(Xn) -
Qn(8/x)sin(Xn)]
 where P,Q are polynomials and Xn ࣕ x -
(2n+1)π/4.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselK">
            <summary>Calcuates the modified Bessel function
Kx(x) for any real x and n ≥
2.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselK(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Calcuates the modified Bessel function
Kx(x) for any real x and n ≥
2.</summary>
            <remarks>Kn(x) ≅ (1/√2πx)exp(-x)</remarks>
            <returns>Returns the modified Bessel function Ix(x)
for any real x and n ≥ 2.</returns>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselK(dotnetCHARTING.Series,System.Int32)">
            <summary>Calcuates the modified Bessel function
Kx(x) for any real x and n ≥
2.</summary>
            <remarks>Kn(x) ≅ (1/√2πx)exp(-x)</remarks>
            <param name="s">A statistical series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselK(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Calcuates the modified Bessel function
Kx(x) for any real x and n ≥
2.</summary>
            <remarks>Kn(x) ≅ (1/√2πx)exp(-x)</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselY">
            <summary>    Calcuates the modified Bessel function 
    
Yn(x)
    for any real x and n ≥ 0.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselY(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>    Calcuates the modified Bessel function 
    
Yn(x)
    for any real x and n ≥ 0.</summary>
            <remarks>Yn(x) = √
(1/2πx)[Pn(8/x)cos(Xn) +
Qn(8/x)sin(Xn)] where P,Q are polynomials
and Xn ࣕ x - (2n+1)π/4.</remarks>
            <returns>Returns the modified Bessel function Ix(x)
for any real x and n ≥ 2.</returns>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselY(dotnetCHARTING.Series,System.Int32)">
            <summary>Calcuates the modified Bessel function
Yx(x) for any real x and n ≥
0.</summary>
            <remarks>    
Yn(x) = √ (1/2πx)[Pn(8/x)cos(Xn) + Qn(8/x)sin(Xn)]
    
     where P,Q are polynomials and Xn ࣕ x -
    (2n+1)π/4.</remarks>
            <param name="s">A statistical series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.BesselY(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Calcuates the modified Bessel function
Yx(x) for any real x and n ≥
0.</summary>
            <remarks>    
Yn(x) = √ (1/2πx)[Pn(8/x)cos(Xn) + Qn(8/x)sin(Xn)]
    
     where P,Q are polynomials and Xn ࣕ x -
    (2n+1)π/4.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="n">The grade of the function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.Beta">
            <summary>Calcuates the Beta function: B(z,w) = B(w,z) =
∫01
tz-1(1-t)w-1dt;.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.Beta(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series)">
            <summary>Calcuates the Beta function: B(z,w) = B(w,z) =
∫01
tz-1(1-t)w-1dt;.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="z">A series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.Beta(dotnetCHARTING.Series,dotnetCHARTING.Series)">
            <summary>Calcuates the Beta function: B(z,w) = B(w,z) =
∫01
tz-1(1-t)w-1dt;.</summary>
            <param name="s">A statistical series.</param>
            <param name="z">A series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.Beta(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series)">
            <summary>Calcuates the Beta function: B(z,w) = B(w,z) =
∫01
tz-1(1-t)w-1dt;.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="z">A series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.ComplementaryErrorFunction">
            <summary>Calcuates the complementary error function erfc(x).</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.ComplementaryErrorFunction(System.String,dotnetCHARTING.Series)">
            <summary>Calcuates the complementary error function erfc(x).</summary>
            <remarks>erfc(x) = 1- erf(x) =
2/√π∫x∞e-t2&gt;</remarks>
            <returns>Returns the complementary error function which is a special
case of incomplete gamma function.</returns>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.ComplementaryErrorFunction(dotnetCHARTING.Series)">
            <summary>Calcuates the complementary error function erfc(x).</summary>
            <remarks>erfc(x) = 1- erf(x) =
2/√π∫x∞e-t2&gt;</remarks>
            <returns>Returns the complementary error function which is a special
case of incomplete gamma function.</returns>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.ComplementaryErrorFunction(dotnetCHARTING.SeriesCollection)">
            <summary>Calcuates the complementary error function erfc(x).</summary>
            <remarks>erfc(x) = 1- erf(x) =
2/√π∫x∞e-t2&gt;</remarks>
            <returns>Returns the complementary error function which is a special
case of incomplete gamma function.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.ErrorFunction">
            <summary>Calcuates the error function erf(x).</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.ErrorFunction(System.String,dotnetCHARTING.Series)">
            <summary>Calcuates the error function erf(x).</summary>
            <remarks>erf(x) =
2/√π∫0xe-t2&gt;</remarks>
            <returns>Returns error function which is a special case of incomplete
gamma function.</returns>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.ErrorFunction(dotnetCHARTING.Series)">
            <summary>Calcuates the error function erf(x).</summary>
            <remarks>erf(x) =
2/√π∫0xe-t2&gt;</remarks>
            <returns>Returns error function which is a special case of incomplete
gamma function.</returns>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.ErrorFunction(dotnetCHARTING.SeriesCollection)">
            <summary>Calcuates the error function erf(x).</summary>
            <remarks>erf(x) =
2/√π∫0xe-t2&gt;</remarks>
            <returns>Returns error function which is a special case of incomplete
gamma function.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaLn">
            <summary>Calcuates the logarithm of Gamma function.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaLn(System.String,dotnetCHARTING.Series)">
            <summary>Calcuates the logarithm of Gamma function.</summary>
            <remarks>Gamma function is described below: Γ(z) =
∫0∞tz-1e-tdt</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaLn(dotnetCHARTING.Series)">
            <summary>Calcuates the logarithm of Gamma function.</summary>
            <remarks>Gamma function is described below: Γ(z) =
∫0∞tz-1e-tdt</remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaLn(dotnetCHARTING.SeriesCollection)">
            <summary>Calcuates the logarithm of Gamma function.</summary>
            <remarks>Gamma function is described below: Γ(z) =
∫0∞tz-1e-tdt</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaP">
            <summary>Calcuates the incomplete Gamma function P(a, x).</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaP(System.String,dotnetCHARTING.Series,System.Double)">
            <summary>Calcuates the incomplete Gamma function P(a, x).</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="a">A double.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaP(dotnetCHARTING.Series,System.Double)">
            <summary>Calcuates the incomplete Gamma function P(a, x).</summary>
            <param name="s">A statistical series.</param>
            <param name="a">A double.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaP(dotnetCHARTING.SeriesCollection,System.Double)">
            <summary>Calcuates the incomplete Gamma function P(a, x).</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="a">A double.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaQ">
            <summary>Calcuates the incomplete Gamma function Q(a, x).</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaQ(System.String,dotnetCHARTING.Series,System.Double)">
            <summary>Calcuates the incomplete Gamma function Q(a, x).</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaQ(dotnetCHARTING.Series,System.Double)">
            <summary>Calcuates the incomplete Gamma function Q(a, x).</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GammaQ(dotnetCHARTING.SeriesCollection,System.Double)">
            <summary>Calcuates the incomplete Gamma function Q(a, x).</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GeneralLinear">
            <summary>Evaluates the greatest likelyhood coefficients of the
function of best fit in accordance with the least squares approach
for the function basis given.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GeneralLinear(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series)">
            <summary>Evaluates the greatest likelyhood coefficients of the
function of best fit in accordance with the least squares approach
for the function basis given.</summary>
            <remarks>    Further Details
    In its simplest case this method given a data set
    (x_i, y_i), for i=0, ..., m, are are able to find
    the coefficients a_1, ..., a_n such that the
    function:
    f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n *
    f_n(x)
    where f_1,...f_n are the function basis set using
    SetFunctionBasis method, and the function f(x), is best
    fit in accordance with the least square approach. That is,
    coefficients are selected such the points (x_i, f(x_i)),
    for i=1,...,m; are a best fit for the given data set
    (x_i, y_i), i=1,...,m.
    Fixing some Coefficients
    Please note that within this implementation we reserve
    the right to fix some of the coefficients before the function
    is fitted. In such instances the above described fitting is
    performed with some of the coefficients fixed to the initial
    value which they are given. The fit parameter is used in
    order to determine which (if any) of the coefficient are kept
    fixed during the fitting.
    Measure Errors or Weighted Best Fit
    In addition as mentioned within the overview of this
    class you are able to incorporate one of the following features
    when determining the greatest likelyhood coefficients:
    
        Measure Error: You are able to find the
        greatest likelyhood coefficients when the measure error
        (i.e. the standard deviations of the errors of the
        observation so the y_i's). In order to fit the
        function taking into account the measurment error you are
        required to provide the k-th term of the parameter
        sigma as the measurement error of the
        y_k(i.e. the value of the y-axis corrdinate of the
        k-th data point which in used within the fitting of the
        function.
        Weighted Best Fit: If you wish you are also
        able to apply this class with the view of finding the best
        weighted fit where the sigma_icorresponds the weight
        applied to the i-th data point.
    </remarks>
            <returns>Returns an array of doubles where the k-th term corresponds
to the value of the k-th coefficient within the function of best
fit.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="sigma">    An array where the k-th term depending on your point of view to
    one of the following: 
    
        Measure Error View: is the standard deviation of the
        value in the y-axis of the k-th data point.
        Weighted Fitting View: is inverse of the weight given
        to the k-th data point.
    .</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GeneralLinear(dotnetCHARTING.Series,dotnetCHARTING.Series)">
            <summary>Evaluates the greatest likelyhood coefficients of the
function of best fit in accordance with the least squares approach
for the function basis given.</summary>
            <remarks>    Further Details
    In its simplest case this method given a data set
    (x_i, y_i), for i=0, ..., m, are are able to find
    the coefficients a_1, ..., a_n such that the
    function:
    f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n *
    f_n(x)
    where f_1,...f_n are the function basis set using
    SetFunctionBasis method, and the function f(x), is best
    fit in accordance with the least square approach. That is,
    coefficients are selected such the points (x_i, f(x_i)),
    for i=1,...,m; are a best fit for the given data set
    (x_i, y_i), i=1,...,m.
    Fixing some Coefficients
    Please note that within this implementation we reserve
    the right to fix some of the coefficients before the function
    is fitted. In such instances the above described fitting is
    performed with some of the coefficients fixed to the initial
    value which they are given. The fit parameter is used in
    order to determine which (if any) of the coefficient are kept
    fixed during the fitting.
    Measure Errors or Weighted Best Fit
    In addition as mentioned within the overview of this
    class you are able to incorporate one of the following features
    when determining the greatest likelyhood coefficients:
    
        Measure Error: You are able to find the
        greatest likelyhood coefficients when the measure error
        (i.e. the standard deviations of the errors of the
        observation so the y_i's). In order to fit the
        function taking into account the measurment error you are
        required to provide the k-th term of the parameter
        sigma as the measurement error of the
        y_k(i.e. the value of the y-axis corrdinate of the
        k-th data point which in used within the fitting of the
        function.
        Weighted Best Fit: If you wish you are also
        able to apply this class with the view of finding the best
        weighted fit where the sigma_icorresponds the weight
        applied to the i-th data point.
    </remarks>
            <returns>Returns an array of doubles where the k-th term corresponds
to the value of the k-th coefficient within the function of best
fit.</returns>
            <param name="s">A statistical series.</param>
            <param name="sigma">    An array where the k-th term depending on your point of view to
    one of the following: 
    
        Measure Error View: is the standard deviation of the
        value in the y-axis of the k-th data point.
        Weighted Fitting View: is inverse of the weight given
        to the k-th data point.
    .</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GeneralLinear(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series)">
            <summary>Evaluates the greatest likelyhood coefficients of the
function of best fit in accordance with the least squares approach
for the function basis given.</summary>
            <remarks>    Further Details
    In its simplest case this method given a data set
    (x_i, y_i), for i=0, ..., m, are are able to find
    the coefficients a_1, ..., a_n such that the
    function:
    f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n *
    f_n(x)
    where f_1,...f_n are the function basis set using
    SetFunctionBasis method, and the function f(x), is best
    fit in accordance with the least square approach. That is,
    coefficients are selected such the points (x_i, f(x_i)),
    for i=1,...,m; are a best fit for the given data set
    (x_i, y_i), i=1,...,m.
    Fixing some Coefficients
    Please note that within this implementation we reserve
    the right to fix some of the coefficients before the function
    is fitted. In such instances the above described fitting is
    performed with some of the coefficients fixed to the initial
    value which they are given. The fit parameter is used in
    order to determine which (if any) of the coefficient are kept
    fixed during the fitting.
    Measure Errors or Weighted Best Fit
    In addition as mentioned within the overview of this
    class you are able to incorporate one of the following features
    when determining the greatest likelyhood coefficients:
    
        Measure Error: You are able to find the
        greatest likelyhood coefficients when the measure error
        (i.e. the standard deviations of the errors of the
        observation so the y_i's). In order to fit the
        function taking into account the measurment error you are
        required to provide the k-th term of the parameter
        sigma as the measurement error of the
        y_k(i.e. the value of the y-axis corrdinate of the
        k-th data point which in used within the fitting of the
        function.
        Weighted Best Fit: If you wish you are also
        able to apply this class with the view of finding the best
        weighted fit where the sigma_icorresponds the weight
        applied to the i-th data point.
    </remarks>
            <returns>Returns an array of doubles where the k-th term corresponds
to the value of the k-th coefficient within the function of best
fit.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="sigma">    An array where the k-th term depending on your point of view to
    one of the following: 
    
        Measure Error View: is the standard deviation of the
        value in the y-axis of the k-th data point.
        Weighted Fitting View: is inverse of the weight given
        to the k-th data point.
    .</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GeneralLinear(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Double,System.Double,System.Double)">
            <summary>Evaluates the greatest likelyhood coefficients of the
function of best fit in accordance with the least squares approach
for the function basis given.</summary>
            <remarks>    Further Details
    In its simplest case this method given a data set
    (x_i, y_i), for i=0, ..., m, are are able to find
    the coefficients a_1, ..., a_n such that the
    function:
    f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n *
    f_n(x)
    where f_1,...f_n are the function basis set using
    SetFunctionBasis method, and the function f(x), is best
    fit in accordance with the least square approach. That is,
    coefficients are selected such the points (x_i, f(x_i)),
    for i=1,...,m; are a best fit for the given data set
    (x_i, y_i), i=1,...,m.
    Fixing some Coefficients
    Please note that within this implementation we reserve
    the right to fix some of the coefficients before the function
    is fitted. In such instances the above described fitting is
    performed with some of the coefficients fixed to the initial
    value which they are given. The fit parameter is used in
    order to determine which (if any) of the coefficient are kept
    fixed during the fitting.
    Measure Errors or Weighted Best Fit
    In addition as mentioned within the overview of this
    class you are able to incorporate one of the following features
    when determining the greatest likelyhood coefficients:
    
        Measure Error: You are able to find the
        greatest likelyhood coefficients when the measure error
        (i.e. the standard deviations of the errors of the
        observation so the y_i's). In order to fit the
        function taking into account the measurment error you are
        required to provide the k-th term of the parameter
        sigma as the measurement error of the
        y_k(i.e. the value of the y-axis corrdinate of the
        k-th data point which in used within the fitting of the
        function.
        Weighted Best Fit: If you wish you are also
        able to apply this class with the view of finding the best
        weighted fit where the sigma_icorresponds the weight
        applied to the i-th data point.
    </remarks>
            <returns>Returns an array of doubles where the k-th term corresponds
to the value of the k-th coefficient within the function of best
fit.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="sigma">    An array where the k-th term depending on your point of view to
    one of the following: 
    
        Measure Error View: is the standard deviation of the
        value in the y-axis of the k-th data point.
        Weighted Fitting View: is inverse of the weight given
        to the k-th data point.
    .</param>
            <param name="xMin">The XValue of the starting point of the evaluation of best
fitting curve.</param>
            <param name="xMax">The XValue of the ending point of the evaluation of best
fitting curve.</param>
            <param name="interval">The distance between two points.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GeneralLinear(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Double,System.Double,System.Double)">
            <summary>Evaluates the greatest likelyhood coefficients of the
function of best fit in accordance with the least squares approach
for the function basis given.</summary>
            <remarks>    Further Details
    In its simplest case this method given a data set
    (x_i, y_i), for i=0, ..., m, are are able to find
    the coefficients a_1, ..., a_n such that the
    function:
    f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n *
    f_n(x)
    where f_1,...f_n are the function basis set using
    SetFunctionBasis method, and the function f(x), is best
    fit in accordance with the least square approach. That is,
    coefficients are selected such the points (x_i, f(x_i)),
    for i=1,...,m; are a best fit for the given data set
    (x_i, y_i), i=1,...,m.
    Fixing some Coefficients
    Please note that within this implementation we reserve
    the right to fix some of the coefficients before the function
    is fitted. In such instances the above described fitting is
    performed with some of the coefficients fixed to the initial
    value which they are given. The fit parameter is used in
    order to determine which (if any) of the coefficient are kept
    fixed during the fitting.
    Measure Errors or Weighted Best Fit
    In addition as mentioned within the overview of this
    class you are able to incorporate one of the following features
    when determining the greatest likelyhood coefficients:
    
        Measure Error: You are able to find the
        greatest likelyhood coefficients when the measure error
        (i.e. the standard deviations of the errors of the
        observation so the y_i's). In order to fit the
        function taking into account the measurment error you are
        required to provide the k-th term of the parameter
        sigma as the measurement error of the
        y_k(i.e. the value of the y-axis corrdinate of the
        k-th data point which in used within the fitting of the
        function.
        Weighted Best Fit: If you wish you are also
        able to apply this class with the view of finding the best
        weighted fit where the sigma_icorresponds the weight
        applied to the i-th data point.
    </remarks>
            <returns>Returns an array of doubles where the k-th term corresponds
to the value of the k-th coefficient within the function of best
fit.</returns>
            <param name="s">A statistical series.</param>
            <param name="sigma">    An array where the k-th term depending on your point of view to
    one of the following: 
    
        Measure Error View: is the standard deviation of the
        value in the y-axis of the k-th data point.
        Weighted Fitting View: is inverse of the weight given
        to the k-th data point.
    .</param>
            <param name="xMin">The XValue of the starting point of the evaluation of best
fitting curve.</param>
            <param name="xMax">The XValue of the ending point of the evaluation of best
fitting curve.</param>
            <param name="interval">The distance between two points.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.GeneralLinear(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series,System.Double,System.Double,System.Double)">
            <summary>Evaluates the greatest likelyhood coefficients of the
function of best fit in accordance with the least squares approach
for the function basis given.</summary>
            <remarks>    Further Details
    In its simplest case this method given a data set
    (x_i, y_i), for i=0, ..., m, are are able to find
    the coefficients a_1, ..., a_n such that the
    function:
    f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n *
    f_n(x)
    where f_1,...f_n are the function basis set using
    SetFunctionBasis method, and the function f(x), is best
    fit in accordance with the least square approach. That is,
    coefficients are selected such the points (x_i, f(x_i)),
    for i=1,...,m; are a best fit for the given data set
    (x_i, y_i), i=1,...,m.
    Fixing some Coefficients
    Please note that within this implementation we reserve
    the right to fix some of the coefficients before the function
    is fitted. In such instances the above described fitting is
    performed with some of the coefficients fixed to the initial
    value which they are given. The fit parameter is used in
    order to determine which (if any) of the coefficient are kept
    fixed during the fitting.
    Measure Errors or Weighted Best Fit
    In addition as mentioned within the overview of this
    class you are able to incorporate one of the following features
    when determining the greatest likelyhood coefficients:
    
        Measure Error: You are able to find the
        greatest likelyhood coefficients when the measure error
        (i.e. the standard deviations of the errors of the
        observation so the y_i's). In order to fit the
        function taking into account the measurment error you are
        required to provide the k-th term of the parameter
        sigma as the measurement error of the
        y_k(i.e. the value of the y-axis corrdinate of the
        k-th data point which in used within the fitting of the
        function.
        Weighted Best Fit: If you wish you are also
        able to apply this class with the view of finding the best
        weighted fit where the sigma_icorresponds the weight
        applied to the i-th data point.
    </remarks>
            <returns>Returns an array of doubles where the k-th term corresponds
to the value of the k-th coefficient within the function of best
fit.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="sigma">    An array where the k-th term depending on your point of view to
    one of the following: 
    
        Measure Error View: is the standard deviation of the
        value in the y-axis of the k-th data point.
        Weighted Fitting View: is inverse of the weight given
        to the k-th data point.
    .</param>
            <param name="xMin">The XValue of the starting point of the evaluation of best
fitting curve.</param>
            <param name="xMax">The XValue of the ending point of the evaluation of best
fitting curve.</param>
            <param name="interval">The distance between two points.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.NonLinearModel">
            <summary>Here we offer the Levenberg - Marquardt algorithm which fits
a given non-linear function set in accordance with the least
squares approach.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.NonLinearModel(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Double[],System.Boolean[])">
            <summary>Here we offer the Levenberg - Marquardt algorithm which fits
a given non-linear function set in accordance with the least
squares approach.</summary>
            <remarks>    This examlpe finds the real valued function of best fit,
    of the type considered in accordance with the least squares
    approach. That is, for the functon f, which depends on the
    parameters (or variables a[]), we find the variables such
    that:
    
    E = sum_k {(y[k] - f(x[k],a)) / s[k]}^2
    is minimal, where:
    
        x[] - are the domain points, i.e. the points at which
        the values of the real valued function are
        evaluated.
        y[] - are the values of the data points at the domain
        values.
        a[] - the models parameters, that is the variables
        which the function which is being fitted depends on.
        s[] - the scale (or weight) which is applied to each
        error. That is, s[k] is the scale applied the error for the
        k-th data set point.
    
    Remark: The implemention of the function
    interface, implements two methods which return the value and
    the gradient of the function f(x,a), and not the functional E
    given above.
    Features of the Algorithm
    The algorithm for the non-linear framework finds the
    local minimum in accordance with the least squares approach.
    This mean that the initial point given from which the minimum
    is sort lies within the same basin of attraction of the global
    minimum. In practice, this means in particularly when a
    non-linear function with many terms is considered that the
    initial starting point is very carefully chosen. This is not a
    consequence of our implementation but the nature of the
    algorithm and problem at hand. The algorithms is of greedy type
    and essentially uses an abstraction of calculus based methods
    in which the best point in a neighbourhood of a point a chosen
    at each step.
    Remark: As a side note, the reason why the linear
    algorithm work so well is that it is based on a simplex
    algorithm which is combinatorial in nature.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="deviations">An array of doubles where the k-th terms corresponding to the
weighting given to the model errors associated within the k-th data
point.</param>
            <param name="a">The parameters/state of the model.</param>
            <param name="vary">False to indicate the corresponding modelParameters[k]
is to be held fixed.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.NonLinearModel(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Double[],System.Boolean[])">
            <summary>Here we offer the Levenberg - Marquardt algorithm which fits
a given non-linear function set in accordance with the least
squares approach.</summary>
            <remarks>    This examlpe finds the real valued function of best fit,
    of the type considered in accordance with the least squares
    approach. That is, for the functon f, which depends on the
    parameters (or variables a[]), we find the variables such
    that:
    
    E = sum_k {(y[k] - f(x[k],a)) / s[k]}^2
    is minimal, where:
    
        x[] - are the domain points, i.e. the points at which
        the values of the real valued function are
        evaluated.
        y[] - are the values of the data points at the domain
        values.
        a[] - the models parameters, that is the variables
        which the function which is being fitted depends on.
        s[] - the scale (or weight) which is applied to each
        error. That is, s[k] is the scale applied the error for the
        k-th data set point.
    
    Remark: The implemention of the function
    interface, implements two methods which return the value and
    the gradient of the function f(x,a), and not the functional E
    given above.
    Features of the Algorithm
    The algorithm for the non-linear framework finds the
    local minimum in accordance with the least squares approach.
    This mean that the initial point given from which the minimum
    is sort lies within the same basin of attraction of the global
    minimum. In practice, this means in particularly when a
    non-linear function with many terms is considered that the
    initial starting point is very carefully chosen. This is not a
    consequence of our implementation but the nature of the
    algorithm and problem at hand. The algorithms is of greedy type
    and essentially uses an abstraction of calculus based methods
    in which the best point in a neighbourhood of a point a chosen
    at each step.
    Remark: As a side note, the reason why the linear
    algorithm work so well is that it is based on a simplex
    algorithm which is combinatorial in nature.</remarks>
            <param name="s">A statistical series.</param>
            <param name="deviations">An array of doubles where the k-th terms corresponding to the
weighting given to the model errors associated within the k-th data
point.</param>
            <param name="a">The parameters/state of the model.</param>
            <param name="vary">False to indicate the corresponding modelParameters[k]
is to be held fixed.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Advanced.NonLinearModel(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series,System.Double[],System.Boolean[])">
            <summary>Here we offer the Levenberg - Marquardt algorithm which fits
a given non-linear function set in accordance with the least
squares approach.</summary>
            <remarks>    This examlpe finds the real valued function of best fit,
    of the type considered in accordance with the least squares
    approach. That is, for the functon f, which depends on the
    parameters (or variables a[]), we find the variables such
    that:
    
    E = sum_k {(y[k] - f(x[k],a)) / s[k]}^2
    is minimal, where:
    
        x[] - are the domain points, i.e. the points at which
        the values of the real valued function are
        evaluated.
        y[] - are the values of the data points at the domain
        values.
        a[] - the models parameters, that is the variables
        which the function which is being fitted depends on.
        s[] - the scale (or weight) which is applied to each
        error. That is, s[k] is the scale applied the error for the
        k-th data set point.
    
    Remark: The implemention of the function
    interface, implements two methods which return the value and
    the gradient of the function f(x,a), and not the functional E
    given above.
    Features of the Algorithm
    The algorithm for the non-linear framework finds the
    local minimum in accordance with the least squares approach.
    This mean that the initial point given from which the minimum
    is sort lies within the same basin of attraction of the global
    minimum. In practice, this means in particularly when a
    non-linear function with many terms is considered that the
    initial starting point is very carefully chosen. This is not a
    consequence of our implementation but the nature of the
    algorithm and problem at hand. The algorithms is of greedy type
    and essentially uses an abstraction of calculus based methods
    in which the best point in a neighbourhood of a point a chosen
    at each step.
    Remark: As a side note, the reason why the linear
    algorithm work so well is that it is based on a simplex
    algorithm which is combinatorial in nature.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="deviations">An array of doubles where the k-th terms corresponding to the
weighting given to the model errors associated within the k-th data
point.</param>
            <param name="a">The parameters/state of the model.</param>
            <param name="vary">False to indicate the corresponding modelParameters[k]
is to be held fixed.</param>
        </member>
        <member name="T:dotnetCHARTING.ForecastEngine+Options">
            <summary>Defines a set of static options used with FinancialEngine
calculations.</summary>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddAbsoluteSum(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum of absolute functions to be used as basis
element.</summary>
            <remarks>    Where each of the elements of this sum takes the following
    form: 
    absCoeff * Absn(coefficient * x +
    constant)
    where the Abs is the absolute functions given
    by:
    
        Abs(x) = x, if x &gt; 0
        Abs(x) = -x, if x &lt; 0
    </remarks>
            <param name="absCoeff">An array where the k-th term is the coefficient of the whole
k-th absolute function term within the sum.</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the
variable within the k-th absolute function term within the sum
(i.e. coefficient as shown above).</param>
            <param name="constant">An array where the k-th term is the constant shift of the
absolute function of the k-th term within the sum (i.e. the
constant term as shown above).</param>
            <param name="exponent">An array where the k-th term is the exponent of the absolute
function term within the k-th element of the sum (i.e. n as
shown above).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddConstantTerm(System.Double)">
            <summary>Adds a constant function on one real variable to the function
basis.</summary>
            <remarks>    The constant function takes the form: 
    f(x) = constant
    where x is the variable and constant is a
    real number.</remarks>
            <param name="constant">The constant value taken by the constant function.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddCosineSum(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum a Cosine functions to an elements of the function
basis.</summary>
            <remarks>    Please note that the k-th term of the sum which makes up the
    basis function will take to form: 
    k-th Term = a_k * (Cosn_k (b_k * x +
    c_k)),
    where the Cosine function is in terms of radians, and
    a_k, n_k, b_k, c_k are real numbers. Please, in order to
    construct the sum you just sum over k starting at
    0.
    Notes on the Radian measure
    Radians are a means by which to describe the angle and
    are related to the more commonly used degrees as follows:
    
    360 degrees = 2 * Pi * radians
    
    therefore, 1 radian = 180 / Pi degrees =
    57.295... degrees.</remarks>
            <param name="cosCoeff">An array where the k-th term is the coefficient of the
(k+1)-th term of the sum of Cosine terms (i.e. a_k).</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the Cosine
term of the (k+1)-th term of the sum of the Cosine terms (i.e.
b_k).</param>
            <param name="constant">An array where the k-th term is the constant shift in the
x-axis of the Cosine term of the (k+1)-th term of the sum of Cosine
terms (i.e. c_k).</param>
            <param name="exponent">An array where the k-th term is the exponent of the Cosine
term within the (k+1)-th term of the sum of the Cosine terms (i.e.
n_k).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddExponentialSum(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum of exponential functions to be used as basis
elements.</summary>
            <remarks>    Where each of the elements of the sum given will take the
    following form: 
    expCoeff * expn (coefficient * x +
    constant))</remarks>
            <param name="expCoeff">An array where the k-th term is the coefficient of the whole
k-th exponential term within the sum.</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the
variable within the k-th exponential term within the sum (i.e.
coefficient as shown above).</param>
            <param name="constant">An array where the k-th term is the constant shift of the
exponential function of the k-th term within the sum (i.e. the
constant term as shown above).</param>
            <param name="exponent">An array where the k-th term is the exponent of the
exponential term within the k-th element of the sum (i.e. n
as shown above).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddLogarithmicSum(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum of (natural) log functions to be used as basis
elements.</summary>
            <remarks>    Where each of the elements of the sum given will take the
    following form: 
    logCoeff * logn (coefficient * x +
    constant))</remarks>
            <param name="logCoeff">An array where the k-th term is the coefficient of the whole
k-th logarithm term within the sum.</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the
variable within the k-th logarithm term within the sum (i.e.
coefficient as shown above).</param>
            <param name="constant">An array where the k-th term is the constant shift of the
logarithm function of the k-th term within the sum (i.e. the
constant term as shown above).</param>
            <param name="exponent">An array where the k-th term is the exponent of the logarithm
term within the k-th element of the sum (i.e. n as shown
above).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddNonLinearCosineSum(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum a Cosine functions as an element of the function
basis.</summary>
            <remarks>    Please note that the k-th term of the sum which makes up the
    basis function will take to form: 
    k-th Term = r_k * a_(4k) * (Cosn_k +
    a_(4k+1) (b_k * a_(4k+2) * x + c_k + a_(4k+3))),
    (*)
    
        where the Cosine function is in terms of radians, and
        r_k, n_k, b_k, c_k are real numbers which are given
        by the parameters and 
        

a_(4k), a_(4k+1), a_(4k+2), a_(4k+3),
             a_(4k+4)

        , are the variables which are to be fitted. In order
        to construct the sum you just sum over k starting at
        0. That is, the term from which the basis elements
        will be constructed is: 
        f(x, a_0, ..., a_4, ...., a_(4n+3)) = (sum of k of
        n-terms given by (*) above),
        where a_0,....., a_(4n+3) are the variables of
        the function which are to be fitted, and x is the
        variable which will not be fitted.
        Example
        In order to clarify the above explanation we provide
        an explicit example. In particular, in order to represent
        the following sum of cosine terms:
        f(x, a_0, a_1, ..., a_7) = a_0 * Cos2 *
        a_1 (b_0 * a_2 * x + a_3) + a_4 * Cos(1 *
        a_5) (b_1 * a_6 * x + 2 + a_7),
        you are required to pass the following
        parameters:
        Notes on the Radian measure
        Radians are a means by which to describe the angle
        and are related to the more commonly used degrees as
        follows:
        
        360 degrees = 2 * Pi * radians
        
        therefore, 1 radian = 180 / Pi degrees =
        57.295... degrees.
    </remarks>
            <param name="cosCoeff">An array where the k-th term is the coefficient of the
(k+1)-th term of the sum of Cosine terms (i.e. a_k).</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the Cosine
term of the (k+1)-th term of the sum of the Cosine terms (i.e.
b_k).</param>
            <param name="constant">An array where the k-th term is the constant shift in the
x-axis of the Cosine term of the (k+1)-th term of the sum of Cosine
terms (i.e. c_k).</param>
            <param name="exponent">An array where the k-th term is the exponent of the Cosine
term within the (k+1)-th term of the sum of the Cosine terms (i.e.
n_k).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddNonLinearExponentialSum(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum of exponential functions to be used as non-linear
basis elements.</summary>
            <remarks>    Where each of the elements of the sum given will take the
    following form: 
    expCoeff * expn (coefficient * x +
    constant))</remarks>
            <param name="expCoeff">An array where the k-th term is the coefficient of the whole
k-th exponential term within the sum.</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the
variable within the k-th exponential term within the sum (i.e.
coefficient as shown above).</param>
            <param name="constant">An array where the k-th term is the constant shift of the
exponential function of the k-th term within the sum (i.e. the
constant term as shown above).</param>
            <param name="exponent">An array where the k-th term is the exponent of the
exponential term within the k-th element of the sum (i.e. n
as shown above).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddNonLinearLogarithmicSum(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum of (natural) log functions to be used as
non-linear basis elements.</summary>
            <remarks>    Where each of the elements of the sum given will take the
    following form: 
    logCoeff * logn (coefficient * x +
    constant))</remarks>
            <param name="logCoeff">An array where the k-th term is the coefficient of the whole
k-th logarithm term within the sum.</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the
variable within the k-th logarithm term within the sum (i.e.
coefficient as shown above).</param>
            <param name="constant">An array where the k-th term is the constant shift of the
logarithm function of the k-th term within the sum (i.e. the
constant term as shown above).</param>
            <param name="exponent">An array where the k-th term is the exponent of the logarithm
term within the k-th element of the sum (i.e. n as shown
above).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddNonLinearSineSum(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum of Sine functions to the used as non-linear basis
elements.</summary>
            <remarks>    Please note that each term of the sum which makes up the basis
    function will take to form: 
    sinCoeff * (sinn (coefficient * x +
    constant)),
    where the Sine function is in terms of radians.
    Notes on the Radian measure
    Radians are a means by which to describe the angle and
    are related to the more commonly used degrees as follows:
    
    360 degrees = 2 * Pi * radians
    
    therefore, 1 radian = 180 / Pi degrees = 57.295...
    degrees.</remarks>
            <param name="sinCoeff">An array where the k-th term is the coefficient of the whole
k-th cosine term within the sum.</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the
variable within the k-th sine term within the sum (i.e.
coefficient as shown above).</param>
            <param name="constant">An array where the k-th term is the constant shift of the
sine function of the k-th term within the sum (i.e. the
constant term as shown above).</param>
            <param name="exponent">An array where the k-th term is the exponent of the sine term
within the k-th element of the sum (i.e. n as shown
above).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddPowerTerm(System.Double,System.Double)">
            <summary>Add a power term as an element of the function basis.</summary>
            <remarks>    This elements will take the follow form: 
    a_1 * x^n,
    where a_1, n are arbitrary real numbers.</remarks>
            <param name="coefficient">A double which is the coefficient of the term (i.e.
a_1 above).</param>
            <param name="exponent">A double which is the exponent of the variable of the term
(i.e. n above).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddRationalSumOfPowerTerms(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a rational expression where the numerator and
denominator are both themselves a sum of power terms as defined
within Double[]) to the function basis.</summary>
            <remarks>    That is, the rational sum of the power terms takes the form: 
    ( (a_1 * x^n_1) + ... + (a_p * x^n_p) ) / ( (b_1 *
    x^m_1) + ... + (b_q * x^m_q) ),
    where a_1,..., a_n, n_1,..., n_p, b_1,..., b_q are
    real numbers and x is the real variable.</remarks>
            <param name="upperRationalCoeff">An array where the k-th term is the coefficient of the
(k+1)-th term of the sum of power terms (i.e. a_k) which
make up the numerator.</param>
            <param name="upperRationalExp">An array where the k-th term is the exponent and the variable
of the (k+1)-th power term (i.e. n_k) which make up the
numerator.</param>
            <param name="lowerRationalCoeff">An array where the k-th term is the coefficient of the
(k+1)-th term of the sum of power terms (i.e. b_k) which
make up the denominator.</param>
            <param name="lowerRationalExp">An array where the k-th term is the exponent and the variable
of the (k+1)-th power term (i.e. m_k) which make up the
denominator.</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddSineSum(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum of Sine functions to the used as basis
elements.</summary>
            <remarks>    Please note that each term of the sum which makes up the basis
    function will take to form: 
    sinCoeff * (sinn (coefficient * x +
    constant)),
    where the Sine function is in terms of radians.
    Notes on the Radian measure
    Radians are a means by which to describe the angle and
    are related to the more commonly used degrees as follows:
    
    360 degrees = 2 * Pi * radians
    
    therefore, 1 radian = 180 / Pi degrees = 57.295...
    degrees.</remarks>
            <param name="sinCoeff">An array where the k-th term is the coefficient of the whole
k-th cosine term within the sum.</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the
variable within the k-th sine term within the sum (i.e.
coefficient as shown above).</param>
            <param name="constant">An array where the k-th term is the constant shift of the
sine function of the k-th term within the sum (i.e. the
constant term as shown above).</param>
            <param name="exponent">An array where the k-th term is the exponent of the sine term
within the k-th element of the sum (i.e. n as shown
above).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddStepSum(System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum of step functions to be used as a basis
element.</summary>
            <remarks>    Where each of the elements of the sum takes the following form:
    
    stepCoeff * Step(coefficient * x +
    constant),
    where the Step(x) is given by:
    
        Step(x) = 0, if x lequ; 0
        Step(x) = 1, if x &gt; 0
    </remarks>
            <param name="stepCoeff">An array where the k-th term is the coefficient of the whole
k-th step function term within the sum.</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the
variable within the k-th step function term within the sum (i.e.
coefficient as shown above).</param>
            <param name="constant">An array where the k-th term is the constant shift of the
step function of the k-th term within the sum (i.e. the
constant term as shown above).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddSumOfNonLinearPowerTerms(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum of power terms as an element of the function
basis.</summary>
            <remarks>    The sum of power terms will take the follow form: 
    
        

f(x, a0, a1, a2,..., a3n+2) =
             (r0 * a0 * (a1 * b0 * x + c0 + a2)p0)
             + ... +
             (rn * a3n * (a3n+1 * bb * x + cn + a3n+2)pn)

        , 
        
            where 
            

r0,..., rn, b0,..., bn, c0,..., cn,
             p0,..., pn

            are arbitrary real numbers, a0,...,
            a3n+2 are real numbers corresponding to
            values of the model parameters and x is a real
            variable. 
            Remark: The sum of power terms for the
            non-linear factor model is a direct generalization of
            the sum of power terms contained within the General
            Linear Factor model (see
            GeneralLinearFactorModel).
            Example
            In order to clarify the use of this method we
            provide the following explicit example. In order to set
            the following term to an instance of the non-linear
            factor model:
            f(x, a0, a1,
            a2) = 2 * a0 * (a1 * 1
            * x + a2 + 0)3,
            you must make a call to this method with the
            parameters:
            
                powerCoefficients = {2}
                coefficients = {1}
                constants = {0}
                exponents = {3}
            
            Using this method to represent a constant function
            term
            You are able to represent the constant function
            term:
            f(x, a0) = a0 *
            constant,
            by calling this method with the parameters
            constant, coefficients being an array of length
            1, where the elements can take any (non-zero) value and
            powerCoefficients = {constant}, exponents = {0}.
            However in such an instance care must be taken to
            observe that in fact you are representing the constant
            functions using the sum of power terms convension in
            which:
            f(x, a0, a1,
            a2) = constant * a1
            (a1 * x + a2)0 =
            constant * a1
            In particular, you will need to keep track of the
            model parameters a1 and
            a2 above when calling methods such as
            GetValueAt, in which you will need to provide
            (in fact any) values for a1 and
            a2.
            Worked Example
            We considered the function:
            
                

f(x, a0, a1,..., a8) = a0(a1x + a2)
             + a3(a4x + a5)2 + (2.5)a6(a7a0 + a8)0

                , 
                which can be set to an instance of this class
                by calling this method with the parameters:
                
                    logCoeffs = { 1.0, 1.0, 2.5
                    }
                    coefficients = { 1.0, 1.0, 1.0
                    }
                    constants = { 0.0, 0.0, 1.0
                    }
                    exponents = { 1.0, 2.0, 0.0
                    }
                
                Therefore, for example when {
                a0, a1, ..., a8 }
                = { 1, 1, 1, 1, 1, 1, 1, 1 }, and evaluate the
                derivative and function itself using
                GetValueAt we find that:
                
                    
                        
                            
                                
                                x = 0
                                x = 1
                                x = 2
                            
                            
                                ∂f/∂a0 =
                                a0x +
                                a1
                                1
                                2
                                3
                            
                            
                                ∂f/∂a1 =
                                a0x
                                0
                                1
                                2
                            
                            
                                ∂f/∂a2 =
                                a0
                                1
                                1
                                1
                            
                            
                                ∂f/∂a3 =
                                (a4x +
                                a5)2
                                1
                                4
                                9
                            
                            
                                ∂f/∂a4 = 2
                                a3(a4x +
                                a5)x
                                0
                                4
                                12
                            
                            
                                ∂f/∂a5 =
                                2a3(a4x +
                                a5)
                                2
                                4
                                6
                            
                            
                                ∂f/∂a6 =
                                2.5
                                2.5
                                2.5
                                2.5
                            
                            
                                ∂f/∂a7 =
                                0
                                0
                                0
                                0
                            
                            
                                ∂f/∂a8 =
                                0
                                0
                                0
                                0
                            
                            
                                f
                                4.5
                                8.5
                                14.5
                            
                        
                    
                
                Source Code Implementation: You can
                find the source code implementation of this example
                within the QAExample's within the
                Client/QAClients/ directory. In particular,
                this worked example corresponds to the example
                within the
                CurveFitting/NonLinearFunctionModel
                directory of the QAExamples. Note that within this
                implementation we construct the function described
                above by calling this method twice where the 1st
                method call defines to the sub-function which
                depends on (x, a0, ...,
                a5), and the 2-nd method call
                defines the constant function which depends on
                (x, a6, a7,
                a8).
            
        
    </remarks>
            <param name="powerCoefficients">An array where the k-th term is the coefficient of the
(k+1)-th term of the sum of power terms (i.e.
rk+1).</param>
            <param name="coefficients">An array where the k-th term is the coefficient of the
(space) variable of the argument of the power term (i.e.
bk).</param>
            <param name="constants">An array where the k-th term is the constant shift in the
x-axis of the power term of the (k+1)-th term of the sum of power
terms (i.e. ck).</param>
            <param name="exponents">An array where the k-th term is the exponent and the variable
of the (k+1)-th power term (i.e. pk+1).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddSumOfPowerTerms(System.Double[],System.Double[])">
            <summary>Adds a sum of power terms as an element of the function
basis.</summary>
            <remarks>    The sum of power terms will take the follow form: 
    (a_1 * x^n_1) + ... + (a_m * x^n_p),
    where a_1,..., a_n, n_1,..., n_p are arbitrary
    real numbers.</remarks>
            <param name="powerTermCoeff">An array where the k-th term is the coefficient of the
(k+1)-th term of the sum of power terms (i.e. a_k).</param>
            <param name="powerTermExponents">An array where the k-th term is the exponent and the variable
of the (k+1)-th power term (i.e. n_k).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.AddTangentSum(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Adds a sum of Tangent functions to the used as basis
elements.</summary>
            <remarks>    Please note that each term of the cum which makes up the basis
    function will take to form: 
    tanCoeff * (tann (coefficient * x +
    constant)),
    where the Tangent function is in terms of radians.
    Notes on the Radian measure
    Radians are a means by which to describe the angle and
    are related to the more commonly used degrees as follows:
    
    360 degrees = 2 * Pi * radians
    
    therefore, 1 radian = 180 / Pi degrees = 57.295...
    degrees.</remarks>
            <param name="tanCoeff">An array where the k-th term is the coefficient of the whole
k-th tangent term within the sum.</param>
            <param name="coefficient">An array where the k-th term is the coefficient of the
variable within the k-th tangent term within the sum (i.e.
coefficient as shown above).</param>
            <param name="constant">An array where the k-th term is the constant shift of the
tangent function of the k-th term within the sum (i.e. the
constant term as shown above).</param>
            <param name="exponent">An array where the k-th term is the exponent of the tangent
term within the k-th element of the sum (i.e. n as shown
above).</param>
        </member>
        <member name="M:dotnetCHARTING.ForecastEngine+Options.Reset">
            <summary>Resets the options to default settings.</summary>
        </member>
        <member name="P:dotnetCHARTING.ForecastEngine+Options.FormatString">
            <summary>This property sets and gets a format string used in the
equation which is display on to the chart through a token.</summary>
        </member>
        <member name="P:dotnetCHARTING.ForecastEngine+Options.MatchColors">
            <summary>Gets or sets a value that indicates whether calculated
elements will use the same colors that are assigned to original
series. Both, the original and derived data objects must be placed
on the same chart to enable this feature.</summary>
        </member>
        <member name="P:dotnetCHARTING.ForecastEngine+Options.ModelFunction">
            <summary>This attribute allows the basis of functions which describes
a factor model.</summary>
            <remarks>    A factor model is a real vector space of functions from which a
    function will be selected in accordance with some criteria.
    That is, we allow the basis of functions f_1(x), f_2(x) ,
    ..., f_n(x), which span the factor model, i.e. any element
    of the factor model can be represented as: 
    a_1 * f_1(x) + a_2 * f_2(x) + ... + a_n *
    f_n(x)
    where a_1, ..., a_n are real numbers. Note that
    the above representation is unique.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ForecastEngine+Options.NonLinearModelFunction">
            <summary>This attribute holds the basis of functions which describes a
factor model.</summary>
            <remarks>    A factor model is a real vector space of functions from which a
    function will be selected in accordance with some criteria.
    That is, we allow the basis of functions f_1, f_2,...,
    f_n, which span the factor model, i.e. any element of the
    factor model can be represented as: 
    f_1(x, a_1, ...., a_n) + f_2(x, a'_1,...., a'_n) + ...
    + f_n(x, a''_1, ....., a''_n)
    where x and a_1,..., a_n, a'_1,..., a'_n,...,
    a''_1,..., a''_n are real variables. For example the term
    f_1(x, a_1, a_2, a_3), could correspond to:
    f_1(x, a_1, a_2, a_3) = a_1 Sin(a_2 x +
    a_3)
    where a_1, a_2, a_3, are the variables which are
    to be fitted using the fitting algorithm.
    Ordering of the Variables
    Once the non-linear factor has been built (using this
    class) and fitted using the the non linear model algorithm, the
    values of the a_k which generate the best fitted curve
    in accordance with the least squares approach will be returned
    within an array.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ForecastEngine+Options.NumberPrecision">
            <summary>    This property sets and gets the number of decimal for the
    numbers used in the equations which can be display on to the
    chart through a token. 
    
    [C#]ForecastEngine.Options.NumberPrecision = 2
    ;
    
        
[Visual Basic]
        
        
ForecastEngine.Options.NumberPrecision = 2
        
    </summary>
        </member>
        <member name="P:dotnetCHARTING.ForecastEngine+Options.PopulateSubValues">
            <summary>Gets or sets a static value that determines whether elements
derived from series will contain values of the original elements as
dotnetCHARTING.SubValue objects.</summary>
        </member>
        <member name="T:dotnetCHARTING.HitTestInfo">
            <summary>Contains information about the point on the chart including
related objects at that position.</summary>
        </member>
        <member name="M:dotnetCHARTING.HitTestInfo.#ctor">
            <summary>Creates a new instance of the HitTestInfo class.</summary>
        </member>
        <member name="P:dotnetCHARTING.HitTestInfo.DataSource">
            <summary>Gets a DataSource object that describes the clicked object
and related objects.</summary>
        </member>
        <member name="P:dotnetCHARTING.HitTestInfo.Object">
            <summary>Gets the object at the hitTest position.</summary>
        </member>
        <member name="P:dotnetCHARTING.HitTestInfo.Polygon">
            <summary>Gets a PointF[] polygon representation of the clicked
object.</summary>
        </member>
        <member name="P:dotnetCHARTING.HitTestInfo.Series">
            <summary>Gets the series at the hitTest position.</summary>
        </member>
        <member name="P:dotnetCHARTING.HitTestInfo.Type">
            <summary>Gets the object type at the hitTest position.</summary>
        </member>
        <member name="T:dotnetCHARTING.Hotspot">
            <summary>Represents a hotspot on the image and provides events such as
tool tips and redirect URL when clicked.</summary>
            <remarks>For more information, see tutorial:
Getting Started &gt; General Tutorials &gt; Interactivity -
Hotspots</remarks>
        </member>
        <member name="M:dotnetCHARTING.Hotspot.#ctor">
            <summary>Creates an instance of the HotSpot object.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot.Attributes">
            <summary>Gets the

HtmlAttributes of this Hotspot.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot.ToolTip">
            <summary>Gets or sets the tool tip text shown when mouse pointer is
over the object this Hotspot represents.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot.URL">
            <summary>Gets or sets the URL redirected to when the object this
Hotspot represents is clicked.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot.URLTarget">
            <summary>Gets or sets the URL target of the URL property.</summary>
        </member>
        <member name="T:dotnetCHARTING.Hotspot+HtmlAttribute">
            <summary>Encapsulates a number of pre-defined javascript actions and
their values.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot+HtmlAttribute.Alert">
            <summary>Gets or sets the text of a javascript alert pop-up.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot+HtmlAttribute.Redirect">
            <summary>Gets or sets the url the browser redirects to.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot+HtmlAttribute.RedirectFrame">
            <summary>Gets or sets the url the current frame redirects to.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot+HtmlAttribute.StatusBarMessage">
            <summary>Gets or sets the status bar text message of the browser
window.</summary>
        </member>
        <member name="T:dotnetCHARTING.Hotspot+HtmlAttributes">
            <summary>Encapsulates a set of html event attributes and their
values.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot+HtmlAttributes.Custom">
            <summary>Gets or sets a ListCollection of custom html
attributes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot+HtmlAttributes.OnClick">
            <summary>Gets or sets the html OnClick attribute.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot+HtmlAttributes.OnDoubleClick">
            <summary>Gets or sets the html OnDoubleClick attribute.</summary>
        </member>
        <member name="P:dotnetCHARTING.Hotspot+HtmlAttributes.OnMouseOver">
            <summary>Gets or sets the html OnMouseOver attribute.</summary>
        </member>
        <member name="T:dotnetCHARTING.HotspotCollection">
            <summary>Contains a collection of Hotspot objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.HotspotCollection.#ctor(dotnetCHARTING.Hotspot[])">
            <summary>Creates a new instance of HotspotCollection with the
specified list of Hotspot objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.HotspotCollection.Add">
            <summary>Adds a specified HotspotCollection to this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.HotspotCollection.Add(dotnetCHARTING.HotspotCollection)">
            <summary>Adds a specified HotspotCollection to this collection.</summary>
            <param name="hotspotCollection">The HotspotCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.HotspotCollection.Add(dotnetCHARTING.Hotspot[])">
            <summary>Adds the specified Hotspot objects to this collection.</summary>
            <param name="hotspotList">A list of Hotspot objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.HotspotCollection.Clear">
            <summary>Clears this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.HotspotCollection.Contains(dotnetCHARTING.Hotspot)">
            <summary>Determines whether this collection contains a specified
Hotspot.</summary>
            <returns>true if the specified Hotspot belongs to this collection;
otherwise, false.</returns>
            <param name="hotspot">The Hotspot to find.</param>
        </member>
        <member name="M:dotnetCHARTING.HotspotCollection.IndexOf(dotnetCHARTING.Hotspot)">
            <summary>Determines index of a specified Hotspot in this
collection.</summary>
            <returns>The zero-based index of the specified Hotspot.</returns>
            <param name="hotspot">The Hotspot to find.</param>
        </member>
        <member name="M:dotnetCHARTING.HotspotCollection.Insert(System.Int32,dotnetCHARTING.Hotspot)">
            <summary>Inserts a Hotspot into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the Hotspot.</param>
            <param name="hotspot">The Hotspot to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.HotspotCollection.Remove(dotnetCHARTING.Hotspot)">
            <summary>Removes a specified Hotspot from this collection.</summary>
            <param name="hotspot">The Hotspot to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.HotspotCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.Label">
            <summary>Represents a label containing text, a font, color, and other
options.</summary>
        </member>
        <member name="M:dotnetCHARTING.Label.#ctor">
            <summary>Initializes a new instance of the Label class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Label.#ctor">
            <summary>Initializes a new instance of the Label class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Label.#ctor(System.Drawing.Font)">
            <summary>Initializes a new instance of the Label class with a
font.</summary>
            <param name="font">Font of this label.</param>
        </member>
        <member name="M:dotnetCHARTING.Label.#ctor(System.String)">
            <summary>Initializes a new instance of the Label class with
text.</summary>
            <param name="text">Text of this label.</param>
        </member>
        <member name="M:dotnetCHARTING.Label.#ctor(System.String,System.Drawing.Font)">
            <summary>Initializes a new instance of the Label class with text, and
a font.</summary>
            <param name="text">Text of this label.</param>
            <param name="font">Font of this label.</param>
        </member>
        <member name="M:dotnetCHARTING.Label.#ctor(System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>Initializes a new instance of the Label class with text,
font, and a color.</summary>
            <param name="text">Text of this label.</param>
            <param name="font">Font of this label.</param>
            <param name="color">Color of this label.</param>
        </member>
        <member name="M:dotnetCHARTING.Label.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color)">
            <summary>Initializes a new instance of the Label class with text,
font, color, and an outline color.</summary>
            <param name="text">Text of this label.</param>
            <param name="font">Font of this label.</param>
            <param name="color">Color of this label.</param>
            <param name="outlineColor">Outline Color of this label.</param>
        </member>
        <member name="P:dotnetCHARTING.Label.Alignment">
            <summary>Gets or sets the alignment of this label.</summary>
        </member>
        <member name="P:dotnetCHARTING.Label.AutoWrap">
            <summary>Gets or sets a value that specifies whether this label will
automatically wrap if it gets too long. This feature allows the
chart to maintain the largest possible area for chart data.</summary>
            <remarks>This property does not affect AxisTick labels.
Axis.TickLabelMode should be used instead in those
cases.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Label.Color">
            <summary>Gets or sets the color of this label.</summary>
        </member>
        <member name="P:dotnetCHARTING.Label.Font">
            <summary>Gets or sets the font for this label.</summary>
        </member>
        <member name="P:dotnetCHARTING.Label.Hotspot">
            <summary>Gets or sets the Hotspot of this Label.</summary>
        </member>
        <member name="P:dotnetCHARTING.Label.LineAlignment">
            <summary>Gets or sets the line alignment of this label.</summary>
        </member>
        <member name="P:dotnetCHARTING.Label.OutlineColor">
            <summary>Gets or sets to color used to outline this label's
text.</summary>
        </member>
        <member name="P:dotnetCHARTING.Label.Text">
            <summary>Gets or sets the text for this label.</summary>
        </member>
        <member name="P:dotnetCHARTING.Label.Truncation">
            <summary>Gets or sets properties used to dynamically shorten this
label when it reaches a maximum length.</summary>
        </member>
        <member name="T:dotnetCHARTING.LabelAlignmentCollection">
            <summary>Contains a collection of LabelAlignment objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.LabelAlignmentCollection.Add(dotnetCHARTING.LabelAlignment)">
            <summary>Adds a specified LabelAlignment enumeration to this
collection.</summary>
            <returns>The zero-based index of the added LabelAlignment.</returns>
            <param name="_LabelAlignment">The LabelAlignment to add.</param>
        </member>
        <member name="M:dotnetCHARTING.LabelAlignmentCollection.Contains(dotnetCHARTING.LabelAlignment)">
            <summary>Determines whether this collection contains a specified
LabelAlignment.</summary>
            <returns>true if the specified LabelAlignment belongs to this
collection; otherwise, false.</returns>
            <param name="_LabelAlignment">The LabelAlignment to find.</param>
        </member>
        <member name="M:dotnetCHARTING.LabelAlignmentCollection.Insert(System.Int32,dotnetCHARTING.LabelAlignment)">
            <summary>Inserts a LabelAlignment enumeration into this collection at
a specified index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the label alignment.</param>
            <param name="_LabelAlignment">The label alignment to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.LabelAlignmentCollection.Remove(dotnetCHARTING.LabelAlignment)">
            <summary>Removes a specified label alignment from this
collection.</summary>
            <param name="_LabelAlignment">The label alignment to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.LabelAlignmentCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.LabelOverrideCollection">
            <summary>Contains a collection of LabelOverride objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.LabelOverrideCollection.Add(dotnetCHARTING.LabelOverride)">
            <summary>Adds a specified LabelOverride class to this
collection.</summary>
            <returns>The zero-based index of the added LabelOverride.</returns>
            <param name="labelOverride">The LabelOverride to add.</param>
        </member>
        <member name="M:dotnetCHARTING.LabelOverrideCollection.Contains(dotnetCHARTING.LabelOverride)">
            <summary>Determines whether this collection contains a specified
LabelOverride.</summary>
            <returns>true if the specified LabelOverride belongs to this
collection; otherwise, false.</returns>
            <param name="labelOverride">The LabelOverride to find.</param>
        </member>
        <member name="M:dotnetCHARTING.LabelOverrideCollection.Insert(System.Int32,dotnetCHARTING.LabelOverride)">
            <summary>Inserts a label override into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the label override.</param>
            <param name="labelOverride">The label override to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.LabelOverrideCollection.Remove(dotnetCHARTING.LabelOverride)">
            <summary>Removes a specified label override from this
collection.</summary>
            <param name="labelOverride">The label override marker to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.LabelOverrideCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.LegendBox">
            <summary>Encapsulates a collection of LegendEntry objects.</summary>
            <remarks>The legend box has many options such as positioning, source
of entries and more. See legend box tutorial for more info.</remarks>
        </member>
        <member name="M:dotnetCHARTING.LegendBox.#ctor">
            <summary>Initializes a new instance of the LegendBox
class.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendBox.ColumnAlignments">
            <summary>Gets or sets an array of StringAlignment enumeration members
that specify the alignment of each column respectively. This
setting applies for all legend entries in this legend box.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendBox.DataSource">
            <summary>Source of objects to populate the legend with.</summary>
            <remarks>This DataSource is used with custom legend boxes added to
Chart.ExtraLegendBoxes.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendBox.DefaultEntry">
            <summary>Gets or sets a
LegendEntry
that behaves as a vehicle for property settings that will propagate
to all entries in this LegendBox.</summary>
            <remarks>The property settings of this object will not overwrite
properties explicitly set for any given
LegendEntry.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendBox.ExtraEntries">
            <summary>Gets a collection of additional
LegendEntry
objects that are added to this LegendBox.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendBox.HeaderEntry">
            <summary>Gets or sets a
LegendEntry
that is used as a header of this LegendBox.</summary>
            <remarks>This entry is not visible by default. To use it, set
HeaderEntry.Visible = true. By default this object has different
style settings that accentuate the fact that it is a header.
Additional headers can be added to the

ExtraEntries collection.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendBox.Label">
            <summary>Obsolete, please use LegendBox.LabelStyle instead.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendBox.LabelStyle">
            <summary>Gets or sets a
Label object
that encapsulates default label style properties applied to legend
entries drawn in this LegendBox.</summary>
            <remarks>This property is the equivalent of
LegendBox.DefaultEntry.LabelStyle.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendBox.ListTopToBottom">
            <summary>Gets or sets a value that indicates whether legend entries
are listed top to bottom in multi-column legend boxes.</summary>
            <remarks>When false, entries are listed left to right across columns
in multi-column legend boxes.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendBox.Template">
            <summary>Gets or sets the legend entry column layout of this legend
box.</summary>
            <remarks>    Three tokens native to the legend box are:
    
        /Icon - Draws a LegendEntry object's icon
        (LegendEntry.Marker).
        /Name - Writes the legend entry's name
        (LegendEntry.Name).
        /Value - Writes the legend entry's value
        (LegendEntry.Value).
    
    NOTE: Legend entry properties like
    LegendEntry.Name can contain tokens used with the object the
    legend entry represents.
    
    
    Some examples of properly formed templates are:
    
    LegendBox.Template = "/Icon/Name/Value"
    
    LegendBox.Template = "/Name/Icon"</remarks>
        </member>
        <member name="T:dotnetCHARTING.LegendBoxCollection">
            <summary>Contains a collection of LegendBox objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.LegendBoxCollection.#ctor(dotnetCHARTING.LegendBox[])">
            <summary>Creates a new instance of LegendBoxCollection with the
specified list of LegendBox objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.LegendBoxCollection.Add">
            <summary>Adds a specified LegendBoxCollection to this
collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.LegendBoxCollection.Add(dotnetCHARTING.LegendBoxCollection)">
            <summary>Adds a specified LegendBoxCollection to this
collection.</summary>
            <param name="legendBoxCollection">The LegendBoxCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendBoxCollection.Add(dotnetCHARTING.LegendBox[])">
            <summary>Adds the specified LegendBox objects to this
collection.</summary>
            <param name="legendBoxList">A list of LegendBox objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendBoxCollection.Contains(dotnetCHARTING.LegendBox)">
            <summary>Determines whether this collection contains a specified
LegendBox.</summary>
            <returns>true if the specified LegendBox belongs to this collection;
otherwise, false.</returns>
            <param name="legendBox">The LegendBox to find.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendBoxCollection.IndexOf(dotnetCHARTING.LegendBox)">
            <summary>Determines the index of a specified LegendBox in this
collection.</summary>
            <returns>The zero-based index of the specified LegendBox.</returns>
            <param name="legendBox">The LegendBox to find.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendBoxCollection.Insert(System.Int32,dotnetCHARTING.LegendBox)">
            <summary>Inserts a LegendBox into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the LegendBox.</param>
            <param name="legendBox">The LegendBox to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendBoxCollection.Remove(dotnetCHARTING.LegendBox)">
            <summary>Removes a specified LegendBox from this collection.</summary>
            <param name="legendBox">The LegendBox to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.LegendBoxCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.LegendEntry">
            <summary>Represents an entry in the legend box.</summary>
        </member>
        <member name="M:dotnetCHARTING.LegendEntry.#ctor">
            <summary>Initializes a new instance of the
LegendEntry class.</summary>
        </member>
        <member name="M:dotnetCHARTING.LegendEntry.#ctor">
            <summary>Initializes a new instance of the
LegendEntry class.</summary>
        </member>
        <member name="M:dotnetCHARTING.LegendEntry.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the
LegendEntry class with a
Name
and
Value.</summary>
            <param name="nameString">Sets the
LegendEntry.
Name property.</param>
            <param name="valueString">Sets the
LegendEntry.
Value property.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendEntry.#ctor(System.String,System.String,dotnetCHARTING.Background)">
            <summary>Initializes a new instance of the
LegendEntry class with a
Name,
Value
and icon background.</summary>
            <param name="nameString">Sets the
LegendEntry.
Name property.</param>
            <param name="valueString">Sets the
LegendEntry.
Value property.</param>
            <param name="iconBackground">Sets the LegendEntry.Background.Color property.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendEntry.#ctor(System.String,System.String,System.Drawing.Color)">
            <summary>Initializes a new instance of the
LegendEntry class with a
Name,
Value
and icon color.</summary>
            <param name="nameString">Sets the
LegendEntry.
Name property.</param>
            <param name="valueString">Sets the
LegendEntry.
Value property.</param>
            <param name="iconBackgroundColor">Sets the LegendEntry.Background.Color property.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendEntry.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the
LegendEntry class with a
Name,
Value
and icon background.</summary>
            <param name="nameString">Sets the
LegendEntry.
Name property.</param>
            <param name="valueString">Sets the
LegendEntry.
Value property.</param>
            <param name="iconString">Sets the string representation of the icon.</param>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.Background">
            <summary>Gets or sets a Background object that influences how the
entry's icon is drawn.</summary>
            <remarks>This object is used with the following settings
LegendEntry.SeriesType = SeriesType.Column</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.CustomAttributes">
            <summary>Gets or sets a ListCollection that represents additional
entry attributes.</summary>
            <remarks>In addition to name, value, and icon, the legend entry can
contain further information such as descriptions or comments. These
attributes will appear in a legend box when the LegendBox.Template
string contains the custom attribute key prefixed with a
''.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.DashStyle">
            <summary>Gets or sets a line DashStyle that influences how the entry's
icon is drawn.</summary>
            <remarks>This object is used with the following settings
LegendEntry.SeriesType = SeriesType.Marker
LegendEntry.In3D = false</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.DataSource">
            <summary>Gets or sets a DataSource object used to replace
tokens.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.DividerLine">
            <summary>Gets or sets a Line that is drawn under the
LegendEntry.</summary>
            <remarks>This line doesn't appear automatically because it's color
(LegendEntry.Line.Color) is Color.Empty. To activate it, specify a
color for the line. When active, it will add more space between the
this entry and the one below it.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.HeaderMode">
            <summary>Gets or sets an a LegendEntryHeaderMode enumeration that
specifies a how this LegendEntry behaves.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.Hotspot">
            <summary>Gets or sets the Hotspot of this LegendEntry.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.LabelStyle">
            <summary>Gets or sets a Label object that defines the font and color
of this LegendEntry object's text.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.Marker">
            <summary>Gets or sets an ElementMarker that influences how the entry's
icon is drawn.</summary>
            <remarks>To draw only this marker as the icon, set
LegendEntry.SeriesType = SeriesType.Marker.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.Name">
            <summary>Gets or sets the name of this legend entry.</summary>
            <remarks>Tokens may be used to describe the object represented by this
legend entry.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.PaddingTop">
            <summary>Gets or sets a value (in pixels) that specifies additional
padding above this LegendEntry object.</summary>
            <remarks>This property is useful when the LegendEntry
is a header and starts a new group of entries. Additional spacing
may be required between the groups to accentuate the separation
between groups.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.SeriesType">
            <summary>Gets or sets a SeriesType that influences how the entry's
icon is drawn.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.ShapeType">
            <summary>Gets or sets the shape type of this legend entry icon when
LegendEntry.SeriesType = SeriesType.BubbleShape.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.SortOrder">
            <summary>Gets or sets a value that represents the sort position of
this LegenEntry when sorted with other entries in
a LegendBox.</summary>
            <remarks>The default sort value of all legend entries is zero (0). To
indicate that an entry is first in a legend box, set this property
to -1.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.ToolTip">
            <summary>Gets or sets this legend entry's tool tip.</summary>
            <remarks>Tokens may be used to describe the object represented by this
legend entry.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.URL">
            <summary>Gets or sets the URL of this legend entry.</summary>
            <remarks>Tokens may be used to describe the object represented by this
legend entry.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.URLTarget">
            <summary>Gets or sets the URL target of this legend entry's
link.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.Use3D">
            <summary>Gets or sets a value that specifies whether icons represent
2D or 3D series.</summary>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.Value">
            <summary>Gets or sets the value of this legend entry.</summary>
            <remarks>This string specified in the legend box column
Template
by the token 'Value'.</remarks>
        </member>
        <member name="P:dotnetCHARTING.LegendEntry.Visible">
            <summary>Gets or sets a value which specifies whether the legend entry
is visible.</summary>
        </member>
        <member name="T:dotnetCHARTING.LegendEntryCollection">
            <summary>Contains a collection of LegendEntry objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.LegendEntryCollection.#ctor(dotnetCHARTING.LegendEntry[])">
            <summary>Creates a new instance of LegendEntryCollection with the
specified list of LegendEntry objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.LegendEntryCollection.Add">
            <summary>Adds a specified LegendEntry class to this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.LegendEntryCollection.Add(dotnetCHARTING.LegendEntry)">
            <summary>Adds a specified LegendEntry class to this collection.</summary>
            <returns>The zero-based index of the added LegendEntry.</returns>
            <param name="legendEntry">The LegendEntry to add.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendEntryCollection.Add(dotnetCHARTING.LegendEntryCollection)">
            <summary>Adds a specified LegendEntryCollection to this
collection.</summary>
            <param name="legendEntryCollection">The LegendEntryCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendEntryCollection.Add(dotnetCHARTING.LegendEntry[])">
            <summary>Adds the specified LegendEntry objects to this
collection.</summary>
            <param name="legendEntryList">A list of LegendEntry objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendEntryCollection.Contains(dotnetCHARTING.LegendEntry)">
            <summary>Determines whether this collection contains a specified
LegendEntry.</summary>
            <returns>true if the specified LegendEntry belongs to this collection;
otherwise, false.</returns>
            <param name="legendEntry">The LegendEntry to find.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendEntryCollection.IndexOf(dotnetCHARTING.LegendEntry)">
            <summary>Determines the index of a specified LegendEntry in this
collection.</summary>
            <returns>The zero-based index of the specified LegendEntry.</returns>
            <param name="legendEntry">The LegendEntry to find.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendEntryCollection.Insert(System.Int32,dotnetCHARTING.LegendEntry)">
            <summary>Inserts a legend entry into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the legend entry.</param>
            <param name="legendEntry">The legend entry to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.LegendEntryCollection.Remove(dotnetCHARTING.LegendEntry)">
            <summary>Removes a specified legend entry from this collection.</summary>
            <param name="legendEntry">The legend element to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.LegendEntryCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.Line">
            <summary>Defines styling used to draw a line or curve.</summary>
        </member>
        <member name="M:dotnetCHARTING.Line.#ctor">
            <summary>Initialize a new instance of the Line.</summary>
        </member>
        <member name="M:dotnetCHARTING.Line.#ctor">
            <summary>Initialize a new instance of the Line.</summary>
        </member>
        <member name="M:dotnetCHARTING.Line.#ctor(System.Drawing.Color)">
            <summary>Initialize a new instance of the Line class with a
color.</summary>
            <param name="c">Color of the line.</param>
        </member>
        <member name="M:dotnetCHARTING.Line.#ctor(System.Drawing.Color,System.Drawing.Drawing2D.DashStyle)">
            <summary>Initialize a new instance of the Line class with a color and
DashStyle.</summary>
            <param name="c">Color of the line.</param>
            <param name="ds">DashStyle of this line.</param>
        </member>
        <member name="M:dotnetCHARTING.Line.#ctor(System.Drawing.Color,System.Int32)">
            <summary>Initialize a new instance of the Line class with a color and
line width.</summary>
            <param name="c">Color of the line.</param>
            <param name="width">Width of the line.</param>
        </member>
        <member name="M:dotnetCHARTING.Line.#ctor(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>Initialize a new instance of the Line class with a color,
line width, and .</summary>
        </member>
        <member name="P:dotnetCHARTING.Line.AnchorCapScale">
            <summary>Gets or sets the amount by which to scale the line caps with
respect to the width of the line. This feature only works with
anchor LineCap members.</summary>
        </member>
        <member name="P:dotnetCHARTING.Line.Color">
            <summary>Gets or sets the color of this line.</summary>
        </member>
        <member name="P:dotnetCHARTING.Line.DashStyle">
            <summary>Gets or sets the DashStyle of this line.</summary>
        </member>
        <member name="P:dotnetCHARTING.Line.EndCap">
            <summary>Gets or sets the LineCap that ends this line.</summary>
        </member>
        <member name="P:dotnetCHARTING.Line.Length">
            <summary>Gets or sets the length of this line.</summary>
            <remarks>Only used with the TickLine property and represents the tick
line length.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Line.StartCap">
            <summary>Gets or sets the LineCap that starts this line.</summary>
        </member>
        <member name="P:dotnetCHARTING.Line.Width">
            <summary>Gets or sets the width of this line.</summary>
        </member>
        <member name="T:dotnetCHARTING.ListCollection">
            <summary>A list dictionary variation that allows adding items of the
string type using a string.</summary>
            <remarks>    Strings used to add items use the following
    syntax:
    "Key1=Value2,Key2=Value2"</remarks>
        </member>
        <member name="M:dotnetCHARTING.ListCollection.Add">
            <summary>Adds a single or multiple items using a string.</summary>
        </member>
        <member name="M:dotnetCHARTING.ListCollection.Add(System.String)">
            <summary>Adds a single or multiple items using a string.</summary>
        </member>
        <member name="M:dotnetCHARTING.ListCollection.FromDictionary(System.Collections.Specialized.ListDictionary)">
            <summary>Creates a ListCollection object from a ListDictionary.</summary>
            <param name="ld">ListDictionary to instantiate with.</param>
        </member>
        <member name="T:dotnetCHARTING.Parameter">
            <summary>Represents an SQL parameter to use with a
StoredProcedure.</summary>
        </member>
        <member name="M:dotnetCHARTING.Parameter.#ctor">
            <summary>Initializes a new instance of the Parameter class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Parameter.#ctor">
            <summary>Initializes a new instance of the Parameter class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Parameter.#ctor(System.String,System.String,dotnetCHARTING.FieldType)">
            <summary>Initializes a new instance of the Parameter class with a
name, value, and FieldType.</summary>
            <param name="pName">Name of the parameter.</param>
            <param name="pValue">Value of the parameter.</param>
            <param name="pType">FieldType of the parameter.</param>
        </member>
        <member name="P:dotnetCHARTING.Parameter.Name">
            <summary>Gets or sets the parameter name.</summary>
        </member>
        <member name="P:dotnetCHARTING.Parameter.Type">
            <summary>Gets or sets the parameter's FieldType.</summary>
        </member>
        <member name="P:dotnetCHARTING.Parameter.Value">
            <summary>Gets or sets the parameter's value.</summary>
        </member>
        <member name="T:dotnetCHARTING.ParameterCollection">
            <summary>Contains a collection of Parameter objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.ParameterCollection.Add">
            <summary>Adds a specified Parameter class to this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.ParameterCollection.Add(dotnetCHARTING.Parameter)">
            <summary>Adds a specified Parameter class to this collection.</summary>
            <returns>The zero-based index of the added Parameter.</returns>
            <param name="_Parameter">The Parameter to add.</param>
        </member>
        <member name="M:dotnetCHARTING.ParameterCollection.Add(dotnetCHARTING.ParameterCollection)">
            <summary>Adds a specified ParameterCollection to this
collection.</summary>
            <param name="paramCollection">ParameterCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.ParameterCollection.Contains(dotnetCHARTING.Parameter)">
            <summary>Determines whether this collection contains a specified
Parameter.</summary>
            <returns>true if the specified Parameter belongs to this collection;
otherwise, false.</returns>
            <param name="_Parameter">The Parameter to find.</param>
        </member>
        <member name="M:dotnetCHARTING.ParameterCollection.Insert(System.Int32,dotnetCHARTING.Parameter)">
            <summary>Inserts a Parameter into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the Parameter.</param>
            <param name="_Parameter">The Parameter to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.ParameterCollection.Remove(dotnetCHARTING.Parameter)">
            <summary>Removes a specified Parameter from this collection.</summary>
            <param name="_Parameter">The Parameter to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.ParameterCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.ScaleRange">
            <summary>Represents a value or range of values on an axis scale.
Values can be numeric, DateTime, and string types.</summary>
        </member>
        <member name="M:dotnetCHARTING.ScaleRange.#ctor">
            <summary>Instantiates a ScaleRange class with a low and high
value.</summary>
        </member>
        <member name="M:dotnetCHARTING.ScaleRange.#ctor(System.Object,System.Object)">
            <summary>Instantiates a ScaleRange class with a low and high
value.</summary>
            <param name="lowValue">Low value.</param>
            <param name="highValue">High value.</param>
        </member>
        <member name="P:dotnetCHARTING.ScaleRange.IncludeInAxisScale">
            <summary>Gets or sets a value indicating whether an AxisTick or
AxisMarker object using this ScaleRange will force
the axis to expand it's scale to show it.</summary>
        </member>
        <member name="P:dotnetCHARTING.ScaleRange.Value">
            <summary>Gets or sets the numeric, DateTime, or text value of this
ScaleRange.</summary>
            <remarks>When Value is specified, ValueLow and
ValueHigh are both set to this value. When ValueLow and ValueHigh
are equivalent, this AxisMarker is represented by the Line object,
otherwise, Background fills the range between ValueLow and
ValueHigh.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ScaleRange.ValueHigh">
            <summary>Gets or sets the upper bounds of a numeric, DateTime, or text
range.</summary>
            <remarks>When ValueLow and ValueHigh are equivalent, this AxisMarker
is represented by the Line object, otherwise, Background fills the
range between ValueLow and ValueHigh.</remarks>
        </member>
        <member name="P:dotnetCHARTING.ScaleRange.ValueLow">
            <summary>Gets or sets the lower bounds of a numeric, DateTime, or text
range.</summary>
            <remarks>When ValueLow and ValueHigh are equivalent, this AxisMarker
is represented by the Line object, otherwise, Background fills the
range between ValueLow and ValueHigh.</remarks>
        </member>
        <member name="T:dotnetCHARTING.ScaleRangeCollection">
            <summary>Contains a collection of ScaleRange objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.ScaleRangeCollection.#ctor(dotnetCHARTING.ScaleRange[])">
            <summary>Creates a new instance of ScaleRangeCollection with the
specified list of ScaleRange objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.ScaleRangeCollection.Add">
            <summary>Adds a specified ScaleRangeCollection to this
collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.ScaleRangeCollection.Add(dotnetCHARTING.ScaleRangeCollection)">
            <summary>Adds a specified ScaleRangeCollection to this
collection.</summary>
            <param name="scaleRangeCollection">The ScaleRangeCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.ScaleRangeCollection.Add(dotnetCHARTING.ScaleRange[])">
            <summary>Adds the specified ScaleRange objects to this
collection.</summary>
            <param name="scaleRangeList">A list of ScaleRange objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.ScaleRangeCollection.Add(dotnetCHARTING.ScaleRange)">
            <summary>Adds a specified ScaleRange class to this collection.</summary>
            <returns>The zero-based index of the added ScaleRange.</returns>
            <param name="_ScaleRange">The ScaleRange to add.</param>
        </member>
        <member name="M:dotnetCHARTING.ScaleRangeCollection.Contains(dotnetCHARTING.ScaleRange)">
            <summary>Determines whether this collection contains a specified
ScaleRange.</summary>
            <returns>true if the specified ScaleRange belongs to this collection;
otherwise, false.</returns>
            <param name="_ScaleRange">The ScaleRange to find.</param>
        </member>
        <member name="M:dotnetCHARTING.ScaleRangeCollection.Insert(System.Int32,dotnetCHARTING.ScaleRange)">
            <summary>Inserts a ScaleRange into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the ScaleRange.</param>
            <param name="_ScaleRange">The ScaleRange to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.ScaleRangeCollection.Remove(dotnetCHARTING.ScaleRange)">
            <summary>Removes a specified ScaleRange from this collection.</summary>
            <param name="_ScaleRange">The ScaleRange to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.ScaleRangeCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.Series">
            <summary>Encapsulates a group of elements.</summary>
            <remarks>    The series represents a group of elements and also: 
    
        Provides a mechanism for setting default properties
        of all elements within it.
        Controls all series specific properties such as it's
        LegendEntry or 2D line dash style (if applicable).
        Derives an element based on a Calculation performed
        on the elements within it.
        Provides data manipulation methods such as sorting
        and trimming of it's elements.
    
    See
    also:
    Data Model Tutorial</remarks>
        </member>
        <member name="M:dotnetCHARTING.Series.#ctor">
            <summary>Initializes a new instance of the Series
class with a name and the specified Elements.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.#ctor">
            <summary>Initializes a new instance of the Series class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.#ctor(System.String)">
            <summary>Initializes a new instance of the Series class with a
name.</summary>
            <param name="name">Name of the series.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.#ctor(System.String,dotnetCHARTING.Element[])">
            <summary>Initializes a new instance of the Series
class with a name and the specified Elements.</summary>
            <param name="name">Name of the series.</param>
            <param name="elementList">List of Element objects added to the series.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.#ctor(System.String,dotnetCHARTING.ElementCollection)">
            <summary>Initializes a new instance of the Series class with a name
and the specified ElementCollection.</summary>
            <remarks>The ElementCollection object itself is not used by the
series. The elements are copied to this series'
ElementCollection.</remarks>
            <param name="name">Name of the new series.</param>
            <param name="elementCollection">Collection of elements assigned to this series.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.#ctor(System.String,dotnetCHARTING.SeriesType)">
            <summary>Initializes a new instance of the Series class with a name
and SeriesType.</summary>
            <param name="name">Name of the series.</param>
            <param name="seriesType">Series type of the series.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Add">
            <summary>Adds two Series objects together.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.Add(dotnetCHARTING.Series,dotnetCHARTING.Series)">
            <summary>Adds two Series objects together.</summary>
            <remarks>All element values such as YValue, XValue etc. are added
based on element names. This means that only elements with the same
name will be computed.</remarks>
            <returns/>
            <param name="lhs">Left hand side Series.</param>
            <param name="rhs">Right hand side Series.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Add(System.Double,dotnetCHARTING.Series)">
            <summary>Adds a value to all elements in the rhs series.</summary>
            <returns/>
            <param name="lhs">A double value.</param>
            <param name="rhs">A series.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Add(dotnetCHARTING.Series,System.Double)">
            <summary>Adds a value to all elements in the rhs series.</summary>
            <returns/>
            <param name="lhs">A series.</param>
            <param name="rhs">A double value.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.AddElements">
            <summary>Adds the elements of the specified series to this
series.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.AddElements(dotnetCHARTING.Series)">
            <summary>Adds the elements of the specified series to this
series.</summary>
            <param name="fromSeries">Series whose elements will be added.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.AddElements(dotnetCHARTING.Element[])">
            <summary>Adds the specified elements to this series.</summary>
            <param name="elementList">A list of elements to add</param>
        </member>
        <member name="M:dotnetCHARTING.Series.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)">
            <summary>Adds a stored procedure when to use in conjunction with
StoredProcedure.</summary>
            <remarks>This method is optionally used in conjunction with the
StoredProcedure property to specify any number of parameters for
the stored proc. A number of field types are supported.
de.AddParameter("MyParameter","MyValue",FieldType.Text)</remarks>
        </member>
        <member name="M:dotnetCHARTING.Series.Calculate(System.String,dotnetCHARTING.Calculation)">
            <summary>Performs a Calculation on current instance of this
series.</summary>
            <returns>Returns an Element object based on the specified
Calculation.</returns>
            <param name="name">Name of the returned element.</param>
            <param name="calculation">The calculation to perform.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Divide">
            <summary>Divides the element values of the series on the left by the
element values of the series on the right.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.Divide(dotnetCHARTING.Series,dotnetCHARTING.Series)">
            <summary>Divides the element values of the series on the left by the
element values of the series on the right.</summary>
            <returns/>
            <remarks>All element values such as YValue, XValue etc. are divided
based on element names. This means that only elements with the same
name will be computed.</remarks>
            <param name="lhs">Dividend series.</param>
            <param name="rhs">Divisor series.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Divide(System.Double,dotnetCHARTING.Series)">
            <summary>Divides the value on the left by the series on the
right.</summary>
            <returns/>
            <param name="lhs">Dividend number.</param>
            <param name="rhs">Divisor series.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Divide(dotnetCHARTING.Series,System.Double)">
            <summary>Divides the series on the left by the value on the
right.</summary>
            <returns/>
            <param name="lhs">Dividend series.</param>
            <param name="rhs">Divisor number.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.FromYValues">
            <summary>Creates a named series of element with the specified y
values.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.FromYValues(System.String,System.Double[])">
            <summary>Creates a named series of element with the specified y
values.</summary>
            <param name="name">Name of resulting Series.</param>
            <param name="yValues">YValues of resulting elements.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.FromYValues(System.Double[])">
            <summary>Creates a series of element with the specified y
values.</summary>
            <param name="yValues">YValues of resulting elements.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.GetDataSource">
            <summary>Gets a DataSource object representing this
Series.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.GetSmartPalette">
            <summary>Generates a
SmartPalette
object that contains the names of the elements in this
Series matched with the specified Palette
enumeration.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.GetSmartPalette(dotnetCHARTING.Palette)">
            <summary>Generates a
SmartPalette
object that contains the names of the elements in this
Series matched with the specified Palette
enumeration.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.GetSmartPalette(System.Drawing.Color[])">
            <summary>Generates a
SmartPalette
object that contains the names of the elements in this
Series matched with the specified array of Color
objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.Multiply">
            <summary>Multiplies two Series objects together.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.Multiply(dotnetCHARTING.Series,dotnetCHARTING.Series)">
            <summary>Multiplies two Series objects together.</summary>
            <returns/>
            <remarks>All element values such as YValue, XValue etc. are multiplied
based on element names. This means that only elements with the same
name will be computed.</remarks>
            <param name="lhs">Left hand side Series.</param>
            <param name="rhs">Right hand side Series.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Multiply(System.Double,dotnetCHARTING.Series)">
            <summary>Multiplies a series by a value.</summary>
            <returns/>
            <param name="lhs">Number multiplied by.</param>
            <param name="rhs">Series multiplied by.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Multiply(dotnetCHARTING.Series,System.Double)">
            <summary>Multiplies a series by a value.</summary>
            <returns/>
            <param name="lhs">Series multiplied by.</param>
            <param name="rhs">Series multiplied by.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Sort">
            <summary>Sorts the Elements based on an element property and
order.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.Sort(dotnetCHARTING.ElementValue,System.String)">
            <summary>Sorts the Elements based on an element property and
order.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.Sort(dotnetCHARTING.ElementValue,System.String,System.Int32,System.Int32)">
            <summary>Sorts the Elements based on an element property and order
from the start index to the end index.</summary>
            <param name="ev">ElementValue to sort by.</param>
            <param name="order">Takes "Desc" or "Asc" as inputs. If the string is not
recognized "Asc" will be used.</param>
            <param name="startIndex">Index at which sorting starts.</param>
            <param name="endIndex">Index at which sorting stops.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Split(dotnetCHARTING.TimeIntervalAdvanced)">
            <summary>Splits the elements into individual series per the specified
TimeIntervalAdvanced.</summary>
            <remarks>The splitting is based on the element's XDateTime
property.</remarks>
            <param name="tia">The TimeIntervalAdvanced that specifies the split
intervals.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.SplitRegroup(dotnetCHARTING.TimeIntervalAdvanced,dotnetCHARTING.TimeIntervalAdvanced)">
            <summary>    Splits the elements based on the first split, then the
    resulting series are grouped based on the second split. A
    simple analogy is a stretch of measuring tape representing a
    timeline. The tape is cut into sections based on (first split),
    then the pieces are stacked on top of each other and cut again
    based on the second split. The resulting stacks are evaluated
    down to an element based on the specified calculation.
    As a real world example, consider you have a series with
    web site traffic represented by an element for each time the
    website was visited including a date and time. This method can
    parse the data in a way that allows determining the traffic for
    each day of the week throughout the entire span of time. This
    means all the traffic going through the website on any monday
    would be calculated down to a single element, same for tuesday
    and so on.
    This illustration may shows how the data is
    arranged.
    
    </summary>
        </member>
        <member name="M:dotnetCHARTING.Series.SplitRegroupCalculate">
            <summary>    Splits the elements based on the first split, then the
    resulting series are grouped based on the second split. A
    simple analogy is a stretch of measuring tape representing a
    timeline. The tape is cut into sections based on (first split),
    then the pieces are stacked on top of each other and cut again
    based on the second split. The resulting stacks are evaluated
    down to an element based on the specified calculation.
    As a real world example, consider you have a series with
    web site traffic represented by an element for each time the
    website was visited including a date and time. This method can
    parse the data in a way that allows determining the traffic for
    each day of the week throughout the entire span of time. This
    means all the traffic going through the website on any monday
    would be calculated down to a single element, same for tuesday
    and so on.
    This illustration may shows how the data is
    arranged.
    
    </summary>
        </member>
        <member name="M:dotnetCHARTING.Series.SplitRegroupCalculate(dotnetCHARTING.TimeIntervalAdvanced,dotnetCHARTING.TimeIntervalAdvanced,dotnetCHARTING.Calculation)">
            <summary>    Splits the elements based on the first split, then the
    resulting series are grouped based on the second split. A
    simple analogy is a stretch of measuring tape representing a
    timeline. The tape is cut into sections based on (first split),
    then the pieces are stacked on top of each other and cut again
    based on the second split. The resulting stacks are evaluated
    down to an element based on the specified calculation.
    As a real world example, consider you have a series with
    web site traffic represented by an element for each time the
    website was visited including a date and time. This method can
    parse the data in a way that allows determining the traffic for
    each day of the week throughout the entire span of time. This
    means all the traffic going through the website on any monday
    would be calculated down to a single element, same for tuesday
    and so on.
    This illustration may shows how the data is
    arranged.
    
    </summary>
            <param name="firstSplit">First split of the data.</param>
            <param name="secondSplit">Second split used to group results from the first
split.</param>
            <param name="calculation">Calculation performed on elements when grouped by the second
split into a single element.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.SplitRegroupCalculate(dotnetCHARTING.TimeIntervalAdvanced,dotnetCHARTING.TimeIntervalAdvanced,dotnetCHARTING.Calculation,System.String,System.Boolean)">
            <summary>    Splits the elements based on the first split, then the
    resulting series are grouped based on the second split. A
    simple analogy is a stretch of measuring tape representing a
    timeline. The tape is cut into sections based on (first split),
    then the pieces are stacked on top of each other and cut again
    based on the second split. The resulting stacks are evaluated
    down to an element based on the specified calculation.
    As a real world example, consider you have a series with
    web site traffic represented by an element for each time the
    website was visited including a date and time. This method can
    parse the data in a way that allows determining the traffic for
    each day of the week throughout the entire span of time. This
    means all the traffic going through the website on any monday
    would be calculated down to a single element, same for tuesday
    and so on.
    This illustration may shows how the data is
    arranged.
    
    </summary>
            <param name="firstSplit">First split of the data.v</param>
            <param name="secondSplit">Second split used to group results from the first
split.</param>
            <param name="calculation">Calculation performed on elements when grouped by the second
split into a single element.</param>
            <param name="elementNameFormatString">Providing a format string will evaluate the grouped element's
xDateTime based on this format string and it will become the
resulting element's name.</param>
            <param name="popuulateSubValues">If true, the values from the elements that are grouped into a
single element will propagate into the new element as
subvalues.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Subtract">
            <summary>Subtracts the element values of series on the right from the
series on the left.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.Subtract(dotnetCHARTING.Series,dotnetCHARTING.Series)">
            <summary>Subtracts the element values of series on the right from the
series on the left.</summary>
            <remarks>All element values such as YValue, XValue etc. are subtracted
based on element names. This means that only elements with the same
name will be computed.</remarks>
            <returns/>
            <param name="lhs">Series subtracted from.</param>
            <param name="rhs">Series subtracted by.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Subtract(System.Double,dotnetCHARTING.Series)">
            <summary>Subtracts all element values from the left hand side
number.</summary>
            <returns/>
            <param name="lhs">Number subtracted from.</param>
            <param name="rhs">Series subtracted by.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Subtract(dotnetCHARTING.Series,System.Double)">
            <summary>Subtracts the number on the right hand side from the element
values of the series on the left.</summary>
            <returns/>
            <param name="lhs">Series subtracted from.</param>
            <param name="rhs">Number subtracted by.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Trim">
            <summary>Trims elements out of this series based on a specified
numeric range and element property.</summary>
        </member>
        <member name="M:dotnetCHARTING.Series.Trim(System.Double,System.Double,dotnetCHARTING.ElementValue)">
            <summary>Trims elements out of this series based on a specified
numeric range and element property.</summary>
            <remarks>The ElementValue specified must be a numeric property.</remarks>
            <param name="Low">Numeric minimum of the range.</param>
            <param name="High">Numeric maximum of the range.</param>
            <param name="ev">The ElementValue the range is compared to.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Trim(dotnetCHARTING.ScaleRange,dotnetCHARTING.ElementValue)">
            <summary>Trims the elements with values outside the specified
dotnetCHARTING.ScaleRange.</summary>
            <param name="range">Range outside of which to trim elements.</param>
            <param name="ev">The ElementValue the range is compared to.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Trim(System.DateTime,System.DateTime,dotnetCHARTING.ElementValue)">
            <summary>Trims elements out of this series based on a specified time
range and element property.</summary>
            <remarks>The ElementValue specified must be a DateTime
property.</remarks>
            <param name="Low">DateTime minimum of the range.</param>
            <param name="High">DateTime maximum of the range.</param>
            <param name="ev">The ElementValue the range is compared to.</param>
        </member>
        <member name="M:dotnetCHARTING.Series.Trim(dotnetCHARTING.CalendarPattern,dotnetCHARTING.ElementValue)">
            <summary>Trims elements out of this series based on a specified
dotnetCHARTING.CalendarPattern and element property.</summary>
            <param name="cp">CalendarPattern used to trim the series.</param>
            <param name="ev">ElementValue to match against the calendar pattern.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Addition">
            <summary>Adds two Series objects together.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Addition">
            <summary>Adds a value to all elements in the rhs series.</summary>
            <returns/>
            <param name="lhs">A double value.</param>
            <param name="rhs">A series.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Addition">
            <summary>Adds a value to all elements in the rhs series.</summary>
            <returns/>
            <param name="lhs">A series.</param>
            <param name="rhs">A double value.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Addition">
            <summary>Adds two Series objects together.</summary>
            <remarks>All element values such as YValue, XValue etc. are added
based on element names. This means that only elements with the same
name will be computed.</remarks>
            <returns/>
            <param name="lhs">Left hand side Series.</param>
            <param name="rhs">Right hand side Series.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Division">
            <summary>Divides the element values of the series on the left by the
element values of the series on the right.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Division">
            <summary>Divides the value on the left by the series on the
right.</summary>
            <returns/>
            <param name="lhs">Dividend number.</param>
            <param name="rhs">Divisor series.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Division">
            <summary>Divides the series on the left by the value on the
right.</summary>
            <returns/>
            <param name="lhs">Dividend series.</param>
            <param name="rhs">Divisor number.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Division">
            <summary>Divides the element values of the series on the left by the
element values of the series on the right.</summary>
            <returns/>
            <remarks>All element values such as YValue, XValue etc. are divided
based on element names. This means that only elements with the same
name will be computed.</remarks>
            <param name="lhs">Dividend series.</param>
            <param name="rhs">Divisor series.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Multiply">
            <summary>Multiplies two Series objects together.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Multiply">
            <summary>Multiplies a series by a value.</summary>
            <returns/>
            <param name="lhs">Number multiplied by.</param>
            <param name="rhs">Series multiplied by.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Multiply">
            <summary>Multiplies a series by a value.</summary>
            <returns/>
            <param name="lhs">Series multiplied by.</param>
            <param name="rhs">Series multiplied by.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Multiply">
            <summary>Multiplies two Series objects together.</summary>
            <returns/>
            <remarks>All element values such as YValue, XValue etc. are multiplied
based on element names. This means that only elements with the same
name will be computed.</remarks>
            <param name="lhs">Left hand side Series.</param>
            <param name="rhs">Right hand side Series.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Subtraction">
            <summary>Subtracts the element values of series on the right from the
series on the left.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Subtraction">
            <summary>Subtracts all element values from the left hand side
number.</summary>
            <returns/>
            <param name="lhs">Number subtracted from.</param>
            <param name="rhs">Series subtracted by.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Subtraction">
            <summary>Subtracts the number on the right hand side from the element
values of the series on the left.</summary>
            <returns/>
            <param name="lhs">Series subtracted from.</param>
            <param name="rhs">Number subtracted by.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.op_Subtraction">
            <summary>Subtracts the element values of series on the right from the
series on the left.</summary>
            <remarks>All element values such as YValue, XValue etc. are subtracted
based on element names. This means that only elements with the same
name will be computed.</remarks>
            <returns/>
            <param name="lhs">Series subtracted from.</param>
            <param name="rhs">Series subtracted by.</param>
        </member>
        <member name="P:dotnetCHARTING.Series.Background">
            <summary>Gets or sets the background object used to fill a gauge face
or radar associated with this series.</summary>
            <remarks>When using ChartType.Radar (single radar) use
Chart.DefaultSeries.Background to control the radar
background.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.CommandTimeout">
            <summary>    Gets or sets the wait time before terminating the attempt
    to execute a command and generating an error.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.ConnectionString">
            <summary>Sets the database connection string used when dynamically
obtaining charting data from a SQL statement.</summary>
            <remarks>This can be overridden or used in combination with the series
level connectionstring. Access, Excel and SQL server are supported
and automatically detected based on the connection string
specified. See Getting Started &gt; Tutorials &gt; Connecting to
data.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.Data">
            <summary>Gets or sets a DataTable, DataSet, DataView, XML file name,
XML string, or an object that implement IEnumerable, ArrayList or
HashTable used to generate a SeriesCollection.</summary>
            <remarks>When not connecting to a database directly using
ConnectionString and SqlStatement, this property can be used to
supply objects with data.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.DataFields">
            <summary>Gets or sets a value that specifies the 'database column' to
'chart data' relationship.</summary>
            <remarks>When programmatically setting a datatable or dataset, certain
columns are expected with specific names. This property allows you
to control the expected names.

See Getting Started &gt; Tutorials &gt; Data Fields for more
info.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.DataProviderType">
            <summary>Specifies a database type. Defaults to OleDb (Access
database).</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.DefaultElement">
            <summary>Gets or sets the an Element object whose properties will
trickle to all elements within this series.</summary>
            <remarks>The properties of this element instance will trickle down to
all elements within this series unless explicitly set for any
particular element.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.Element">
            <summary>Gets or sets an Element object which facilitates a shortcut
for adding elements to the chart.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.Elements">
            <summary>Gets or sets a collection of Element objects associated with
this series.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.EmptyElement">
            <summary>Gets or sets an EmptyElement object associated with this
series.</summary>
            <remarks>The properties of this empty element apply to all elements in
the Elements collection.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.EndDate">
            <summary>The ending date used with SqlStatement to query filtered data
from a database.</summary>
            <remarks>This property affects the date listed in the title when
Chart.ShowDateInTitle is used, it is also used for the SqlStatement
property where the #EndDate# token is replaced with the
value set to this property.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.HatchStylePalette">
            <summary>Gets or sets the hatch style palette used be the Elements of
this series.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.HatchStylePaletteName">
            <summary>Gets or sets a Palette boolean which indicates which static
palette will be used be the Elements of this series.

Note If used, legend behavior will be different.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.ImageBarTemplate">
            <summary>Gets or sets the path and file name of the image bar template
used when drawing elements of this series.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.Item(System.Int32)">
            <summary>Gets or sets an Element of this Series at a specified
index.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.LegendEntry">
            <summary>Gets or sets the legend entry properties of this
series.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.Limit">
            <summary>Gets or sets the limit number of elements returned for this
series when data is generated.</summary>
            <remarks>    This property determines the number of elements to
    include in the limited return in conjuction with
    LimitMode
    property. The limit string can be a number "3" or "2x3". In the
    second format, the first number determines the group positon
    and the second number is the limit. By setting "2x3" with top
    limit mode, it only return the second "3" maximum
    elements.
    
    Note: If DateGrouping is used limit has no effect, you can
    limit the return with the StartDate and EndDate in such a
    case.
    
    See also: Getting Started &gt; Tutorials &gt; Data
    Engine.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.LimitMode">
            <summary>Determine the type of limitation for
Limit
and
SplitByLimit
properties. Default is Top.</summary>
            <remarks>This property works in conjunction with
Limit
or
SplitByLimit
to determine which elements or series should be included or
excluded.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.Line">
            <summary>Gets or sets the line properties of this series.</summary>
            <remarks>This line object is used when the SeriesType of this series
is Line, Spline, or AreaLine and Use3D is false.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.Name">
            <summary>Gets or sets the name of this series.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.OtherElementText">
            <summary>Controls the label used for the aggregated datapoint / series
created when using Limit or SplitByLimit and setting ShowOther to
true.</summary>
            <remarks>See Getting Started &gt; Tutorials &gt; Data Engine for more
info.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.Palette">
            <summary>Gets or sets the palette which will be used by the Elements
of this series.

Note If used, legend behavior will be different.</summary>
            <remarks>When setting this property, each element will get it's own
color. Whereas by default, all elements within a series take their
color from Series.DefaultElement.Color. When the chart detects that
the elements have been individually colored, each element's
LegendEntry will replace the single legend entry of the series in
the legend box.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.PaletteName">
            <summary>Gets or sets a Palette enumeration which indicates which
static palette will be used by the Elements of this series.

Note If used, legend behavior will be different.</summary>
            <remarks>When setting this property, each element will get it's own
color. Whereas by default, all elements within a series take their
color from Series.DefaultElement.Color. When the chart detects that
the elements have been individually colored, each element's
LegendEntry will replace the single legend entry of the series in
the legend box.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.ParameterCollection">
            <summary>Gets or sets a collection of Parameter objects used in
conjunction with StoredProcedure</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.Position">
            <summary>Gets or sets the position of this series in relation to other
series when the chart is drawn.</summary>
            <remarks>Series with lower position values will be drawn closer to the
front.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.ShowOther">
            <summary>This property controls if the additional series not shown due
to the use of SplitByLimit, or the additional elements not shown
due to the use of Limit are aggregated into a single series /
element and graphed alongside the top x series / elements.</summary>
            <remarks>See Gettings Started &gt; Tutorials &gt; Data Engine for more
info.

The default is false.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.SplineTensionPercent">
            <summary>Gets or sets a value between 0 and 100 that specifies the
tension of a spline curve.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.SplitByLimit">
            <summary>Gets or sets the number of series created using
SplitBy.</summary>
            <remarks>    This property works with conjunction of
    LimitMode
    property and determines the number of series to include in the
    return. The limit string can be a number "3" or "2x3". In the
    second format, the first number determines the group positon
    and the second number is the limit. By setting "2x3" with top
    limit mode, it only return the second "3" maximum
    series.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.SqlStatement">
            <summary>The SQL statement used to obtain the charting data.</summary>
            <remarks>The first column returned is used for the X values, and the
second for the Y values. The first also has special handling if
dates are returned as the DateGrouping property can be used for
intelligent date handling and grouping. The third column is
optional and is used only for SplitBy. When a third column is set
it is used automatically to create a unique series based on each
unique value in this column.

NOTE: All date values in your SQL statements should be wrapped with
the pound symbol: #10/25/2002#, regardless if Access or SQL server
is used. Also the #StartDate# and #EndDate# tokens can be used in
which case the dates set for these properties will be set in place
of the tokens before the SqlStatement is executed.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.StartDate">
            <summary>The starting date used with SqlStatement to query filtered
data from a database.</summary>
            <remarks>    This property affects the date listed in the title when
    Chart.ShowDateInTitle is used, it is also used for the
    SqlStatement property where the #StartDate# token is
    replaced with the value set to this property.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.StoredProcedure">
            <summary>This property accepts the name of a stored procedure to be
used in place of the SqlStatement property in order to obtain data
for the chart.</summary>
            <remarks>See the SqlStatement property for details on how the return
columns are expected. Stored Procedures also work with parameters,
see the FieldType) method.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.TotalElements">
            <summary>Return the total number of elements in the elements
collection. This property usually used in conjunction with
Limit.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.Type">
            <summary>Gets or sets the type of this series.</summary>
            <remarks>This property accepts string,
SeriesType,
or dotnetCHARTING.SeriesTypeFinancial enumeration.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.Visible">
            <summary>Gets or sets a value which indicates whether the series is
visible.</summary>
            <remarks>This property is only valid when set through
Chart.Series.Visible. Setting this property on a lone Series
object would have no effect.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Series.XAxis">
            <summary>Gets or sets the x axis for this series.</summary>
        </member>
        <member name="P:dotnetCHARTING.Series.YAxis">
            <summary>Gets or sets the y axis for this series.</summary>
        </member>
        <member name="T:dotnetCHARTING.SeriesCollection">
            <summary>Contains a collection of Series objects.</summary>
            <remarks>    This class can also perform calculations and data
    manipulation on the series it contains.
    See
    also:
    Data Model Tutorial</remarks>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.#ctor">
            <summary>Initializes a new instance of the SeriesCollection
class.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.#ctor">
            <summary>Initializes a new instance of the SeriesCollection
class.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.#ctor(dotnetCHARTING.Series[])">
            <summary>Initializes a new instance of the SeriesCollection class and
adds the specified series to it.</summary>
            <param name="seriesList">List of Series to add to the collection.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Add">
            <summary>Provided as a shortcut for adding elements, series, and
series collections the chart SeriesCollection.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Add">
            <summary>Provided as a shortcut for adding elements, series, and
series collections the chart SeriesCollection.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.Calculation)">
            <summary>Adds a series to the collection based on the specified
calculation.</summary>
            <param name="calc">Calculation to perform on the collection.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.Calculation,System.String)">
            <summary>Adds a series calculated from a specified series.</summary>
            <returns/>
            <param name="calc">Calculation to perform</param>
            <param name="fromSeries">Name of the series to derrive a series from.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.Series)">
            <summary>Adds a specified Series class to this collection.</summary>
            <returns>The zero-based index of the added Series.</returns>
            <param name="series">The Series to add.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.SeriesCollection)">
            <summary>Adds a specified SeriesCollection to this collection.</summary>
            <param name="seriesCollection">The SeriesCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.Series[])">
            <summary>Adds the specified Series objects to this collection.</summary>
            <param name="seriesList">A list of Series objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.SeriesCollection[])">
            <summary>Adds Series of the specified SeriesCollection objects to this
collection.</summary>
            <param name="seriesCollectionList">A list of SeriesCollection objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Calculate">
            <summary>Performs a calculation on this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Calculate(System.String,dotnetCHARTING.Calculation)">
            <summary>Performs a calculation on this collection.</summary>
            <returns>Returns a series based on the specified calculation.</returns>
            <param name="label">Name of the returned series.</param>
            <param name="calc">The calculation to perform on this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Calculate(System.String,dotnetCHARTING.Calculation,System.Int32)">
            <summary>Performs a calculation on this collection with an extra
parameter.</summary>
            <remarks>Calculation.TrendLineLinear and
Calculation.TrendLineLinearScatter will yield result with extra
elements which simulate the continuance of a trend. Supplying the
ExtraParam parameter denotes the number of extra elements to
create.</remarks>
            <returns>Returns a series based on the specified calculation.</returns>
            <param name="label">Name of the returned series.</param>
            <param name="calc">The calculation to perform on this collection.</param>
            <param name="ExtraParam">Extra parameter.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Calculate(System.String,dotnetCHARTING.Calculation,dotnetCHARTING.Axis)">
            <summary>Performs a calculation on series in this collection that are
bound to the specified axis.</summary>
            <returns>Returns a series based on the specified calculation.</returns>
            <param name="label">The label of the returned series.</param>
            <param name="calc">The calculation to perform.</param>
            <param name="xAxis">The axis bound to data on which the calculation is
performed.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.CalculateElement(System.String,dotnetCHARTING.Calculation)">
            <summary>Performs a calculation on this collection.</summary>
            <returns>Returns an element based on the specified calculation.</returns>
            <param name="label">Name of the returned element.</param>
            <param name="calc">The calculation to perform on this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Contains(dotnetCHARTING.Series)">
            <summary>Determines whether this collection contains a specified
Series.</summary>
            <returns>true if the specified Series belongs to this collection;
otherwise, false.</returns>
            <param name="series">The Series to find.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetAxisSeries(dotnetCHARTING.Axis)">
            <summary>Gets a collection of series associated with the specified
axis.</summary>
            <returns>Returns a series collection.</returns>
            <param name="a">The axis bound to data which will be returned in a series
collection.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetDataSource">
            <summary>Gets a DataSource object representing this
SeriesCollection.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetElement">
            <summary>Gets an Element at the specified series and element
index.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetElement(System.Int32,System.Int32)">
            <summary>Gets an Element at the specified series and element
index.</summary>
            <returns>Returns an Element at the specified series and element
index.</returns>
            <param name="seriesIndex">Index of the series.</param>
            <param name="elementIndex">Indes of the element.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetElement(System.String,System.String)">
            <summary>Gets an Element with the specified name from a named
series.</summary>
            <returns>Returns an Element with a specified name from a named
series.</returns>
            <param name="seriesName">Series name.</param>
            <param name="elementName">Element name.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetProcessedDataTable">
            <summary>Returns a DataTable of processed data.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetProcessedDataTable(System.String)">
            <summary>Returns a DataTable of processed data.</summary>
            <returns>Returns a data table of the processed data.Returns a data
table of the processed data.</returns>
            <remarks>This method usually called in PostDataProcessing event
handler method when data generated dynamically from a database.
Then, the datatable can be displayed with dataGrid or other
controls.</remarks>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetProcessedDataTable(System.String,System.Boolean)">
            <summary>Returns a DataTable of processed data.</summary>
            <returns>Returns a data table of the processed data.Returns a data
table of the processed data.</returns>
            <remarks>This method usually called in PostDataProcessing event
handler method when data generated dynamically from a database.
Then, the datatable can be displayed with dataGrid or other
controls.</remarks>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetProcessedDataTable(System.String,System.Boolean,System.Boolean)">
            <summary>Returns a DataTable of processed data.</summary>
            <returns>Returns a data table of the processed data.Returns a data
table of the processed data.</returns>
            <remarks>This method usually called in PostDataProcessing event
handler method when data generated dynamically from a database.
Then, the datatable can be displayed with dataGrid or other
controls.</remarks>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetProcessedDataTable(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Returns a DataTable of processed data.</summary>
            <returns>Returns a data table of the processed data.</returns>
            <remarks>This method usually called in PostDataProcessing event
handler method when data generated dynamically from a database.
Then, the datatable can be displayed with dataGrid or other
controls.</remarks>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetSeries(System.String)">
            <summary>Retrieves the named Series.</summary>
            <returns>The named series.</returns>
            <param name="seriesName">Name of the series to get</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetSmartPalette">
            <summary>Generates a
SmartPalette
object that contains the names of series in this
SeriesCollection matched with the specified
Palette enumeration.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetSmartPalette(dotnetCHARTING.Palette)">
            <summary>Generates a
SmartPalette
object that contains the names of series in this
SeriesCollection matched with the specified
Palette enumeration.</summary>
            <param name="palette">Palette used to generate the SmartPalette object.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GetSmartPalette(System.Drawing.Color[])">
            <summary>Generates a
SmartPalette
object that contains the names of series in this
SeriesCollection matched with the specified array
of color objects.</summary>
            <param name="colors">Array of colors used to generate the SmartPalette.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.GroupByElements">
            <summary>Groups series into even element groups where every element
will have a matching element in all other series.</summary>
            <remarks>The result will be series of even number of elements with the
same names.</remarks>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.IndexOf(dotnetCHARTING.Series)">
            <summary>Determines the index of a specified Series in this
collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Insert(System.Int32,dotnetCHARTING.Series)">
            <summary>Inserts a series into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the series.</param>
            <param name="series">The series to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Remove(dotnetCHARTING.Series)">
            <summary>Removes a specified series from this collection.</summary>
            <param name="series">The series to remove.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Sort(dotnetCHARTING.ElementValue,System.String)">
            <summary>Sorts the Series based on an element property and
order.</summary>
            <param name="ev">ElementValue to sort by.</param>
            <param name="order">Takes "Desc" or "Asc" as inputs. If the string is not
recognized "Asc" will be used.</param>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Transpose">
            <summary>Transposes the data of this series collection. Data is
transposed by converting the series in this collection to elements
and the element groups into series.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Transpose">
            <summary>Transposes the data of this series collection. Data is
transposed by converting the series in this collection to elements
and the element groups into series.</summary>
        </member>
        <member name="M:dotnetCHARTING.SeriesCollection.Transpose(dotnetCHARTING.Axis)">
            <summary>Transposes the data bound to a specified axis. Data is
transposed by converting the series in this collection to elements
and the element groups into series.</summary>
            <param name="xAxis">The axis bound to data that is to be transposed.</param>
        </member>
        <member name="P:dotnetCHARTING.SeriesCollection.Item(System.Int32)">
            <summary>Gets or sets the Series at a specified index.</summary>
        </member>
        <member name="P:dotnetCHARTING.SeriesCollection.SmartGrouping">
            <summary>Gets or sets a value that indicates whether smart element
grouping is used or the traditional element name grouping is used
where the elements of the first series determines the order.</summary>
        </member>
        <member name="P:dotnetCHARTING.SeriesCollection.SmartPalette">
            <summary>Gets or sets a
SmartPalette
object that will determine the colors of series in this
SeriesCollection.</summary>
        </member>
        <member name="T:dotnetCHARTING.Shadow">
            <summary>Represents a shadow cast by chart objects such as a Box,
Annotation, and others.</summary>
        </member>
        <member name="P:dotnetCHARTING.Shadow.Color">
            <summary>Gets or sets the color of this shadow.</summary>
            <remarks>Making this color partially transparent will give the shadow
a more realistic look.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Shadow.Depth">
            <summary>Gets or sets the shadow's depth.</summary>
        </member>
        <member name="P:dotnetCHARTING.Shadow.Soft">
            <summary>Gets or sets a value which indicates whether this shadow is
soft or solid.</summary>
        </member>
        <member name="T:dotnetCHARTING.SmartColor">
            <summary>Defines a SmartColor object that can be used
applied to elements or series conditionally based on specific names
or elements with values which fall within a specified range.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartColor.#ctor">
            <summary>Initializes a new instance of the SmartColor
object.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartColor.#ctor">
            <summary>Initializes a new instance of the SmartColor
object.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartColor.#ctor(System.Drawing.Color,dotnetCHARTING.ScaleRange)">
            <summary>Initializes a new instance of the SmartColor
object with a color and scale range. By default this will check
element's YValue to determine whether they inherit this
color.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartColor.#ctor(System.Drawing.Color,dotnetCHARTING.ScaleRange,dotnetCHARTING.ElementValue)">
            <summary>Initializes a new instance of the SmartColor
object with a color and scale range. This will check element's
specified attribute to determine whether it inherits this
color.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartColor.Color">
            <summary>Gets or sets the Color of this SmartColor
object.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartColor.ElementValue">
            <summary>Gets or sets the ElementValue that is used with
this.ScaleRange to determine if elements use this color.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartColor.LegendEntry">
            <summary>Gets or sets a LegendEntry that describes this object's color
in the legend box.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartColor.ScaleRange">
            <summary>Gets or sets the ScaleRange used with this.ElementValue to
determine if elements use this color.</summary>
        </member>
        <member name="T:dotnetCHARTING.SmartLabel">
            <summary>Encapsulates a Label object with advanced alignment and
collision detection options.</summary>
            <remarks/>
        </member>
        <member name="M:dotnetCHARTING.SmartLabel.#ctor">
            <summary>Initializes a new instance of the SmartLabel class.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartLabel.Alignment">
            <summary>Gets or sets the primary label alignment.</summary>
            <remarks>If the labels doesn't fit well given this alignment,
alignments in the AlighmentSecondary collection are iterated (when
DynamicDisplay is true) to find the first position that fits
correctly.</remarks>
        </member>
        <member name="P:dotnetCHARTING.SmartLabel.AlignmentSecondary">
            <summary>Gets or sets a collection of secondary label alignment
options.</summary>
            <remarks>When the primary Alignment option does not permit the room
necessary to draw this label, the alignment options in this
collection are iterated to find one that fits.</remarks>
        </member>
        <member name="P:dotnetCHARTING.SmartLabel.AllowMarkerOverlap">
            <summary>Gets or sets a value that indicates whether smart labels are
allowed to be positioned on top of element markers. This property
should be set at the Chart.DefaultElement.SmartLabel property
level.</summary>
            <remarks>Note: This feature incures a performance cost when many
markers and labels are present. Setting this property to true may
improve performance in some instances. When this feature is not
used, the labels will still try to avoid markers, however, overlap
may occur.</remarks>
        </member>
        <member name="P:dotnetCHARTING.SmartLabel.DynamicDisplay">
            <summary>Gets or sets a value that indicates whether the label is
forced to be drawn even when there is no room. False means labels
are always drawn.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartLabel.DynamicPosition">
            <summary>Gets or sets a value that indicates whether the label will be
positioned using collision detection.</summary>
            <remarks>This causes the labels to be conscious of each other and does
not permit them to overlap. When a label is positioned away from
the data point it represents, the SmartLabel.Line is drawn from the
label's new position to the data point.</remarks>
        </member>
        <member name="P:dotnetCHARTING.SmartLabel.ForceVertical">
            <summary>Gets or sets a value that indicates whether the label is
forced to be drawn vertically.</summary>
            <remarks>When false, labels will be drawn vertically only on columns
and cylinders that are not wide enough to fit the label
horizontally. Otherwise, all labels will be vertical.</remarks>
        </member>
        <member name="P:dotnetCHARTING.SmartLabel.Line">
            <summary>Gets or sets a Line object that facilitates the
DynamicPosition functionality.</summary>
            <remarks>Lines are used to point to an element when a label can not be
placed directly beside it.</remarks>
        </member>
        <member name="P:dotnetCHARTING.SmartLabel.PieLabelMode">
            <summary>Gets or sets a PieLabelMode enumeration for pie and donut
charts.</summary>
            <remarks>This setting will only apply when set through the
Chart.DefaultSeries.DefaultElement.SmartLabel instance.</remarks>
        </member>
        <member name="P:dotnetCHARTING.SmartLabel.RadarLabelMode">
            <summary>Gets or sets a RadarLabelMode enumeration for radar
charts.</summary>
            <remarks>This setting will only apply when set through the
Chart.DefaultSeries.DefaultElement.SmartLabel instance.</remarks>
        </member>
        <member name="T:dotnetCHARTING.SmartPalette">
            <summary>Contains collection of SmartPalette objects or dictionary
like items of string and color pairs where strings refer to series
or element names and colors that are assigned to series or elements
with those names.</summary>
            <remarks>This object can be saved as XML and loaded for any other
charts to use. To use a SmartPalette with a given chart, it to the
Chart.SmartPalette property.</remarks>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.#ctor">
            <summary>Initializes a new instance of the
SmartPalette object.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.#ctor">
            <summary>Initializes a new instance of the
SmartPalette object.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.Add">
            <summary>Ads the specified key and color item to this palette.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.Add(System.String,System.Drawing.Color)">
            <summary>Ads the specified key and color item to this palette.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.Add(dotnetCHARTING.SmartPalette)">
            <summary>Adds the items in the specified palette to this
palette.</summary>
            <param name="palette">Source palette.</param>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.Clear">
            <summary>Clears the SmartPalette.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.LoadState(System.String)">
            <summary>Imports a SmartPalette object from the specified xml
file.</summary>
            <param name="xmlDataOrFileName">Path of XML file or XML data to load.</param>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.Remove">
            <summary>Removes an entry with the specified key from the
collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.Remove(System.String)">
            <summary>Removes an entry with the specified key from the
collection.</summary>
            <param name="key">Key of entry to remove.</param>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.Remove(System.Int32)">
            <summary>Removes an item at the specified index from this
collection.</summary>
            <param name="index">The AxisTick to remove.</param>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.SaveState">
            <summary>Saves the SmartPalette instance to an xml file.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.SaveState">
            <summary>Saves the SmartPalette instance to an xml file.</summary>
        </member>
        <member name="M:dotnetCHARTING.SmartPalette.SaveState(System.String)">
            <summary>Saves the SmartPalette instance to an xml file.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartPalette.AllKeys">
            <summary>Gets a String array containing all the keys
(series or element names) in the SmartPalette.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartPalette.AllValues">
            <summary>Gets a Color array containing all the values
(series / element colors) in the SmartPalette.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartPalette.HasKeys">
            <summary>Gets a value indicating whether the SmartPalette has
entries.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartPalette.Item">
            <summary>Gets or sets the value associated with the specified
key.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartPalette.Item(System.Int32)">
            <summary>Gets or sets the value associated with the specified
key.</summary>
        </member>
        <member name="P:dotnetCHARTING.SmartPalette.Item(System.String)">
            <summary>Gets or sets the Color with the specified key.</summary>
        </member>
        <member name="T:dotnetCHARTING.StatisticalEngine">
            <summary>Provides a set of methods that perform statistical analysis
of series and series collections.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.BollingerBands">
            <summary>Within this class we offer procedures which evaluate the
upper and lower Bollinger Bands.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.BollingerBands(dotnetCHARTING.Series,System.Double,System.Int32)">
            <summary>Within this class we offer procedures which evaluate the
upper and lower Bollinger Bands.</summary>
            <remarks>    Further Details
    Bollinger Bands are a type of envelope that are plotted
    at standard deviation levels above and below the corresponding
    (simple) moving average. This produces an effect of having the
    bands widen during periods of higher volatility and contract
    during less volatile periods. Bollinger Bands indicate the
    relative supply and demand for a given asset. If the asset to
    move close to the top of the envelope then it indicates that
    there is strong demand for the asset, conversely if the asset
    hugs the bottom of the trading range then it indicates that
    there is oversupply of the asset.
    Since the Bollinger Bands will nearly always be combined
    with other indicators when forming a trading system the number
    of periods used in the evaluation of the standard deviation of
    the stocks and the moving average will vary. For those without
    design restrictions a popular choice of the number of time
    periods is around 20-23.</remarks>
            <param name="s">A statistical series.</param>
            <param name="standardDeviationLevel">The (positive) number of standard deviations which the lower
band in shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.BollingerBands(dotnetCHARTING.SeriesCollection,System.Double,System.Int32)">
            <summary>Within this class we offer procedures which evaluate the
upper and lower Bollinger Bands.</summary>
            <remarks>    Further Details
    Bollinger Bands are a type of envelope that are plotted
    at standard deviation levels above and below the corresponding
    (simple) moving average. This produces an effect of having the
    bands widen during periods of higher volatility and contract
    during less volatile periods. Bollinger Bands indicate the
    relative supply and demand for a given asset. If the asset to
    move close to the top of the envelope then it indicates that
    there is strong demand for the asset, conversely if the asset
    hugs the bottom of the trading range then it indicates that
    there is oversupply of the asset.
    Since the Bollinger Bands will nearly always be combined
    with other indicators when forming a trading system the number
    of periods used in the evaluation of the standard deviation of
    the stocks and the moving average will vary. For those without
    design restrictions a popular choice of the number of time
    periods is around 20-23.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="standardDeviationLevel">The (positive) number of standard deviations which the lower
band in shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOL(System.String,dotnetCHARTING.Series,System.Double[])">
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set above the
    lowest value of that interval of the frequency table
    constructed in accordance with the open left boundary
    convention. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from above using the open
    left boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open left boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have:
    using Open Left Boundary (OLB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval (1, 2], we assign the data
        element 1.4, 1.3, 2.0; and hence the frequency of
        this interval (wrt OLB convention) is 3.
        Within the interval (2, 3], we assign the data
        element 2.3, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (3, 4], we assign no data
        elements, and hence the frequency of this interval (wrt OLB
        convention) is 0.
        Within the interval (4, 5], we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt OLB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table above -infinity is:
        1 + 1 + 0 + 1 + 3 + 1 = 7
        Cumulative frequency table above 1is: 1 + 0
        + 1 + 3 + 1 = 6
        Cumulative frequency table above 2is: 0 + 1
        + 3 + 1 = 5
        Cumulative frequency table above 3is: 1 + 3
        + 1 = 5
        Cumulative frequency table above 4is: 3 + 1
        = 4
        Cumulative frequency table above 5is:
        1
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {7, 6,
    5, 5, 4, 1}.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOL(dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the cumulative frequency table from above for a
discrete data set in accordance with the open left boundary (OLB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set above the
    lowest value of that interval of the frequency table
    constructed in accordance with the open left boundary
    convention. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from above using the open
    left boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open left boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have:
    using Open Left Boundary (OLB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval (1, 2], we assign the data
        element 1.4, 1.3, 2.0; and hence the frequency of
        this interval (wrt OLB convention) is 3.
        Within the interval (2, 3], we assign the data
        element 2.3, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (3, 4], we assign no data
        elements, and hence the frequency of this interval (wrt OLB
        convention) is 0.
        Within the interval (4, 5], we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt OLB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table above -infinity is:
        1 + 1 + 0 + 1 + 3 + 1 = 7
        Cumulative frequency table above 1is: 1 + 0
        + 1 + 3 + 1 = 6
        Cumulative frequency table above 2is: 0 + 1
        + 3 + 1 = 5
        Cumulative frequency table above 3is: 1 + 3
        + 1 = 5
        Cumulative frequency table above 4is: 3 + 1
        = 4
        Cumulative frequency table above 5is:
        1
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {7, 6,
    5, 5, 4, 1}.</remarks>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOL(dotnetCHARTING.SeriesCollection,System.Double[])">
            <summary>Calculates the cumulative frequency table from above for a
discrete data set in accordance with the open left boundary (OLB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set above the
    lowest value of that interval of the frequency table
    constructed in accordance with the open left boundary
    convention. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from above using the open
    left boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open left boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have:
    using Open Left Boundary (OLB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval (1, 2], we assign the data
        element 1.4, 1.3, 2.0; and hence the frequency of
        this interval (wrt OLB convention) is 3.
        Within the interval (2, 3], we assign the data
        element 2.3, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (3, 4], we assign no data
        elements, and hence the frequency of this interval (wrt OLB
        convention) is 0.
        Within the interval (4, 5], we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt OLB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table above -infinity is:
        1 + 1 + 0 + 1 + 3 + 1 = 7
        Cumulative frequency table above 1is: 1 + 0
        + 1 + 3 + 1 = 6
        Cumulative frequency table above 2is: 0 + 1
        + 3 + 1 = 5
        Cumulative frequency table above 3is: 1 + 3
        + 1 = 5
        Cumulative frequency table above 4is: 3 + 1
        = 4
        Cumulative frequency table above 5is:
        1
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {7, 6,
    5, 5, 4, 1}.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOR">
            <summary>Calculates the cumulative frequency table from above for a
discrete data set in accordance with the open right boundary (ORB)
convention.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOR(System.String,dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the cumulative frequency table from above for a
discrete data set in accordance with the open right boundary (ORB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set above the
    lowest value of that interval of the frequency table
    constructed in accordance with the open right boundary. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from above using the open
    right boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open right boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1), [1,2), [2,3), [3,4), [4,5), [5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, and if we assign this data set in
    accordance with the Open Right Boundary (ORB) convention then
    we will have:
    
        Within the interval (-infinity, 1), we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval [1, 2), we assign the data
        element 1.4, 1.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [2, 3), we assign the data
        element 2.0, 2.3, and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [3, 4), we assign no data
        elements, and hence the frequency of this interval (wrt ORB
        convention) is 0.
        Within the interval [4, 5), we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt ORB convention) is 1.
        Within the interval [5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt ORB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table above -infinity is:
        1 + 1 + 0 + 2 + 2 + 1 = 7
        Cumulative frequency table above 1is: 1 + 0
        + 2 + 2 + 1 = 6
        Cumulative frequency table above 2is: 0 + 2
        + 2 + 1 = 5
        Cumulative frequency table above 3is: 2 + 2
        + 1 = 5
        Cumulative frequency table above 4is: 2 + 1
        = 3
        Cumulative frequency table above 5is:
        1
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {7, 6,
    5, 5, 3, 1}.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOR(dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the cumulative frequency table from above for a
discrete data set in accordance with the open right boundary (ORB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set above the
    lowest value of that interval of the frequency table
    constructed in accordance with the open right boundary. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from above using the open
    right boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open right boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1), [1,2), [2,3), [3,4), [4,5), [5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, and if we assign this data set in
    accordance with the Open Right Boundary (ORB) convention then
    we will have:
    
        Within the interval (-infinity, 1), we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval [1, 2), we assign the data
        element 1.4, 1.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [2, 3), we assign the data
        element 2.0, 2.3, and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [3, 4), we assign no data
        elements, and hence the frequency of this interval (wrt ORB
        convention) is 0.
        Within the interval [4, 5), we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt ORB convention) is 1.
        Within the interval [5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt ORB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table above -infinity is:
        1 + 1 + 0 + 2 + 2 + 1 = 7
        Cumulative frequency table above 1is: 1 + 0
        + 2 + 2 + 1 = 6
        Cumulative frequency table above 2is: 0 + 2
        + 2 + 1 = 5
        Cumulative frequency table above 3is: 2 + 2
        + 1 = 5
        Cumulative frequency table above 4is: 2 + 1
        = 3
        Cumulative frequency table above 5is:
        1
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {7, 6,
    5, 5, 3, 1}.</remarks>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOR(dotnetCHARTING.SeriesCollection,System.Double[])">
            <summary>Calculates the cumulative frequency table from above for a
discrete data set in accordance with the open right boundary (ORB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set above the
    lowest value of that interval of the frequency table
    constructed in accordance with the open right boundary. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from above using the open
    right boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open right boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1), [1,2), [2,3), [3,4), [4,5), [5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, and if we assign this data set in
    accordance with the Open Right Boundary (ORB) convention then
    we will have:
    
        Within the interval (-infinity, 1), we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval [1, 2), we assign the data
        element 1.4, 1.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [2, 3), we assign the data
        element 2.0, 2.3, and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [3, 4), we assign no data
        elements, and hence the frequency of this interval (wrt ORB
        convention) is 0.
        Within the interval [4, 5), we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt ORB convention) is 1.
        Within the interval [5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt ORB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table above -infinity is:
        1 + 1 + 0 + 2 + 2 + 1 = 7
        Cumulative frequency table above 1is: 1 + 0
        + 2 + 2 + 1 = 6
        Cumulative frequency table above 2is: 0 + 2
        + 2 + 1 = 5
        Cumulative frequency table above 3is: 2 + 2
        + 1 = 5
        Cumulative frequency table above 4is: 2 + 1
        = 3
        Cumulative frequency table above 5is:
        1
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {7, 6,
    5, 5, 3, 1}.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOL">
            <summary>Calculates the cumulative frequency table from below for a
discrete data set in accordance with the open left boundary (OLB)
convention.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOL(System.String,dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the cumulative frequency table from below for a
discrete data set in accordance with the open left boundary (OLB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set below the
    highest value of that interval of the frequency table
    constructed in accordance with the open left boundary
    convention. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from below using the open
    left boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open left boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have:
    using Open Left Boundary (OLB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval (1, 2], we assign the data
        element 1.4, 1.3, 2.0; and hence the frequency of
        this interval (wrt OLB convention) is 3.
        Within the interval (2, 3], we assign the data
        element 2.3, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (3, 4], we assign no data
        elements, and hence the frequency of this interval (wrt OLB
        convention) is 0.
        Within the interval (4, 5], we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt OLB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table up to 1 is:
        1
        Cumulative frequency table up to 2is:
        4
        Cumulative frequency table up to 3is:
        5
        Cumulative frequency table up to 4is:
        5
        Cumulative frequency table up to 5is:
        6
        Cumulative frequency table up to 5is:
        7
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {1, 4,
    5, 5, 6, 7}.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOL(dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the cumulative frequency table from below for a
discrete data set in accordance with the open left boundary (OLB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set below the
    highest value of that interval of the frequency table
    constructed in accordance with the open left boundary
    convention. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from below using the open
    left boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open left boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have:
    using Open Left Boundary (OLB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval (1, 2], we assign the data
        element 1.4, 1.3, 2.0; and hence the frequency of
        this interval (wrt OLB convention) is 3.
        Within the interval (2, 3], we assign the data
        element 2.3, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (3, 4], we assign no data
        elements, and hence the frequency of this interval (wrt OLB
        convention) is 0.
        Within the interval (4, 5], we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt OLB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table up to 1 is:
        1
        Cumulative frequency table up to 2is:
        4
        Cumulative frequency table up to 3is:
        5
        Cumulative frequency table up to 4is:
        5
        Cumulative frequency table up to 5is:
        6
        Cumulative frequency table up to 5is:
        7
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {1, 4,
    5, 5, 6, 7}.</remarks>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOL(dotnetCHARTING.SeriesCollection,System.Double[])">
            <summary>Calculates the cumulative frequency table from below for a
discrete data set in accordance with the open left boundary (OLB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set below the
    highest value of that interval of the frequency table
    constructed in accordance with the open left boundary
    convention. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from below using the open
    left boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open left boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have:
    using Open Left Boundary (OLB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval (1, 2], we assign the data
        element 1.4, 1.3, 2.0; and hence the frequency of
        this interval (wrt OLB convention) is 3.
        Within the interval (2, 3], we assign the data
        element 2.3, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (3, 4], we assign no data
        elements, and hence the frequency of this interval (wrt OLB
        convention) is 0.
        Within the interval (4, 5], we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt OLB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table up to 1 is:
        1
        Cumulative frequency table up to 2is:
        4
        Cumulative frequency table up to 3is:
        5
        Cumulative frequency table up to 4is:
        5
        Cumulative frequency table up to 5is:
        6
        Cumulative frequency table up to 5is:
        7
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {1, 4,
    5, 5, 6, 7}.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOR">
            <summary>Calculates the cumulative frequency table from below for a
discrete data set in accordance with the open right boundary (ORB)
convention.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOR(System.String,dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the cumulative frequency table from below for a
discrete data set in accordance with the open right boundary (ORB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set below the
    highest value of that interval of the frequency table
    constructed in accordance with the open right boundary
    convention. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from below using the open
    right boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open right boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5,
    infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have
    using Open Right Boundary (ORB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval [1, 2), we assign the data
        element 1.4, 1.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [2, 3), we assign the data
        element 2.0, 2.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [3, 4), we assign no data
        elements, and hence the frequency of this interval (wrt ORB
        convention) is 0.
        Within the interval [4, 5), we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt ORB convention) is 1.
        Within the interval [5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt ORB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table up to 1 is:
        1
        Cumulative frequency table up to 2is:
        3
        Cumulative frequency table up to 3is:
        5
        Cumulative frequency table up to 4is:
        5
        Cumulative frequency table up to 5is:
        6
        Cumulative frequency table up to 5is:
        7
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {1, 3,
    5, 5, 6, 7}.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOR(dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the cumulative frequency table from below for a
discrete data set in accordance with the open right boundary (ORB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set below the
    highest value of that interval of the frequency table
    constructed in accordance with the open right boundary
    convention. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from below using the open
    right boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open right boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5,
    infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have
    using Open Right Boundary (ORB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval [1, 2), we assign the data
        element 1.4, 1.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [2, 3), we assign the data
        element 2.0, 2.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [3, 4), we assign no data
        elements, and hence the frequency of this interval (wrt ORB
        convention) is 0.
        Within the interval [4, 5), we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt ORB convention) is 1.
        Within the interval [5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt ORB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table up to 1 is:
        1
        Cumulative frequency table up to 2is:
        3
        Cumulative frequency table up to 3is:
        5
        Cumulative frequency table up to 4is:
        5
        Cumulative frequency table up to 5is:
        6
        Cumulative frequency table up to 5is:
        7
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {1, 3,
    5, 5, 6, 7}.</remarks>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOR(dotnetCHARTING.SeriesCollection,System.Double[])">
            <summary>Calculates the cumulative frequency table from below for a
discrete data set in accordance with the open right boundary (ORB)
convention.</summary>
            <remarks>    The value of the cumulative frequency table values at a given
    point is the number of elements within the data set below the
    highest value of that interval of the frequency table
    constructed in accordance with the open right boundary
    convention. 
    Example
    Within this example we work through an illustration in
    which the cumulative frequency table from below using the open
    right boundary convention is evaluated.
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open right boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5,
    infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have
    using Open Right Boundary (ORB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval [1, 2), we assign the data
        element 1.4, 1.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [2, 3), we assign the data
        element 2.0, 2.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [3, 4), we assign no data
        elements, and hence the frequency of this interval (wrt ORB
        convention) is 0.
        Within the interval [4, 5), we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt ORB convention) is 1.
        Within the interval [5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt ORB convention) is 1.
    
    Now in follows that the associated values of the
    cumulative frequency table are given by:
    
        Cumulative frequency table up to 1 is:
        1
        Cumulative frequency table up to 2is:
        3
        Cumulative frequency table up to 3is:
        5
        Cumulative frequency table up to 4is:
        5
        Cumulative frequency table up to 5is:
        6
        Cumulative frequency table up to 5is:
        7
    
    Hence, for this case the series returned by this methods
    to represent the cumulative frequency table would be: {1, 3,
    5, 5, 6, 7}.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CorrelationCoefDeterminantion">
            <summary>Calculates the coefficient of determination for the YValues
of the series.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CorrelationCoefDeterminantion(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the coefficient of determination for the YValues
of the series.</summary>
            <remarks>    Explanation of the Coefficient of Determination
    The coefficient of determination is the amount of
    variation in the second variable (i.e. Y) which is
    explained by the regression line of the second variable
    Y on the first variable X (see Series)), divided
    by the total amount of variation of the second variable (i.e.
    Y).</remarks>
            <returns>The coefficient of determination of the series</returns>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CorrelationCoefDeterminantion(dotnetCHARTING.Series)">
            <summary>Calculates the coefficient of determination for the YValues
of the series.</summary>
            <remarks>    Explanation of the Coefficient of Determination
    The coefficient of determination is the amount of
    variation in the second variable (i.e. Y) which is
    explained by the regression line of the second variable
    Y on the first variable X (see Series)), divided
    by the total amount of variation of the second variable (i.e.
    Y).</remarks>
            <returns>The coefficient of determination of the series</returns>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CorrelationCoefDeterminantion(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the coefficient of determination for the YValues
of the series.</summary>
            <remarks>    Explanation of the Coefficient of Determination
    The coefficient of determination is the amount of
    variation in the second variable (i.e. Y) which is
    explained by the regression line of the second variable
    Y on the first variable X (see Series)), divided
    by the total amount of variation of the second variable (i.e.
    Y).</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.CorrelationCoefDeterminantion(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the coefficient of determination for the YValues
of the series.</summary>
            <remarks>    Explanation of the Coefficient of Determination
    The coefficient of determination is the amount of
    variation in the second variable (i.e. Y) which is
    explained by the regression line of the second variable
    Y on the first variable X (see Series)), divided
    by the total amount of variation of the second variable (i.e.
    Y).</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.DataDistribution">
            <summary>Calculates some quality control features like median, mean
and percentile and integrate them within an element.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.DataDistribution(System.String,dotnetCHARTING.Series)">
            <summary>Calculates some quality control features like median, mean
and percentile and integrate them within an element.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.DataDistribution(dotnetCHARTING.Series)">
            <summary>Calculates some quality control features like median, mean
and percentile and integrate them within an element.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.DataDistribution(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates some quality control features like median, mean
and percentile and integrate them within an element.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.DataDistributionChart">
            <summary>Calculates some quality control features like median, mean
and percentile and integrate them within an element.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.DataDistributionChart(dotnetCHARTING.Series)">
            <summary>Calculates some quality control features like median, mean
and percentile and integrate them within an element.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.DataDistributionChart(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates some quality control features like median, mean
and percentile and integrate them within an element.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.EstimateX">
            <summary>    Estimates the value of the 
    
X
    variable when the 
    
Y
    variable is known using the regression line of 
    
X
    on 
    
Y
    , which can be evaluated using Series).</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.EstimateX(System.String,dotnetCHARTING.Series,System.Double)">
            <summary>    Estimates the value of the 
    
X
    variable when the 
    
Y
    variable is known using the regression line of 
    
X
    on 
    
Y
    , which can be evaluated using Series).</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series containing the elements for which the
linear regression line is evaluated.</param>
            <param name="estPoint">    the values of the 
    
Y
    coordinate for which the corresponding 
    
X
    coordinate in estimated in accordance with the
    linear regression line.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.EstimateX(dotnetCHARTING.Series,System.Double)">
            <summary>    Estimates the value of the 
    
X
    variable when the 
    
Y
    variable is known using the regression line of 
    
X
    on 
    
Y
    , which can be evaluated using Series).</summary>
            <param name="s">A statistical series containing the elements for which the
linear regression line is evaluated.</param>
            <param name="estPoint">    the values of the 
    
Y
    coordinate for which the corresponding 
    
X
    coordinate in estimated in accordance with the
    linear regression line.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.EstimateX(System.String,dotnetCHARTING.SeriesCollection,System.Double)">
            <summary>    Estimates the value of the 
    
X
    variable when the 
    
Y
    variable is known using the regression line of 
    
X
    on 
    
Y
    , which can be evaluated using Series).</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="estPoint">    the values of the 
    
Y
    coordinate for which the corresponding 
    
X
    coordinate in estimated in accordance with the
    linear regression line.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.EstimateX(dotnetCHARTING.SeriesCollection,System.Double)">
            <summary>    Estimates the value of the 
    
X
    variable when the 
    
Y
    variable is known using the regression line of 
    
X
    on 
    
Y
    , which can be evaluated using Series).</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="estPoint">    the values of the 
    
Y
    coordinate for which the corresponding 
    
X
    coordinate in estimated in accordance with the
    linear regression line.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.EstimateY">
            <summary>    Estimates the value of the 
    
Y
    variable when the 
    
X
    variable is known using the regression line of 
    
Y
    on 
    
X
    , which can be evaluated using Series).</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.EstimateY(System.String,dotnetCHARTING.Series,System.Double)">
            <summary>    Estimates the value of the 
    
Y
    variable when the 
    
X
    variable is known using the regression line of 
    
Y
    on 
    
X
    , which can be evaluated using Series).</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series containing the elements for which the
linear regression line is evaluated.</param>
            <param name="estPoint">    the values of the 
    
X
    coordinate for which the corresponding 
    
Y
    coordinate in estimated in accordance with the
    linear regression line.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.EstimateY(dotnetCHARTING.Series,System.Double)">
            <summary>    Estimates the value of the 
    
Y
    variable when the 
    
X
    variable is known using the regression line of 
    
Y
    on 
    
X
    , which can be evaluated using Series).</summary>
            <param name="s">A statistical series containing the elements for which the
linear regression line is evaluated.</param>
            <param name="estPoint">    the values of the 
    
X
    coordinate for which the corresponding 
    
Y
    coordinate in estimated in accordance with the
    linear regression line.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.EstimateY(System.String,dotnetCHARTING.SeriesCollection,System.Double)">
            <summary>    Estimates the value of the 
    
Y
    variable when the 
    
X
    variable is known using the regression line of 
    
Y
    on 
    
X
    , which can be evaluated using Series).</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="estPoint">    the values of the 
    
X
    coordinate for which the corresponding 
    
Y
    coordinate in estimated in accordance with the
    linear regression line.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.EstimateY(dotnetCHARTING.SeriesCollection,System.Double)">
            <summary>    Estimates the value of the 
    
Y
    variable when the 
    
X
    variable is known using the regression line of 
    
Y
    on 
    
X
    , which can be evaluated using Series).</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="estPoint">    the values of the 
    
X
    coordinate for which the corresponding 
    
Y
    coordinate in estimated in accordance with the
    linear regression line.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ExponentialDistribution">
            <summary>Calculates the Exponential Probability Density function for a
given series.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ExponentialDistribution(System.String,dotnetCHARTING.Series,System.Double)">
            <summary>Calculates the Exponential Probability Density function for a
given series.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series containing the elements for which the
normal probability distribution function is evaluated.</param>
            <param name="lambda">The scale parameter value.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ExponentialDistribution(dotnetCHARTING.Series,System.Double)">
            <summary>Calculates the Exponential Probability Density function for a
given series.</summary>
            <param name="s">A statistical series containing the elements for which the
normal probability distribution function is evaluated.</param>
            <param name="lambda">The scale parameter value.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ExponentialDistribution(dotnetCHARTING.SeriesCollection,System.Double)">
            <summary>Calculates the Exponential Probability Density function for a
given collection of series.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lambda">The scale parameter value.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ExponentiallyWeightedMovingAverage">
            <summary>Evaluates the (x-day) Exponentially Weighted Moving
Average (EWMA) of a time series provided where x is the
length of the time series array which is provided as a parameter,
for all periods for which sufficient data is provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ExponentiallyWeightedMovingAverage(System.String,dotnetCHARTING.Series,System.Double,System.Int32)">
            <summary>Evaluates the (x-day) Exponentially Weighted Moving
Average (EWMA) of a time series provided where x is the
length of the time series array which is provided as a parameter,
for all periods for which sufficient data is provided.</summary>
            <returns>A series where the first term is the EWMA for the most recent
period, the second term is the EWMA for the previous period and so
on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing
factor. The closer the value is to zero the more influence more
resent measurements will have on the EWMA.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ExponentiallyWeightedMovingAverage(dotnetCHARTING.Series,System.Double,System.Int32)">
            <summary>Evaluates the (x-day) Exponentially Weighted Moving
Average (EWMA) of a time series provided where x is the
length of the time series array which is provided as a parameter,
for all periods for which sufficient data is provided.</summary>
            <returns>A series where the first term is the EWMA for the most recent
period, the second term is the EWMA for the previous period and so
on.</returns>
            <param name="s">A statistical series.</param>
            <param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing
factor. The closer the value is to zero the more influence more
resent measurements will have on the EWMA.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ExponentiallyWeightedMovingAverage(dotnetCHARTING.SeriesCollection,System.Double,System.Int32)">
            <summary>Evaluates the (x-day) Exponentially Weighted Moving
Average (EWMA) of a time series provided where x is the
length of the time series array which is provided as a parameter,
for all periods for which sufficient data is provided.</summary>
            <returns>A series where the first term is the EWMA for the most recent
period, the second term is the EWMA for the previous period and so
on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing
factor. The closer the value is to zero the more influence more
resent measurements will have on the EWMA.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOL">
            <summary>Calculates the frequency table with respect to the open left
boundary convention for YValues of the series.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOL(System.String,dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the frequency table with respect to the open left
boundary convention for YValues of the series.</summary>
            <remarks>    Say for example the boundary points used are {b_1, b_2, ...,
    b_n}, now the first term of the array returned which
    represents the frequency table, is the number of elements from
    the data set within the interval (-infinity, b_1), the
    second term of the array returned is the number of elements
    from the data set within the interval [b_1, b_2), and so
    on... 
    Example
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open left boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have:
    using Open Left Boundary (OLB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval (1, 2], we assign the data
        element 1.4, 1.3, 2.0; and hence the frequency of
        this interval (wrt OLB convention) is 3.
        Within the interval (2, 3], we assign the data
        element 2.3, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (3, 4], we assign no data
        elements, and hence the frequency of this interval (wrt OLB
        convention) is 0.
        Within the interval (4, 5], we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt OLB convention) is 1.
    
    Hence, in this case the series returned corresponding to
    the frequency table will be {1, 3, 1, 0, 1, 1}.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOL(dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the frequency table with respect to the open left
boundary convention for YValues of the series.</summary>
            <remarks>    Say for example the boundary points used are {b_1, b_2, ...,
    b_n}, now the first term of the array returned which
    represents the frequency table, is the number of elements from
    the data set within the interval (-infinity, b_1), the
    second term of the array returned is the number of elements
    from the data set within the interval [b_1, b_2), and so
    on... 
    Example
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open left boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have:
    using Open Left Boundary (OLB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval (1, 2], we assign the data
        element 1.4, 1.3, 2.0; and hence the frequency of
        this interval (wrt OLB convention) is 3.
        Within the interval (2, 3], we assign the data
        element 2.3, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (3, 4], we assign no data
        elements, and hence the frequency of this interval (wrt OLB
        convention) is 0.
        Within the interval (4, 5], we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt OLB convention) is 1.
    
    Hence, in this case the series returned corresponding to
    the frequency table will be {1, 3, 1, 0, 1, 1}.</remarks>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOL(dotnetCHARTING.SeriesCollection,System.Double[])">
            <summary>Calculates the frequency table with respect to the open left
boundary convention for YValues of the series.</summary>
            <remarks>    Say for example the boundary points used are {b_1, b_2, ...,
    b_n}, now the first term of the array returned which
    represents the frequency table, is the number of elements from
    the data set within the interval (-infinity, b_1), the
    second term of the array returned is the number of elements
    from the data set within the interval [b_1, b_2), and so
    on... 
    Example
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open left boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if the assign this data set in
    accordance with the above the conventions then we will have:
    using Open Left Boundary (OLB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval (1, 2], we assign the data
        element 1.4, 1.3, 2.0; and hence the frequency of
        this interval (wrt OLB convention) is 3.
        Within the interval (2, 3], we assign the data
        element 2.3, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (3, 4], we assign no data
        elements, and hence the frequency of this interval (wrt OLB
        convention) is 0.
        Within the interval (4, 5], we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt OLB convention) is 1.
        Within the interval (5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt OLB convention) is 1.
    
    Hence, in this case the series returned corresponding to
    the frequency table will be {1, 3, 1, 0, 1, 1}.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOR">
            <summary>Calculates the frequency table with respect to the open right
boundary convention for a discrete data set.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOR(System.String,dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the frequency table with respect to the open right
boundary convention for a discrete data set.</summary>
            <remarks>    Say for example the boundary points used are {b_1, b_2, ...,
    b_n}, now the first term of the array returned which
    represents the frequency table, is the number of elements from
    the data set within the interval (-infinity, b_1), the
    second term of the array returned is the number of elements
    from the data set within the interval [b_1, b_2), and so
    on... 
    Example
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open right boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5,
    infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if you assign this data set in
    accordance with the above the conventions then we will have
    using Open Right Boundary (ORB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval [1, 2), we assign the data
        element 1.4, 1.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [2, 3), we assign the data
        element 2.0, 2.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [3, 4), we assign no data
        elements, and hence the frequency of this interval (wrt ORB
        convention) is 0.
        Within the interval [4, 5), we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt ORB convention) is 1.
        Within the interval [5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt ORB convention) is 1.
    
    Hence, in this case the series returned corresponding to
    the frequency table will be {1, 2, 2, 0, 1, 1}.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOR(dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the frequency table with respect to the open right
boundary convention for a discrete data set.</summary>
            <remarks>    Say for example the boundary points used are {b_1, b_2, ...,
    b_n}, now the first term of the array returned which
    represents the frequency table, is the number of elements from
    the data set within the interval (-infinity, b_1), the
    second term of the array returned is the number of elements
    from the data set within the interval [b_1, b_2), and so
    on... 
    Example
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open right boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5,
    infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if you assign this data set in
    accordance with the above the conventions then we will have
    using Open Right Boundary (ORB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval [1, 2), we assign the data
        element 1.4, 1.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [2, 3), we assign the data
        element 2.0, 2.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [3, 4), we assign no data
        elements, and hence the frequency of this interval (wrt ORB
        convention) is 0.
        Within the interval [4, 5), we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt ORB convention) is 1.
        Within the interval [5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt ORB convention) is 1.
    
    Hence, in this case the series returned corresponding to
    the frequency table will be {1, 2, 2, 0, 1, 1}.</remarks>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOR(dotnetCHARTING.SeriesCollection,System.Double[])">
            <summary>Calculates the frequency table with respect to the open right
boundary convention for a discrete data set.</summary>
            <remarks>    Say for example the boundary points used are {b_1, b_2, ...,
    b_n}, now the first term of the array returned which
    represents the frequency table, is the number of elements from
    the data set within the interval (-infinity, b_1), the
    second term of the array returned is the number of elements
    from the data set within the interval [b_1, b_2), and so
    on... 
    Example
    Consider the set of boundaries { 1, 2, 3, 4, 5 },
    which divide the real line into six sub-intervals. Now if we
    use the open right boundary convention then the real line will
    be divided into the sub-intervals:
    
    (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5,
    infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.
    Therefore, if we consider the data set { 0.5, 1.4,
    1.3, 2.0, 2.3, 4.5, 5.5}, if you assign this data set in
    accordance with the above the conventions then we will have
    using Open Right Boundary (ORB) convention:
    
        Within the interval (-infinity, 1], we assign
        the data element 0.5; and hence the frequency of
        this interval is 1.
        Within the interval [1, 2), we assign the data
        element 1.4, 1.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [2, 3), we assign the data
        element 2.0, 2.3; and hence the frequency of this
        interval (wrt ORB convention) is 2.
        Within the interval [3, 4), we assign no data
        elements, and hence the frequency of this interval (wrt ORB
        convention) is 0.
        Within the interval [4, 5), we assign the data
        element 4.5, and hence the frequency of this
        interval (wrt ORB convention) is 1.
        Within the interval [5, infinity), we assign
        the data element 5.5, and hence the frequency of
        this interval (wrt ORB convention) is 1.
    
    Hence, in this case the series returned corresponding to
    the frequency table will be {1, 2, 2, 0, 1, 1}.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.GeometricMean">
            <summary>Calculates the geometric mean of the series's elements
YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.GeometricMean(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the geometric mean of the series's elements
YValues.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.GeometricMean(dotnetCHARTING.Series)">
            <summary>Calculates the geometric mean of the series's elements
YValues.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.GeometricMean(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the geometric mean of the series's elements
YValues.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.GeometricMean(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the geometric mean of the series's elements
YValues.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.GeometricMovingAverage">
            <summary>Calculates the Geometric Moving Average (GMA) for a given
period for all possible data points (i.e. periods) for which there
is sufficient historical data provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.GeometricMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Calculates the Geometric Moving Average (GMA) for a given
period for all possible data points (i.e. periods) for which there
is sufficient historical data provided.</summary>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.GeometricMovingAverage(dotnetCHARTING.Series,System.Int32)">
            <summary>Calculates the Geometric Moving Average (GMA) for a given
period for all possible data points (i.e. periods) for which there
is sufficient historical data provided.</summary>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="s">A statistical series.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.GeometricMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Calculates the Geometric Moving Average (GMA) for a given
period for all possible data points (i.e. periods) for which there
is sufficient historical data provided.</summary>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.IQR">
            <summary>Calculates the Inter-Quartile Range(IQR) of the currently
registered data set.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.IQR(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the Inter-Quartile Range(IQR) of the currently
registered data set.</summary>
            <remarks>Recall that the IQR is the difference between the 1-st
quartile (i.e. 25-th percentile) and the 2-nd
quartile (i.e. the 75-th percentile).</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.IQR(dotnetCHARTING.Series)">
            <summary>Calculates the Inter-Quartile Range(IQR) of the currently
registered data set.</summary>
            <remarks>Recall that the IQR is the difference between the 1-st
quartile (i.e. 25-th percentile) and the 2-nd
quartile (i.e. the 75-th percentile).</remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.IQR(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the Inter-Quartile Range(IQR) of the currently
registered data set.</summary>
            <remarks>Recall that the IQR is the difference between the 1-st
quartile (i.e. 25-th percentile) and the 2-nd
quartile (i.e. the 75-th percentile).</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.IQR(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the Inter-Quartile Range(IQR) of the currently
registered data set.</summary>
            <remarks>Recall that the IQR is the difference between the 1-st
quartile (i.e. 25-th percentile) and the 2-nd
quartile (i.e. the 75-th percentile).</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Kairi">
            <summary>Calculates the Kairi Indicator measure as a percentage of the
element value, the divergence between the a moving average
(generally the simple moving average) of the value and the value
itself for each period for which there is sufficient historical
values.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Kairi(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series)">
            <summary>Calculates the Kairi Indicator measure as a percentage of the
element value, the divergence between the a moving average
(generally the simple moving average) of the value and the value
itself for each period for which there is sufficient historical
values.</summary>
            <remarks>    Remark: The Kairi Indicator is often used with
    conjunction with other moving averages within trading
    systems.
    Evaluation
    The formulae for the Kairi Indicator is as follows:
    
    Kairi Indicator = (MA - price) / price
    
    where MA is the moving average being considered and price is
    the present price of the underlying asset.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Kairi(dotnetCHARTING.Series,dotnetCHARTING.Series)">
            <summary>Calculates the Kairi Indicator measure as a percentage of the
element value, the divergence between the a moving average
(generally the simple moving average) of the value and the value
itself for each period for which there is sufficient historical
values.</summary>
            <remarks>    Remark: The Kairi Indicator is often used with
    conjunction with other moving averages within trading
    systems.
    Evaluation
    The formulae for the Kairi Indicator is as follows:
    
    Kairi Indicator = (MA - price) / price
    
    where MA is the moving average being considered and price is
    the present price of the underlying asset.</remarks>
            <param name="s">A statistical series.</param>
            <param name="movingAverageSeries">A series where the first term corresponds to the most recent
value of the moving average (generally the simple moving average)
of the underlying asset, the second term to the previous value and
so on.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Kairi(dotnetCHARTING.Series,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the Kairi Indicator measure as a percentage of the
element value, the divergence between the a moving average
(generally the simple moving average) of the value and the value
itself for each period for which there is sufficient historical
values.</summary>
            <remarks>    Remark: The Kairi Indicator is often used with
    conjunction with other moving averages within trading
    systems.
    Evaluation
    The formulae for the Kairi Indicator is as follows:
    
    Kairi Indicator = (MA - price) / price
    
    where MA is the moving average being considered and price is
    the present price of the underlying asset.</remarks>
            <param name="s">A statistical series.</param>
            <param name="movingAverages">A collection of series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.KendallCorrelationCoef">
            <summary>Calculates Kendall's correlation coefficient for the YValues
of the series.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.KendallCorrelationCoef(System.String,dotnetCHARTING.Series)">
            <summary>Calculates Kendall's correlation coefficient for the YValues
of the series.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.KendallCorrelationCoef(dotnetCHARTING.Series)">
            <summary>Calculates Kendall's correlation coefficient for the YValues
of the series.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.KendallCorrelationCoef(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates Kendall's correlation coefficient for the YValues
of the series.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.KendallCorrelationCoef(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates Kendall's correlation coefficient for the YValues
of the series.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Kurtosis">
            <summary>Calculates the kurtosis of the currently registered data
set.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Kurtosis(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the kurtosis of the currently registered data
set.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Kurtosis(dotnetCHARTING.Series)">
            <summary>Calculates the kurtosis of the currently registered data
set.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Kurtosis(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the kurtosis of the currently registered data
set.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Kurtosis(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the kurtosis of the currently registered data
set.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX">
            <summary>Constructs the regression line of X on Y using
the method of least squares.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(System.String,dotnetCHARTING.Series)">
            <summary>Constructs the regression line of X on Y using
the method of least squares.</summary>
            <remarks>That is, the regression line using the least squares method
is constructed when the first element of the pairs from which the
data set of constructed is plot against the second elements of the
pairs.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(dotnetCHARTING.Series)">
            <summary>Constructs the regression line of X on Y using
the method of least squares.</summary>
            <remarks>That is, the regression line using the least squares method
is constructed when the first element of the pairs from which the
data set of constructed is plot against the second elements of the
pairs.</remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(dotnetCHARTING.SeriesCollection)">
            <summary>Constructs the regression line of X on Y using
the method of least squares.</summary>
            <remarks>That is, the regression line using the least squares method
is constructed when the first element of the pairs from which the
data set of constructed is plot against the second elements of the
pairs.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY">
            <summary>Constructs the regression line of Y on X using
the method of least squares.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)">
            <summary>Constructs the regression line of Y on X using
the method of least squares.</summary>
            <remarks>That is, the regression line using the least squares method
is constructed when the second element of the pairs from which the
data set of constructed is plot against the first elements of the
pairs.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(dotnetCHARTING.Series)">
            <summary>Constructs the regression line of Y on X using
the method of least squares.</summary>
            <remarks>That is, the regression line using the least squares method
is constructed when the second element of the pairs from which the
data set of constructed is plot against the first elements of the
pairs.</remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(dotnetCHARTING.SeriesCollection)">
            <summary>Constructs the regression line of Y on X using
the method of least squares.</summary>
            <remarks>That is, the regression line using the least squares method
is constructed when the second element of the pairs from which the
data set of constructed is plot against the first elements of the
pairs.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LinearlyWeightedMovingAverage">
            <summary>Returns the value of the Linearly Weighted Moving Average
(LWMA) for all periods for which sufficient historical data is
provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LinearlyWeightedMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Returns the value of the Linearly Weighted Moving Average
(LWMA) for all periods for which sufficient historical data is
provided.</summary>
            <remarks>The Linearly Weighted Moving Average (LWMA) weights the time
series by assigning a weight of 1, to the oldest price and a weight
of 2, to the second oldest price and so on... Until the weight of
the most recent value is assigned to be the parameter
lengthOfMA, after which the LWMA is given by the sum of the
weighted prices divided by the sum of the weights. This indicator
then shifts the window (one place back) over which the MA is
evaluated and the indicator is then re-evaluated.</remarks>
            <returns>A series where the first term is the LWMA of length
lengthOfMA for the latest period, the second term is the
LWMA of length lengthOfMA for the previous period and so
on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LinearlyWeightedMovingAverage(dotnetCHARTING.Series,System.Int32)">
            <summary>Returns the value of the Linearly Weighted Moving Average
(LWMA) for all periods for which sufficient historical data is
provided.</summary>
            <remarks>The Linearly Weighted Moving Average (LWMA) weights the time
series by assigning a weight of 1, to the oldest price and a weight
of 2, to the second oldest price and so on... Until the weight of
the most recent value is assigned to be the parameter
lengthOfMA, after which the LWMA is given by the sum of the
weighted prices divided by the sum of the weights. This indicator
then shifts the window (one place back) over which the MA is
evaluated and the indicator is then re-evaluated.</remarks>
            <returns>A series where the first term is the LWMA of length
lengthOfMA for the latest period, the second term is the
LWMA of length lengthOfMA for the previous period and so
on.</returns>
            <param name="s">A statistical series.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LinearlyWeightedMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Returns the value of the Linearly Weighted Moving Average
(LWMA) for all periods for which sufficient historical data is
provided.</summary>
            <remarks>The Linearly Weighted Moving Average (LWMA) weights the time
series by assigning a weight of 1, to the oldest price and a weight
of 2, to the second oldest price and so on... Until the weight of
the most recent value is assigned to be the parameter
lengthOfMA, after which the LWMA is given by the sum of the
weighted prices divided by the sum of the weights. This indicator
then shifts the window (one place back) over which the MA is
evaluated and the indicator is then re-evaluated.</remarks>
            <returns>A series where the first term is the LWMA of length
lengthOfMA for the latest period, the second term is the
LWMA of length lengthOfMA for the previous period and so
on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LognormalDistribution">
            <summary>Calculates the Lognormal Probability Density function for a
given series.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LognormalDistribution(System.String,dotnetCHARTING.Series,System.Double)">
            <summary>Calculates the Lognormal Probability Density function for a
given series.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series containing the elements for which the
normal probability distribution function is evaluated.</param>
            <param name="variance">The standard deviation of the distribution.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LognormalDistribution(dotnetCHARTING.Series,System.Double)">
            <summary>Calculates the Lognormal Probability Density function for a
given series.</summary>
            <param name="s">A statistical series containing the elements for which the
normal probability distribution function is evaluated.</param>
            <param name="variance">The standard deviation of the distribution.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LognormalDistribution(dotnetCHARTING.SeriesCollection,System.Double)">
            <summary>Calculates the Lognormal Probability Density function for a
given collection of series.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="variance">The standard deviation of the distribution.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LowerBollingerBands">
            <summary>Evaluates the position of the Lower Bollinger Band for a
given standard deviation level.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LowerBollingerBands(System.String,dotnetCHARTING.Series,System.Double,System.Int32)">
            <summary>Evaluates the position of the Lower Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Lower Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A series where the first term correspond the latest periods
values and the previous element is the value of the element before
that and so on... The length of this series is equal to the number
of periods used in the evaluation of the standard deviation and the
moving average.</param>
            <param name="standardDeviationLevel">The number of standard deviation which the lower band in
shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LowerBollingerBands(dotnetCHARTING.Series,System.Double,System.Int32)">
            <summary>Evaluates the position of the Lower Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Lower Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="s">A series where the first term correspond the latest periods
values and the previous element is the value of the element before
that and so on... The length of this series is equal to the number
of periods used in the evaluation of the standard deviation and the
moving average.</param>
            <param name="standardDeviationLevel">The number of standard deviation which the lower band in
shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.LowerBollingerBands(dotnetCHARTING.SeriesCollection,System.Double,System.Int32)">
            <summary>Evaluates the position of the Lower Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Lower Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="standardDeviationLevel">The number of standard deviation which the lower band in
shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Mean">
            <summary>Calculates the arithmetic mean of the elements YValues of the
series.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Mean(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the arithmetic mean of the elements YValues of the
series.</summary>
            <returns>An element with his YValue representing the arithmetic mean
of the elements YValues of the series</returns>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Mean(dotnetCHARTING.Series)">
            <summary>Calculates the arithmetic mean of the elements YValues of the
series.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Mean(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the arithmetic mean of the elements YValues of
each of the series within the collection of series.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Mean(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the arithmetic mean of the elements YValues of
each of the series within the collection of series.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.MeanDeviation">
            <summary>Calculates the mean deviation of the series's element
YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the mean deviation of the series's element
YValues.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(dotnetCHARTING.Series)">
            <summary>Calculates the mean deviation of the series's element
YValues.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the mean deviation of the series's element
YValues.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the mean deviation of the series's element
YValues.</summary>
            <remarks>The mean deviation is exactly what the name implies, that is,
it is the arithmetic average of the differences from each of the
elements of the series to the mean of the series.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Median">
            <summary>Calculates the median of the series's elements
YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Median(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the median of the series's elements
YValues.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Median(dotnetCHARTING.Series)">
            <summary>Calculates the median of the series's elements
YValues.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Median(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the median of the series's elements
YValues.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Median(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the median of the series's elements
YValues.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.MedianMovingAverage">
            <summary>Returns the Median Moving Average of a given period of the
data series provided for all possible periods for the data
given.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.MedianMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)">
            <summary>Returns the Median Moving Average of a given period of the
data series provided for all possible periods for the data
given.</summary>
            <returns>A series where the first term is the value of the Median
Moving Average for the most recent period, the second term is the
value of the Median Moving Average for the previous period and so
on.</returns>
            <param name="seriesName">The name of the series.</param>
            <param name="highSeries">A series where the elements corresponds to the highest
recorded values.</param>
            <param name="lowSeries">A series where the elements corresponds to the lowest
recorded values.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average of each of the days on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.MedianMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)">
            <summary>Returns the Median Moving Average of a given period of the
data series provided for all possible periods for the data
given.</summary>
            <returns>A series where the first term is the value of the Median
Moving Average for the most recent period, the second term is the
value of the Median Moving Average for the previous period and so
on.</returns>
            <param name="highSeries">A series where the elements corresponds to the highest
recorded values.</param>
            <param name="lowSeries">A series where the elements corresponds to the lowest
recorded values.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average of each of the days on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.MedianMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Returns the Median Moving Average of a given period of the
data series provided for all possible periods for the data
given.</summary>
            <returns>A series where the first term is the value of the Median
Moving Average for the most recent period, the second term is the
value of the Median Moving Average for the previous period and so
on.</returns>
            <param name="sc">A colection of two series: a series where the elements
corresponds to the highest recorded values and a series where the
elements corresponds to the lowest recorded values.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average of each of the days on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.NormalDistribution">
            <summary>Calculates the Normal Probability Density function for a
given series.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.NormalDistribution(System.String,dotnetCHARTING.Series,System.Double)">
            <summary>Calculates the Normal Probability Density function for a
given series.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series containing the elements for which the
normal probability distribution function is evaluated.</param>
            <param name="variance">The standard deviation of the distribution.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.NormalDistribution(dotnetCHARTING.Series,System.Double)">
            <summary>Calculates the Normal Probability Density function for a
given series.</summary>
            <param name="s">A statistical series containing the elements for which the
normal probability distribution function is evaluated.</param>
            <param name="variance">The standard deviation of the distribution.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.NormalDistribution(dotnetCHARTING.SeriesCollection,System.Double)">
            <summary>Calculates the Normal Probability Density function for a
given collection of series.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="variance">The standard deviation of the distribution.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ParetoDistribution">
            <summary>Calculates the Pareto Probability Density function for a
given series.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ParetoDistribution(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the Pareto Probability Density function for a
given series.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series containing the elements for which the
normal probability distribution function is evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ParetoDistribution(dotnetCHARTING.Series)">
            <summary>Calculates the Pareto Probability Density function for a
given series.</summary>
            <param name="s">A statistical series containing the elements for which the
normal probability distribution function is evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ParetoDistribution(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the Pareto Probability Density function for a
given collection of series.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.PearsonCorrelationCoef">
            <summary>Calculates Pearson's correlation coefficient for the YValues
of the series.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.PearsonCorrelationCoef(System.String,dotnetCHARTING.Series)">
            <summary>Calculates Pearson's correlation coefficient for the YValues
of the series.</summary>
            <returns>Pearson's correlation coefficient of the series</returns>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.PearsonCorrelationCoef(dotnetCHARTING.Series)">
            <summary>Calculates Pearson's correlation coefficient for the YValues
of the series.</summary>
            <returns>Pearson's correlation coefficient of the series</returns>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.PearsonCorrelationCoef(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates Pearson's correlation coefficient for the YValues
of the series.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.PearsonCorrelationCoef(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates Pearson's correlation coefficient for the YValues
of the series.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile">
            <summary>Calculates the n-th percentile of the series's elements
YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Calculates the n-th percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="percentile">A value between 1 and 100 which reprezent the value of the
percetile.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile(dotnetCHARTING.Series,System.Int32)">
            <summary>Calculates the n-th percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="s">A statistical series.</param>
            <param name="percentile">A value between 1 and 100 which reprezent the value of the
percetile.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile(System.String,dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Calculates the n-th percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="percentile">A value between 1 and 100 which reprezent the value of the
percetile.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Calculates the n-th percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="percentile">A value between 1 and 100 which reprezent the value of the
percetile.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile25">
            <summary>Calculates the first percentile of the series's elements
YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the first percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.Series)">
            <summary>Calculates the first percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the first percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the first percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile50">
            <summary>Calculates the second percentile of the series's elements
YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the second percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.Series)">
            <summary>Calculates the second percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the second percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the second percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile75">
            <summary>Calculates the third percentile of the series's elements
YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the third percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using ElementValue).
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.Series)">
            <summary>Calculates the third percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the third percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the third percentile of the series's elements
YValues.</summary>
            <remarks>    Recall that the percentile is the value such that at least
    interest-percent of the data set items are less than or
    equal to this value, or equivalently if at least
    (100-interest) percent of the items are greater than or
    equal to this value. 
    Remarks:
    
        The 50-th percentile is the measure of
        centrality of a data set known as the median. The median
        can also be evaluated using FinancialMedian.
        The 25-th, 50-th, 75-th
        percentiles are often referred to as the 1-st,
        2-nd (median) and 3-rd quartile respectively.
        The term quartile refers to the fact that these three
        values will roughly divide the data set considered into
        four equal parts.
    </remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Range">
            <summary>Calculates the range of the series's elements YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Range(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the range of the series's elements YValues.</summary>
            <remarks>The range is the difference of a discrete data set is the
difference between the largest and smallest members of the data set
considered.</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Range(dotnetCHARTING.Series)">
            <summary>Calculates the range of the series's elements YValues.</summary>
            <remarks>The range is the difference of a discrete data set is the
difference between the largest and smallest members of the data set
considered.</remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Range(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the range of the series's elements YValues.</summary>
            <remarks>The range is the difference of a discrete data set is the
difference between the largest and smallest members of the data set
considered.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Range(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the range of the series's elements YValues.</summary>
            <remarks>The range is the difference of a discrete data set is the
difference between the largest and smallest members of the data set
considered.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RChart">
            <summary>Create the R Chart chart for a given SeriesCollection
object.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RChart(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Create the R Chart chart for a given SeriesCollection
object.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RChart(dotnetCHARTING.SeriesCollection)">
            <summary>Create the R Chart chart for a given SeriesCollection
object.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Residuals">
            <summary>Determines the residual for the current statistical series in
accordance with the regression line constructed using
LeastSquaresRegressionLineX.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Residuals(System.String,dotnetCHARTING.Series)">
            <summary>Determines the residual for the current statistical series in
accordance with the regression line constructed using
LeastSquaresRegressionLineX.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Residuals(dotnetCHARTING.Series)">
            <summary>Determines the residual for the current statistical series in
accordance with the regression line constructed using
LeastSquaresRegressionLineX.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Residuals(dotnetCHARTING.SeriesCollection)">
            <summary>Determines the residual for the current statistical series in
accordance with the regression line constructed using
LeastSquaresRegressionLineX.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ResidualsAverage">
            <summary>Determines the arithmetic average of the residuals for all
pairs of points within the current statistical series in accordance
with the regression line constructed using
LeastSquaresRegressionLineX.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ResidualsAverage(System.String,dotnetCHARTING.Series)">
            <summary>Determines the arithmetic average of the residuals for all
pairs of points within the current statistical series in accordance
with the regression line constructed using
LeastSquaresRegressionLineX.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ResidualsAverage(dotnetCHARTING.Series)">
            <summary>Determines the arithmetic average of the residuals for all
pairs of points within the current statistical series in accordance
with the regression line constructed using
LeastSquaresRegressionLineX.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ResidualsAverage(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Determines the arithmetic average of the residuals for all
pairs of points within the current statistical series in accordance
with the regression line constructed using
LeastSquaresRegressionLineX.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ResidualsAverage(dotnetCHARTING.SeriesCollection)">
            <summary>Determines the arithmetic average of the residuals for all
pairs of points within the current statistical series in accordance
with the regression line constructed using
LeastSquaresRegressionLineX.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOL">
            <summary>Calculates the relative frequency table for a discrete data
set in accordance with the open left boundary (OLB)
convention.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOL(System.String,dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the relative frequency table for a discrete data
set in accordance with the open left boundary (OLB)
convention.</summary>
            <remarks>    The relative frequency table normalized the data with regard to
    the size of the data set before evaluating the frequency table
    is exactly the same fashion as StatisticalFrequencyTableOL. 
    Further Explanation
    If we are comparing two or more data sets then the
    frequencies should be normalized to reflect the possible
    different sizes of the data sets themselves. To normalize a
    data set we much first divide the data set into a collection of
    classes into which the elements are assigned. Here we assign
    the data set in accordance with the open left boundary
    convention where the class frequencies are just the number of
    elements within each of the sub-intervals of the real line in
    accordance with the open left boundary convention (see example
    below).
    To evaluate the relative frequency we apply the following
    formula to each class:
    
    Relative frequency = (class frequency) / (total
    frequency)
    
    where the class frequency is the number of data points within a
    given sub-interval of the real line, and the total frequency is
    the total number of elements within the data set
    considered.
    Example Illustration the Open Left Boundary Convention
    Consider the set of boundaries { b_1, b_2, b_3, b_4,
    b_5 }, where b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt;
    b_5, which divide the real line into six sub-intervals. Now
    if we use the open left boundary convention then the real line
    will be divided into the sub-intervals:
    
    (-infinity, b_1], (b_1,b_2], (b_2,b_3], (b_3,b_4], (b_4,b_5],
    (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOL(dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the relative frequency table for a discrete data
set in accordance with the open left boundary (OLB)
convention.</summary>
            <remarks>    The relative frequency table normalized the data with regard to
    the size of the data set before evaluating the frequency table
    is exactly the same fashion as StatisticalFrequencyTableOL. 
    Further Explanation
    If we are comparing two or more data sets then the
    frequencies should be normalized to reflect the possible
    different sizes of the data sets themselves. To normalize a
    data set we much first divide the data set into a collection of
    classes into which the elements are assigned. Here we assign
    the data set in accordance with the open left boundary
    convention where the class frequencies are just the number of
    elements within each of the sub-intervals of the real line in
    accordance with the open left boundary convention (see example
    below).
    To evaluate the relative frequency we apply the following
    formula to each class:
    
    Relative frequency = (class frequency) / (total
    frequency)
    
    where the class frequency is the number of data points within a
    given sub-interval of the real line, and the total frequency is
    the total number of elements within the data set
    considered.
    Example Illustration the Open Left Boundary Convention
    Consider the set of boundaries { b_1, b_2, b_3, b_4,
    b_5 }, where b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt;
    b_5, which divide the real line into six sub-intervals. Now
    if we use the open left boundary convention then the real line
    will be divided into the sub-intervals:
    
    (-infinity, b_1], (b_1,b_2], (b_2,b_3], (b_3,b_4], (b_4,b_5],
    (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.</remarks>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOL(dotnetCHARTING.SeriesCollection,System.Double[])">
            <summary>Calculates the relative frequency table for a discrete data
set in accordance with the open left boundary (OLB)
convention.</summary>
            <remarks>    The relative frequency table normalized the data with regard to
    the size of the data set before evaluating the frequency table
    is exactly the same fashion as StatisticalFrequencyTableOL. 
    Further Explanation
    If we are comparing two or more data sets then the
    frequencies should be normalized to reflect the possible
    different sizes of the data sets themselves. To normalize a
    data set we much first divide the data set into a collection of
    classes into which the elements are assigned. Here we assign
    the data set in accordance with the open left boundary
    convention where the class frequencies are just the number of
    elements within each of the sub-intervals of the real line in
    accordance with the open left boundary convention (see example
    below).
    To evaluate the relative frequency we apply the following
    formula to each class:
    
    Relative frequency = (class frequency) / (total
    frequency)
    
    where the class frequency is the number of data points within a
    given sub-interval of the real line, and the total frequency is
    the total number of elements within the data set
    considered.
    Example Illustration the Open Left Boundary Convention
    Consider the set of boundaries { b_1, b_2, b_3, b_4,
    b_5 }, where b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt;
    b_5, which divide the real line into six sub-intervals. Now
    if we use the open left boundary convention then the real line
    will be divided into the sub-intervals:
    
    (-infinity, b_1], (b_1,b_2], (b_2,b_3], (b_3,b_4], (b_4,b_5],
    (5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOR">
            <summary>Calculates the relative frequency table for a discrete data
set in accordance with the open right boundary (ORB)
convention.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOR(System.String,dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the relative frequency table for a discrete data
set in accordance with the open right boundary (ORB)
convention.</summary>
            <remarks>    The relative frequency table normalized the data with regard to
    the size of the data set before evaluating the frequency table
    is exactly the same fashion as StatisticalFrequencyTableOL. 
    Further Explanation
    If we are comparing two or more data sets then the
    frequencies should be normalized to reflect the possible
    different sizes of the data sets themselves. To normalize a
    data set we much first divide the data set into a collection of
    classes into which the elements are assigned. Here we assign
    the data set in accordance with the open right boundary
    convention where the class frequencies are just the number of
    elements within each of the sub-intervals of the real line in
    accordance with the open right boundary convention (see example
    below).
    To evaluate the relative frequency we apply the following
    formula to each class:
    
    Relative frequency = (class frequency) / (total
    frequency)
    
    where the class frequency is the number of data points within a
    given sub-interval of the real line, and the total frequency is
    the total number of elements within the data set
    considered.
    Example Illustration the Open Right Boundary
    Convention
    Consider the set of boundaries { b_1, b_2, b_3, b_4,
    b_5 }, where b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt;
    b_5, which divide the real line into six sub-intervals. Now
    if we use the open right boundary convention then the real line
    will be divided into the sub-intervals:
    
    (-infinity, b_1), [b_1,b_2), [b_2,b_3), [b_3,b_4), [b_4,b_5),
    [b_5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOR(dotnetCHARTING.Series,System.Double[])">
            <summary>Calculates the relative frequency table for a discrete data
set in accordance with the open right boundary (ORB)
convention.</summary>
            <remarks>    The relative frequency table normalized the data with regard to
    the size of the data set before evaluating the frequency table
    is exactly the same fashion as StatisticalFrequencyTableOL. 
    Further Explanation
    If we are comparing two or more data sets then the
    frequencies should be normalized to reflect the possible
    different sizes of the data sets themselves. To normalize a
    data set we much first divide the data set into a collection of
    classes into which the elements are assigned. Here we assign
    the data set in accordance with the open right boundary
    convention where the class frequencies are just the number of
    elements within each of the sub-intervals of the real line in
    accordance with the open right boundary convention (see example
    below).
    To evaluate the relative frequency we apply the following
    formula to each class:
    
    Relative frequency = (class frequency) / (total
    frequency)
    
    where the class frequency is the number of data points within a
    given sub-interval of the real line, and the total frequency is
    the total number of elements within the data set
    considered.
    Example Illustration the Open Right Boundary
    Convention
    Consider the set of boundaries { b_1, b_2, b_3, b_4,
    b_5 }, where b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt;
    b_5, which divide the real line into six sub-intervals. Now
    if we use the open right boundary convention then the real line
    will be divided into the sub-intervals:
    
    (-infinity, b_1), [b_1,b_2), [b_2,b_3), [b_3,b_4), [b_4,b_5),
    [b_5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.</remarks>
            <param name="s">A statistical series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOR(dotnetCHARTING.SeriesCollection,System.Double[])">
            <summary>Calculates the relative frequency table for a discrete data
set in accordance with the open right boundary (ORB)
convention.</summary>
            <remarks>    The relative frequency table normalized the data with regard to
    the size of the data set before evaluating the frequency table
    is exactly the same fashion as StatisticalFrequencyTableOL. 
    Further Explanation
    If we are comparing two or more data sets then the
    frequencies should be normalized to reflect the possible
    different sizes of the data sets themselves. To normalize a
    data set we much first divide the data set into a collection of
    classes into which the elements are assigned. Here we assign
    the data set in accordance with the open right boundary
    convention where the class frequencies are just the number of
    elements within each of the sub-intervals of the real line in
    accordance with the open right boundary convention (see example
    below).
    To evaluate the relative frequency we apply the following
    formula to each class:
    
    Relative frequency = (class frequency) / (total
    frequency)
    
    where the class frequency is the number of data points within a
    given sub-interval of the real line, and the total frequency is
    the total number of elements within the data set
    considered.
    Example Illustration the Open Right Boundary
    Convention
    Consider the set of boundaries { b_1, b_2, b_3, b_4,
    b_5 }, where b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt;
    b_5, which divide the real line into six sub-intervals. Now
    if we use the open right boundary convention then the real line
    will be divided into the sub-intervals:
    
    (-infinity, b_1), [b_1,b_2), [b_2,b_3), [b_3,b_4), [b_4,b_5),
    [b_5, infinity)
    
    Note that, each point on the real line can be assigned to one
    of these sub-intervals and therefore when assigning a data
    point to one of these intervals there will only be one
    sub-interval in which it belongs.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="boundaries">A strictly increasing sequence of boundaries of the intervals
over the real line in which the data sets point will be
assigned.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RunChart">
            <summary>Create the run chart for a given series.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RunChart(System.String,dotnetCHARTING.Series)">
            <summary>Create the run chart for a given series.</summary>
            <returns>An element with his YValue representing the arithmetic mean
of the elements YValues of the series</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RunChart(dotnetCHARTING.Series)">
            <summary>Create the run chart for a given series.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RunChart(dotnetCHARTING.SeriesCollection)">
            <summary>Create the run chart for a given SeriesCollection
object.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RXBARChart">
            <summary>Create the XBAR Chart based on R Chart results for a given
SeriesCollection object.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RXBARChart(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Create the XBAR Chart based on R Chart results for a given
SeriesCollection object.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.RXBARChart(dotnetCHARTING.SeriesCollection)">
            <summary>Create the XBAR Chart based on R Chart for a given
SeriesCollection object.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SChart">
            <summary>Create the S Chart chart for a given SeriesCollection
object.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SChart(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Create the S Chart chart for a given SeriesCollection
object.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SChart(dotnetCHARTING.SeriesCollection)">
            <summary>Create the S Chart chart for a given SeriesCollection
object.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage">
            <summary>Calculates the arithmetic(or simple) Moving Average (MA) of a
given period for all possible data points (i.e. periods) for which
there is sufficient historical data provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Calculates the arithmetic(or simple) Moving Average (MA) of a
given period for all possible data points (i.e. periods) for which
there is sufficient historical data provided.</summary>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average for each of the periods on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(dotnetCHARTING.Series,System.Int32)">
            <summary>Calculates the arithmetic(or simple) Moving Average (MA) of a
given period for all possible data points (i.e. periods) for which
there is sufficient historical data provided.</summary>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="s">A statistical series.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average for each of the periods on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Calculates the arithmetic(or simple) Moving Average (MA) of a
given period for all possible data points (i.e. periods) for which
there is sufficient historical data provided.</summary>
            <returns>A series where the first term corresponds to the Moving
Average on the last period and the previous value is the value of
the Moving average on the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfMA">The number of periods considered within the evaluation of the
moving average for each of the periods on which it can be
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Skewness">
            <summary>Calculates the skewness of the currently registered data
set.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Skewness(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the skewness of the currently registered data
set.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Skewness(dotnetCHARTING.Series)">
            <summary>Calculates the skewness of the currently registered data
set.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Skewness(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the skewness of the currently registered data
set.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Skewness(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the skewness of the currently registered data
set.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SpearmanRankCorrelationTest">
            <summary>Calculates Spearson's Rank correlation coefficient for the
current data set.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SpearmanRankCorrelationTest(System.String,dotnetCHARTING.Series)">
            <summary>Calculates Spearson's Rank correlation coefficient for the
current data set.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SpearmanRankCorrelationTest(dotnetCHARTING.Series)">
            <summary>Calculates Spearson's Rank correlation coefficient for the
current data set.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SpearmanRankCorrelationTest(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates Spearson's Rank correlation coefficient for the
current data set.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SpearmanRankCorrelationTest(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates Spearson's Rank correlation coefficient for the
current data set.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.StandardDeviation">
            <summary>Calculates the sample standard variance of the series's
elements YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the sample standard variance of the series's
elements YValues.</summary>
            <remarks>    Remark: The units of the Sample Standard Deviation
    will correspond to the units used by the observations (i.e. the
    units of the members of the data set). In many instances it is
    convenient that the units used for the observations corresponds
    to the units used for a measure of the sets deviations. This
    differs from the Series) in which the deviation is measured in
    units which are the squares of the units of the
    observations.</remarks>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(dotnetCHARTING.Series)">
            <summary>Calculates the sample standard variance of the series's
elements YValues.</summary>
            <remarks>    Remark: The units of the Sample Standard Deviation
    will correspond to the units used by the observations (i.e. the
    units of the members of the data set). In many instances it is
    convenient that the units used for the observations corresponds
    to the units used for a measure of the sets deviations. This
    differs from the Series) in which the deviation is measured in
    units which are the squares of the units of the
    observations.</remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the sample standard variance of the series's
elements YValues.</summary>
            <remarks>    Remark: The units of the Sample Standard Deviation
    will correspond to the units used by the observations (i.e. the
    units of the members of the data set). In many instances it is
    convenient that the units used for the observations corresponds
    to the units used for a measure of the sets deviations. This
    differs from the Series) in which the deviation is measured in
    units which are the squares of the units of the
    observations.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the sample standard variance of the series's
elements YValues.</summary>
            <remarks>    Remark: The units of the Sample Standard Deviation
    will correspond to the units used by the observations (i.e. the
    units of the members of the data set). In many instances it is
    convenient that the units used for the observations corresponds
    to the units used for a measure of the sets deviations. This
    differs from the Series) in which the deviation is measured in
    units which are the squares of the units of the
    observations.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SXBARChart">
            <summary>Create the XBAR Chart based on S Chart results for a given
SeriesCollection object.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SXBARChart(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Create the XBAR Chart based on S Chart results for a given
SeriesCollection object.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.SXBARChart(dotnetCHARTING.SeriesCollection)">
            <summary>Create the XBAR Chart based on S Chart for a given
SeriesCollection object.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.TriangularMovingAverage">
            <summary>Evaluates the x-period Triangular Moving Average (TMA)
where x corresponds to the length of the time series array
given as a parameter, for all periods for which sufficient data is
provided.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.TriangularMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluates the x-period Triangular Moving Average (TMA)
where x corresponds to the length of the time series array
given as a parameter, for all periods for which sufficient data is
provided.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.TriangularMovingAverage(dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluates the x-period Triangular Moving Average (TMA)
where x corresponds to the length of the time series array
given as a parameter, for all periods for which sufficient data is
provided.</summary>
            <param name="s">A statistical series.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.TriangularMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)">
            <summary>Evaluates the x-period Triangular Moving Average (TMA)
where x corresponds to the length of the time series array
given as a parameter, for all periods for which sufficient data is
provided.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="lengthOfMA">The number of periods over which the moving average is
evaluated for each period.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.UpperBollingerBands">
            <summary>Evaluates the position of the Upper Bollinger Band for a
given standard deviation level.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.UpperBollingerBands(System.String,dotnetCHARTING.Series,System.Double,System.Int32)">
            <summary>Evaluates the position of the Upper Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Higher Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series where the first term correspond the latest periods
value and the previous element is the value of the element before
that and so on... The length of this series is equal to the number
of periods used in the evaluation of the standard deviation.</param>
            <param name="standardDeviationLevel">The (positive) number of standard deviations which the lower
band in shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.UpperBollingerBands(dotnetCHARTING.Series,System.Double,System.Int32)">
            <summary>Evaluates the position of the Upper Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Higher Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="s">An series where the first term correspond the latest periods
value and the previous element is the value of the element before
that and so on... The length of this series is equal to the number
of periods used in the evaluation of the standard deviation.</param>
            <param name="standardDeviationLevel">The (positive) number of standard deviations which the lower
band in shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.UpperBollingerBands(dotnetCHARTING.SeriesCollection,System.Double,System.Int32)">
            <summary>Evaluates the position of the Upper Bollinger Band for a
given standard deviation level.</summary>
            <remarks>Please note that by standard deviation level we not only
refer to the number of standard deviations shifts away from the
moving average at which the Higher Bollinger Band is drawn but also
the number of time series points which are used in the evaluation
of the standard deviation and the moving average.</remarks>
            <returns>A series where the first term corresponds to the value of the
Upper Bollinger Band for the latest periods, the second terms to
the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="standardDeviationLevel">The (positive) number of standard deviations which the lower
band in shifted from the moving average.</param>
            <param name="lengthOfMA">The length of the moving average used within the evaluation
of the Bollinger Bands. Note that this also corresponds to the
length of the period over which the standard deviation is
evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Variance">
            <summary>Calculates the sample variance of the series's elements
YValues.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Variance(System.String,dotnetCHARTING.Series)">
            <summary>Calculates the sample variance of the series's elements
YValues.</summary>
            <param name="elementName">The name of the element which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.Series)">
            <summary>Calculates the sample variance of the series's elements
YValues.</summary>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Variance(System.String,dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the sample variance of the series's elements
YValues.</summary>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.SeriesCollection)">
            <summary>Calculates the sample variance of the series's elements
YValues.</summary>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage">
            <summary>Evaluate the Weighted Moving Average(WMA) where the weights
associated to all the elements of the historical values are given
and the WMA is evaluated for all periods for which there is
sufficient historical data.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluate the Weighted Moving Average(WMA) where the weights
associated to all the elements of the historical values are given
and the WMA is evaluated for all periods for which there is
sufficient historical data.</summary>
            <remarks>    That is, the weights are fixed for all given historical values
    and the window of length lengthOfMA over which the GMA
    is evaluated is shifted along the series. 
    Application
    Generally speaking the WMA where the weights are all set
    and the window over which GMA is evaluated is shifted is used
    when you wish to give emphasis to particular dates.
    Note: The length of the weights array must
    equal or be greater than the length of the
    historicalPrices series. If it's greater than we ignore
    the supplementary values.</remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An statistical series</param>
            <param name="weightSeries">A series of doubles which assigns weights to the k-th
previous historical values for the given period on which the moving
average is being evaluated. Here k is just the length of the
weights array given.</param>
            <param name="lengthOfMA">The number of periods over which the weighted moving average
is evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluate the Weighted Moving Average(WMA) where the weights
associated to all the elements of the historical values are given
and the WMA is evaluated for all periods for which there is
sufficient historical data.</summary>
            <remarks>    That is, the weights are fixed for all given historical values
    and the window of length lengthOfMA over which the GMA
    is evaluated is shifted along the series. 
    Application
    Generally speaking the WMA where the weights are all set
    and the window over which GMA is evaluated is shifted is used
    when you wish to give emphasis to particular dates.
    Note: The length of the weights array must
    equal or be greater than the length of the
    historicalPrices series. If it's greater than we ignore
    the supplementary values.</remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="s">An statistical series</param>
            <param name="weightSeries">A series of doubles which assigns weights to the k-th
previous historical values for the given period on which the moving
average is being evaluated. Here k is just the length of the
weights array given.</param>
            <param name="lengthOfMA">The number of periods over which the weighted moving average
is evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series,System.Int32)">
            <summary>Evaluate the Weighted Moving Average(WMA) where the weights
associated to all the elements of the historical values are given
and the WMA is evaluated for all periods for which there is
sufficient historical data.</summary>
            <remarks>    That is, the weights are fixed for all given historical values
    and the window of length lengthOfMA over which the GMA
    is evaluated is shifted along the series. 
    Application
    Generally speaking the WMA where the weights are all set
    and the window over which GMA is evaluated is shifted is used
    when you wish to give emphasis to particular dates.
    Note: The length of the weights array must
    equal or be greater than the length of the
    historicalPrices series. If it's greater than we ignore
    the supplementary values.</remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="weightSeries">A series of doubles which assigns weights to the k-th
previous historical values for the given period on which the moving
average is being evaluated. Here k is just the length of the
weights array given.</param>
            <param name="lengthOfMA">The number of periods over which the weighted moving average
is evaluated.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,System.Double[])">
            <summary>Here we evaluate the Weighted Moving Average(WMA) where for
each period for which the WMA is evaluated the historical terms are
weighted in accordance with the same set of weights.</summary>
            <remarks>    I.e. The weights shift with the window of the historical
    values. 
    Application
    
        Generally speaking the WMA is used in order to allow more
        weight to be assigned to more resent price dynamics. Here
        the length of the weights array is used as the length of
        the period over which the moving average is calculated. If
        you wish to control the number of periods used within the
        moving average then we refer you to 
        

(historicalPrices,
            weights, lengthOfMovingAverage)

        .
    </remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">An series of historical values, where the first element
corresponds to the market on the last period, the second term to
the value on previous period and so on.</param>
            <param name="weights">Array of doubles which assigns weights to the k-th previous
historical values for the given period on which the moving average
is being evaluated. Here k is just the length of the weights array
given.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(dotnetCHARTING.Series,System.Double[])">
            <summary>Here we evaluate the Weighted Moving Average(WMA) where for
each period for which the WMA is evaluated the historical terms are
weighted in accordance with the same set of weights.</summary>
            <remarks>    I.e. The weights shift with the window of the historical
    values. 
    Application
    
        Generally speaking the WMA is used in order to allow more
        weight to be assigned to more resent price dynamics. Here
        the length of the weights array is used as the length of
        the period over which the moving average is calculated. If
        you wish to control the number of periods used within the
        moving average then we refer you to 
        

(historicalPrices, weights, lengthOfMovingAverage)

        .
    </remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="s">An series of historical values, where the first element
corresponds to the market on the last period, the second term to
the value on previous period and so on.</param>
            <param name="weights">Array of doubles which assigns weights to the k-th previous
historical values for the given period on which the moving average
is being evaluated. Here k is just the length of the weights array
given.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(dotnetCHARTING.SeriesCollection,System.Double[])">
            <summary>Here we evaluate the Weighted Moving Average(WMA) where for
each period for which the WMA is evaluated the historical terms are
weighted in accordance with the same set of weights.</summary>
            <remarks>    I.e. The weights shift with the window of the historical
    values. 
    Application
    
        Generally speaking the WMA is used in order to allow more
        weight to be assigned to more resent price dynamics. Here
        the length of the weights array is used as the length of
        the period over which the moving average is calculated. If
        you wish to control the number of periods used within the
        moving average then we refer you to 
        

(historicalPrices,
            weights, lengthOfMovingAverage)

        .
    </remarks>
            <returns>A series where the first term is the value of the moving
average corresponding of the latest period, the second term is the
value for the previous period and so on.</returns>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
            <param name="weights">Array of doubles which assigns weights to the k-th previous
historical values for the given period on which the moving average
is being evaluated. Here k is just the length of the weights array
given.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ZScore">
            <summary>Evaluates the z-score (often referred to as the standardized
value) of an element series's element values.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ZScore(System.String,dotnetCHARTING.Series)">
            <summary>Evaluates the z-score (often referred to as the standardized
value) of an element series's element values.</summary>
            <remarks>The z-score denotes the number of standard deviations of a
given element of the data set is from the mean of the data
set.</remarks>
            <param name="seriesName">The name of the series which will be displayed on the chart,
i.e. its label.</param>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ZScore(dotnetCHARTING.Series)">
            <summary>Evaluates the z-score (often referred to as the standardized
value) of an element series's element values.</summary>
            <remarks>The z-score denotes the number of standard deviations of a
given element of the data set is from the mean of the data
set.</remarks>
            <param name="s">A statistical series.</param>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine.ZScore(dotnetCHARTING.SeriesCollection)">
            <summary>Evaluates the z-score (often referred to as the standardized
value) of an element series's element values.</summary>
            <remarks>The z-score denotes the number of standard deviations of a
given element of the data set is from the mean of the data
set.</remarks>
            <param name="sc">A collection of series objects. For example, to evaluate this
indicator for two series you will need to pass a series collection
containing this two series.</param>
        </member>
        <member name="T:dotnetCHARTING.StatisticalEngine+Options">
            <summary>Defines a set of static options used with StatisticalEngine
calculations.</summary>
        </member>
        <member name="M:dotnetCHARTING.StatisticalEngine+Options.Reset">
            <summary>Resets the options to default settings.</summary>
        </member>
        <member name="P:dotnetCHARTING.StatisticalEngine+Options.MatchColors">
            <summary>Gets or sets a value that indicates whether calculated
elements will use the same colors that are assigned to original
series. Both, the original and derived data objects must be placed
on the same chart to enable this feature.</summary>
        </member>
        <member name="P:dotnetCHARTING.StatisticalEngine+Options.PopulateSubValues">
            <summary>Gets or sets a static value that determines whether elements
derived from series will contain values of the original elements as
dotnetCHARTING.SubValue objects.</summary>
        </member>
        <member name="T:dotnetCHARTING.SubValue">
            <summary>Represents a value relative to or independent of the parent
element's value.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValue.FromHighLowValue(System.Double,System.Double)">
            <summary>Creates a new instance of a SubValue object with an
independent range based on the specified low and high
values.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValue.FromOffset(System.Double)">
            <summary>Creates a new instance of a SubValue class with a single
value offset from an element's Yvalue.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValue.FromPercent(System.Double)">
            <summary>Creates a new instance of a SubValue class with a single
value based on the specified percentage of the related element's
Yvalue.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValue.FromPlusMinusOffset">
            <summary>Creates a new instance of a SubValue class with a different
range offset from an element's Yvalue in both directions. Hence,
the resulting range will be the sum of the high and low offset
values.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValue.FromPlusMinusOffset(System.Double,System.Double)">
            <summary>Creates a new instance of a SubValue class with a different
range offset from an element's Yvalue in both directions. Hence,
the resulting range will be the sum of the high and low offset
values.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValue.FromPlusMinusOffset(System.Double)">
            <summary>Creates a new instance of a SubValue class with a range
offset from an element's Yvalue in both directions. Hence, the
resulting range will be twice the specified offset value.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValue.FromPlusMinusPercent">
            <summary>Creates a new instance of a SubValue class with a range based
on the specified percentage of the related element's Yvalue in both
directions. Hence, the resulting range will be twice the specified
percentage.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValue.FromPlusMinusPercent(System.Double)">
            <summary>Creates a new instance of a SubValue class with a range based
on the specified percentage of the related element's Yvalue in both
directions. Hence, the resulting range will be twice the specified
percentage.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValue.FromPlusMinusPercent(System.Double,System.Double)">
            <summary>Creates a new instance of a SubValue class with a range based
on the specified percentage of the related element's Yvalue in both
directions. Hence, the resulting range will be twice the specified
percentage.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValue.FromValue(System.Double)">
            <summary>Creates a new instance of a SubValue class with a single
independent value.</summary>
        </member>
        <member name="P:dotnetCHARTING.SubValue.Line">
            <summary>Gets or sets a Line object used to draw the lines of this
SubValue.</summary>
        </member>
        <member name="P:dotnetCHARTING.SubValue.Marker">
            <summary>Gets or sets an ElementMarker object drawn when the
SubValue's type is set to SubValueType.Marker..</summary>
        </member>
        <member name="P:dotnetCHARTING.SubValue.Type">
            <summary>Gets or sets a SubValueType that determines how this sub
value is drawn.</summary>
        </member>
        <member name="T:dotnetCHARTING.SubValueCollection">
            <summary>Contains a collection of SubValue objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValueCollection.#ctor(dotnetCHARTING.SubValue[])">
            <summary>Creates a new instance of SubValueCollection with the
specified list of SubValue objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValueCollection.Add">
            <summary>Adds a specified SubValueCollection to this
collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.SubValueCollection.Add(dotnetCHARTING.SubValueCollection)">
            <summary>Adds a specified SubValueCollection to this
collection.</summary>
            <param name="subValueCollection">The SubValueCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.SubValueCollection.Add(dotnetCHARTING.SubValue[])">
            <summary>Adds the specified SubValue objects to this
collection.</summary>
            <param name="subValueList">A list of SubValue objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.SubValueCollection.Contains(dotnetCHARTING.SubValue)">
            <summary>Determines whether this collection contains a specified
SubValue.</summary>
            <returns>true if the specified SubValue belongs to this collection;
otherwise, false.</returns>
            <param name="subValue">The SubValue to find.</param>
        </member>
        <member name="M:dotnetCHARTING.SubValueCollection.IndexOf(dotnetCHARTING.SubValue)">
            <summary>Determines index of a specified SubValue in this
collection.</summary>
            <returns>The zero-based index of the specified SubValue.</returns>
            <param name="subValue">The SubValue to find.</param>
        </member>
        <member name="M:dotnetCHARTING.SubValueCollection.Insert(System.Int32,dotnetCHARTING.SubValue)">
            <summary>Inserts a SubValue into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the SubValue.</param>
            <param name="subValue">The SubValue to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.SubValueCollection.Remove(dotnetCHARTING.SubValue)">
            <summary>Removes a specified SubValue from this collection.</summary>
            <param name="subValue">The SubValue to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.SubValueCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.TimeIntervalAdvanced">
            <summary>Represents a time interval and instant at which it
occurs.</summary>
            <remarks>This time is specific down to the millisecond.</remarks>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalAdvanced.#ctor">
            <summary>Creates a new instance of TimeIntervalAdvanced with a custom
time span.</summary>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalAdvanced.#ctor(dotnetCHARTING.TimeInterval,System.Int32)">
            <summary>Creates a new instance of TimeIntervalAdvanced with a
TimeInterval and a factor by which the interval is
multiplied.</summary>
            <param name="interval">A base TimeInterval enumeration.</param>
            <param name="factor">Factor by which the to multiple the TimeInterval.</param>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalAdvanced.#ctor(System.TimeSpan)">
            <summary>Creates a new instance of TimeIntervalAdvanced with a custom
time span.</summary>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalAdvanced.AddTimeInterval(System.DateTime,dotnetCHARTING.TimeInterval)">
            <summary>Adds a TimeInterval to the specified DateTime.</summary>
            <param name="lhs">The date to add to.</param>
            <param name="rhs">The TimeInterval to add.</param>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalAdvanced.SubtractTimeInterval(System.DateTime,dotnetCHARTING.TimeInterval)">
            <summary>Subtracts a TimeInterval from the specified DateTime.</summary>
            <param name="lhs">The date to subtract from.</param>
            <param name="rhs">The TimeInterval to add.</param>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.op_Addition">
            <summary>Adds a TimeIntervalAdvanced to a DateTime object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.op_Addition">
            <summary>Adds a TimeIntervalAdvanced to a DateTime object.</summary>
            <returns/>
            <param name="lhs">Added to DateTime.</param>
            <param name="rhs">TimeIntervalAdvanced to add.</param>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.op_Addition">
            <summary>Adds a TimeIntervalAdvanced to a DateTime object.</summary>
            <returns/>
            <param name="lhs">TimeIntervalAdvanced to add.</param>
            <param name="rhs">Added to DateTime.</param>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.op_Equality">
            <summary>Indicates whether a specified TimeIntervalAdvanced is equal
to another TimeIntervalAdvanced.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.op_Equality">
            <summary>Indicates whether a specified TimeIntervalAdvanced is equal
to a specified TimeInterval enumeration.</summary>
            <returns/>
            <param name="lhs">TimeIntervalAdvanced to compare.</param>
            <param name="rhs">TimeInterval to compare.</param>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.op_Equality">
            <summary>Indicates whether a specified TimeIntervalAdvanced is equal
to another TimeIntervalAdvanced.</summary>
            <returns/>
            <param name="lhs">left TimeIntervalAdvanced</param>
            <param name="rhs">right TimeIntervalAdvanced</param>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.op_Inequality">
            <summary>Indicates whether a TimeInterval and TimeIntervalAdvanced are
not equal.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.op_Inequality">
            <summary>Indicates whether a TimeInterval and TimeIntervalAdvanced are
not equal.</summary>
            <returns/>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.op_Inequality">
            <summary>Indicates whether two TimeIntervalAdvanced instances are not
equal.</summary>
            <returns/>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.op_Subtraction">
            <summary>Subtracts a TimeIntervalAdvanced from a DateTime
object.</summary>
            <returns/>
            <param name="lhs">DateTime to subtract from.</param>
            <param name="rhs">TimeIntervalAdvanced to subtract.</param>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Day">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Days">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Hour">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Hours">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Milliseconds">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Minutes">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Month">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Months">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Multiplier">
            <summary>Gets or sets the factor by which this time interval is
multiplied.</summary>
            <remarks>If TimeSpan is specified, this property will not have any
effect.</remarks>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.None">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Quarter">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Quarters">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Seconds">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Start">
            <summary>Gets or sets a DateTime object representing the time instant
at which this interval initially occurs.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.StartDayOfWeek">
            <summary>Gets or sets the day of the week at which this interval
initially occurs. Value ranges from zero indicating Sunday, to six,
indicating Saturday.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.StartMonth">
            <summary>Gets or sets the month of year at which this interval
initially occurs. Value ranges from zero indicating January, to
eleven, indicating December.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.TimeSpan">
            <summary>Gets or sets a custom time span between each time instant
occurrence.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Week">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Weeks">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Year">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalAdvanced.Years">
            <summary>Gets a system-defined TimeIntervalAdvanced object.</summary>
        </member>
        <member name="T:dotnetCHARTING.TimeIntervalCollection">
            <summary>Contains a collection of TimeInterval objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalCollection.#ctor(dotnetCHARTING.TimeInterval[])">
            <summary>Creates a new instance of TimeIntervalCollection with the
specified list of TimeInterval objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalCollection.Add">
            <summary>Adds a specified TimeIntervalCollection to this
collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalCollection.Add(dotnetCHARTING.TimeIntervalCollection)">
            <summary>Adds a specified TimeIntervalCollection to this
collection.</summary>
            <param name="timeIntervalCollection">The TimeIntervalCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalCollection.Add(dotnetCHARTING.TimeInterval[])">
            <summary>Adds the specified TimeInterval objects to this
collection.</summary>
            <param name="timeIntervalList">A list of TimeInterval objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalCollection.Contains(dotnetCHARTING.TimeInterval)">
            <summary>Determines whether this collection contains a specified
TimeInterval.</summary>
            <returns>true if the specified TimeInterval belongs to this
collection; otherwise, false.</returns>
            <param name="timeInterval">The TimeInterval to find.</param>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalCollection.IndexOf(dotnetCHARTING.TimeInterval)">
            <summary>Determines index of a specified TimeInterval in this
collection.</summary>
            <returns>The zero-based index of the specified TimeInterval.</returns>
            <param name="timeInterval">The TimeInterval to find.</param>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalCollection.Insert(System.Int32,dotnetCHARTING.TimeInterval)">
            <summary>Inserts a TimeInterval into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the TimeInterval.</param>
            <param name="timeInterval">The TimeInterval to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.TimeIntervalCollection.Remove(dotnetCHARTING.TimeInterval)">
            <summary>Removes a specified TimeInterval from this collection.</summary>
            <param name="timeInterval">The TimeInterval to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.TimeIntervalCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.Truncation">
            <summary>Defines properties used to shorten long labels.</summary>
        </member>
        <member name="M:dotnetCHARTING.Truncation.#ctor">
            <summary>Initializes a new instance of the Truncation class.</summary>
        </member>
        <member name="P:dotnetCHARTING.Truncation.Length">
            <summary>Gets or sets the maximum number of characters a label is
shortened to.</summary>
        </member>
        <member name="P:dotnetCHARTING.Truncation.Mode">
            <summary>Gets or sets the TruncationMode used to shorten this
label.</summary>
        </member>
        <member name="P:dotnetCHARTING.Truncation.Text">
            <summary>Gets or sets a string that defines text inserted into a
string at the position it was trimmed.

Default is '...'</summary>
        </member>
        <member name="T:dotnetCHARTING.Mapping.ProjectionType">
            <summary>Defines a type of projection used for rendering maps.</summary>
        </member>
        <member name="F:dotnetCHARTING.Mapping.ProjectionType.Unprojected">
            <summary>Specifies an unprojected map view.</summary>
        </member>
        <member name="F:dotnetCHARTING.Mapping.ProjectionType.Mercator">
            <summary>Specified the Mercator projection type.</summary>
        </member>
        <member name="F:dotnetCHARTING.Mapping.ProjectionType.LambertConic">
            <summary>Specified the Lambert Conic projection type.</summary>
        </member>
        <member name="T:dotnetCHARTING.Mapping.Group">
            <summary>Represents a single or multiple conditions that are used to
group shapes within a map layer. This object is used with
MapLayer.Groups.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Group.#ctor">
            <summary>Initializes a new instance of the Group object with
the specified name.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Group.#ctor">
            <summary>Initializes a new instance of the Group object.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Group.#ctor(dotnetCHARTING.Label)">
            <summary>Initializes a new instance of the Group object with a
specified label.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Group.#ctor(System.String)">
            <summary>Initializes a new instance of the Group object with
the specified name.</summary>
            <param name="groupName">Name of this group</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Group.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the Group object with a
specified condition.</summary>
            <param name="attribute">Attribute to compare</param>
            <param name="attributeValue">Value that must me matched.</param>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Group.Conditions">
            <summary>Gets a collection of conditions that shapes within this group
must meet.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Group.DefaultShape">
            <summary>Gets or sets a shape object that holds the default settings
for shapes in this group.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Group.Label">
            <summary>Gets or sets a single Label object used for this entire group
of shapes.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Group.Name">
            <summary>Gets or sets the name of this group.</summary>
        </member>
        <member name="T:dotnetCHARTING.Mapping.GroupCollection">
            <summary>Contains a collection of Group objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.#ctor(dotnetCHARTING.Mapping.Group[])">
            <summary>Creates a new instance of GropuCollection with the specified
list of Group objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.Add">
            <summary>Adds a specified GroupCollection to this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.Add(dotnetCHARTING.Mapping.GroupCollection)">
            <summary>Adds a specified GroupCollection to this collection.</summary>
            <param name="groupCollection">The GropuCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.Add(dotnetCHARTING.Mapping.Group[])">
            <summary>Adds the specified Group objects to this collection.</summary>
            <param name="groupList">A list of Group objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.Contains">
            <summary>Determines whether this collection contains a Group with the
specified name.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.Contains(System.String)">
            <summary>Determines whether this collection contains a Group with the
specified name.</summary>
            <returns>true if the specified Group belongs to this collection;
otherwise, false.</returns>
            <param name="groupName">Name of the Group to find.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.Contains(dotnetCHARTING.Mapping.Group)">
            <summary>Determines whether this collection contains a specified
Group.</summary>
            <returns>true if the specified Group belongs to this collection;
otherwise, false.</returns>
            <param name="group">The Group to find.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.IndexOf(dotnetCHARTING.Mapping.Group)">
            <summary>Determines index of a specified Group in this
collection.</summary>
            <returns>The zero-based index of the specified Group.</returns>
            <param name="group">The Group to find.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.Insert(System.Int32,dotnetCHARTING.Mapping.Group)">
            <summary>Inserts a Group into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the Group.</param>
            <param name="group">The Group to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.Remove">
            <summary>Removes a specified Group from this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.Remove(dotnetCHARTING.Mapping.Group)">
            <summary>Removes a specified Group from this collection.</summary>
            <param name="group">The Group to remove.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupCollection.Remove(System.String)">
            <summary>Removes a Group with the specified name from this
collection.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.GroupCollection.Item">
            <summary>Gets or sets the object with the specified name.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.GroupCollection.Item(System.String)">
            <summary>Gets or sets the object with the specified name.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.GroupCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.Mapping.GroupConditionCollection">
            <summary>Contains a collection of conditions.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupConditionCollection.#ctor">
            <summary>Initializes a new instance of the GroupConditionCollection
object.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.GroupConditionCollection.Add(System.String,System.String)">
            <summary>Adds a condition to this collection.</summary>
            <param name="shapeParam">Name of the attribute.</param>
            <param name="paramValue">Value the attribute must have in order to meet this
condition.</param>
        </member>
        <member name="T:dotnetCHARTING.Mapping.MapDataEngine">
            <summary>Acquires a MapLayer from a file.</summary>
            <remarks>Supported file types include ShapeFile (.shp) Ecw File
(.ecw).</remarks>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapDataEngine.LoadLayer">
            <summary>Extracts data into a MapLayer from the specified file.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapDataEngine.LoadLayer(System.String)">
            <summary>Extracts data into a MapLayer from the specified file.</summary>
            <param name="fileName">Filename of the file used to populate the MapLayer.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapDataEngine.LoadLayer(System.String,System.String)">
            <summary>Extracts map data from the specified ecw file into a MapLayer
and caches the generated image. Caching ecw files is recommended
when used with projections.</summary>
            <param name="fileName">Path and file name of the ecw file.</param>
            <param name="cFileName">Path and file name of the cached jpg file.</param>
        </member>
        <member name="T:dotnetCHARTING.Mapping.MapLayer">
            <summary>Represents a layer on the map. Either an ecw file (.ecw)
image, or a shape file (.shp) collection of shapes including data
the shape file contains.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapLayer.#ctor">
            <summary>Initializes a new instance of the MapLayer object.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapLayer.ImportData(System.Data.DataTable,System.String,System.String)">
            <summary>Imports and merges a DataTable with this
MapLayer.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.MapLayer.AttributeNames">
            <summary>Gets a string array of attribute names associated with the
loaded shape file.</summary>
            <remarks>When ImportData() is used, the newly added columns will be in
this array.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Mapping.MapLayer.DefaultShape">
            <summary>Gets or sets a Shape object that specifies the default
properties of all subsequent shapes in this MapLayer.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.MapLayer.Groups">
            <summary>Gets a GroupCollection object which holds Group objects used
to modify similar shapes automatically.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.MapLayer.Palette">
            <summary>Gets or sets an array of colors that defines the colors that
will be used by the shapes of this MapLayer.</summary>
            <remarks>When setting this property, each shape will get it's own
color. Whereas by default, all shapes within a mapLayer take their
color from MapLayer.DefaultShape.Background.Color.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Mapping.MapLayer.PaletteName">
            <summary>Gets or sets a Palette enumeration that indicates which
static palette will be used by the shapes of this
MapLayer.</summary>
            <remarks>When setting this property, each shape will get it's own
color. Whereas by default, all shapes within a mapLayer take their
color from MapLayer.DefaultShape.Background.Color.</remarks>
        </member>
        <member name="P:dotnetCHARTING.Mapping.MapLayer.Shapes">
            <summary>Gets a collection of Shape objects generated by the source
shape file (.shp).</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.MapLayer.SourceFileName">
            <summary>Gets or sets the name of the file used to populate this
MapLayer.</summary>
        </member>
        <member name="T:dotnetCHARTING.Mapping.MapLayerCollection">
            <summary>Contains a collection of MapLayer objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapLayerCollection.Add">
            <summary>Adds a specified MapLayer class to this collection.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapLayerCollection.Add(System.String)">
            <summary>Adds a specified MapLayer class to this collection.</summary>
            <returns>The zero-based index of the added MapLayer.</returns>
            <param name="fileName">Name of the file containing the map data to add.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapLayerCollection.Add(dotnetCHARTING.Mapping.MapLayerCollection)">
            <summary>Adds a specified LayerCollection to this collection.</summary>
            <param name="mapLayerCollection">The LayerCollection to add.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapLayerCollection.Add(dotnetCHARTING.Mapping.MapLayer[])">
            <summary>Adds the specified MapLayer objects to this
collection.</summary>
            <param name="mapLayerList">A list of MapLayer objects to add.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapLayerCollection.Contains(dotnetCHARTING.Mapping.MapLayer)">
            <summary>Determines whether this collection contains a specified
MapLayer.</summary>
            <returns>true if the specified MapLayer belongs to this collection;
otherwise, false.</returns>
            <param name="mapLayer">The MapLayer to find.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapLayerCollection.IndexOf(dotnetCHARTING.Mapping.MapLayer)">
            <summary>Determines index of a specified MapLayer in this
collection.</summary>
            <returns>The zero-based index of the specified MapLayer.</returns>
            <param name="mapLayer">The MapLayer to find.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapLayerCollection.Insert(System.Int32,dotnetCHARTING.Mapping.MapLayer)">
            <summary>Inserts a MapLayer into this collection at a specified
index.</summary>
            <param name="index">The zero-based index into the collection at which to insert
the MapLayer.</param>
            <param name="mapLayer">The MapLayer to insert into this collection.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.MapLayerCollection.Remove(dotnetCHARTING.Mapping.MapLayer)">
            <summary>Removes a specified MapLayer from this collection.</summary>
            <param name="mapLayer">The MapLayer to remove.</param>
        </member>
        <member name="P:dotnetCHARTING.Mapping.MapLayerCollection.Item(System.Int32)">
            <summary>Gets or sets the object at a specified index.</summary>
        </member>
        <member name="T:dotnetCHARTING.Mapping.Mapping">
            <summary>Encapsulates properties associated with mapping. These
properties are used only when using a map chart: (Chart.Type =
ChartType.Map).</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Mapping.#ctor">
            <summary>Initializes a new instance of the Mapping class.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Mapping.GetLatLongCoordinates">
            <summary>Computes the Latitude, Longitude coordinates based on the
specified pixel coordinates of the chart image.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Mapping.GetLatLongCoordinates(System.String)">
            <summary>Computes the Latitude, Longitude coordinates based on the
specified pixel coordinates of the chart image.</summary>
            <returns/>
            <param name="pixelCoordinate">Pixel coordinates in the form of: "x,y".</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Mapping.GetLatLongCoordinates(System.Drawing.Point)">
            <summary>Computes the Latitude, Longitude coordinates based on the
specified pixel coordinates of the chart image.</summary>
            <returns/>
            <param name="pixelCoordinate">Pixel position to convert.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Mapping.GetShapesAtPoint">
            <summary>Gets an arraylist of shapes beneath the specified pixel
coorinates.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Mapping.GetShapesAtPoint(System.Drawing.Point)">
            <summary>Gets an arraylist of shapes beneath the specified pixel
coorinates.</summary>
            <returns/>
            <param name="p">Pixel coordinates.</param>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Mapping.GetShapesAtPoint(System.String)">
            <summary>Gets an arraylist of shapes beneath the specified pixel
coorinates.</summary>
            <returns/>
            <param name="pixelCoordinate">Pixel coordinates in the form of: "x,y".</param>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Mapping.ChartArea">
            <summary>Gets or sets the chart area on which the map is drawn. It
accesses the same chart area instance as Chart.ChartArea</summary>
            <remarks>This property is equivalent to Chart.ChartArea</remarks>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Mapping.DefaultShape">
            <summary>Gets or sets a shape object that contains default properties
for all shapes on this map.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Mapping.MapLayerCollection">
            <summary>Gets a collection of MapLayer objects used to render the
map.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Mapping.Projection">
            <summary>Gets or sets an advanced projection the map rendering will be
based on. This includes either LambertConicProjection() or
MercatorProjection() methods.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Mapping.ZoomCenterPoint">
            <summary>Gets or sets a point that anchors the map to center when used
with ZoomPercentage.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Mapping.ZoomPercentage">
            <summary>Gets or sets a percent value that indicates the new zoomed
size of the map.</summary>
        </member>
        <member name="T:dotnetCHARTING.Mapping.Projection">
            <summary>Represents a Projection type used for projected rendering of
maps.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.Projection.#ctor">
            <summary>Initializes a new instance of the Projection
object.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Projection.Parameters">
            <summary>Gets or sets the projection parameters as a comma delimited
string.</summary>
            <remarks>    The following table defines the projection parameters
    based on the specific projection type.
    
        
            
                
                    Projection
                    Type
                    Parameters
                    Example
                
                
                    Mercator
                    Latitude in degrees
                    "-50"
                
                
                    Lambert Conic
                    Azimuthal coordinate on the surface of a
                    sphere,
                    The latitude (projection latitude) in
                    degrees,
                    The projection standard first parallel in
                    degrees,
                    The projection standard second parallel in
                    degrees.
                    "-96, 38, 32, 42"
                
                
                    Unprojected
                    N/A
                    ""
                
            
        
    </remarks>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Projection.Type">
            <summary>Gets or sets the projection type.</summary>
        </member>
        <member name="T:dotnetCHARTING.Mapping.Shape">
            <summary>Represents a shape within a MapLayer. Shapes are
automatically generated using shapefiles.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Shape.Background">
            <summary>Gets or sets the Background object for this shape.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Shape.Hotspot">
            <summary>Gets or sets the Hotspot of this shape.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Shape.Item">
            <summary>Gets a shape file attribute with the specified name.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Shape.Item(System.String)">
            <summary>Gets a shape file attribute with the specified name.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Shape.Item(System.Int32)">
            <summary>Gets a shape file attribute at the specified index.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Shape.Label">
            <summary>Gets or sets the Label for this shape.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Shape.LegendEntry">
            <summary>Gets or sets the LegendEntry of this Shape.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Shape.Line">
            <summary>Gets or sets the Line object used to outline this
shape.</summary>
        </member>
        <member name="P:dotnetCHARTING.Mapping.Shape.Marker">
            <summary>Gets or sets the Marker object drawn on this shape.</summary>
        </member>
        <member name="T:dotnetCHARTING.Mapping.ShapeCollection">
            <summary>Contains a collection of Shape objects.</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.ShapeCollection.#ctor">
            <summary>Initializes a new instance of ShapeCollection</summary>
        </member>
        <member name="M:dotnetCHARTING.Mapping.ShapeCollection.GetEnumerator">
            <summary>Returns an IEnumerator for the collection.</summary>
            <returns/>
        </member>
        <member name="P:dotnetCHARTING.Mapping.ShapeCollection.Item(System.Int32)">
            <summary>Gets the object at a specified index.</summary>
        </member>
    </members>
</doc>
